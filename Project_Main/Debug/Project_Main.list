
Project_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800c3f8  0800c3f8  0001c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c930  0800c930  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c938  0800c938  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006424  200001ec  0800cb2c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006610  0800cb2c  00026610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cfe5  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b62  00000000  00000000  0004d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00052d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  00054c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008843  00000000  00000000  00056978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002506e  00000000  00000000  0005f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a027f  00000000  00000000  00084229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001244a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ba4  00000000  00000000  001244fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3e0 	.word	0x0800c3e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800c3e0 	.word	0x0800c3e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
	int i =0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e009      	b.n	8000600 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc7 	bl	8000588 <ITM_SendChar>
	for(i=0;i<len;i++)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf1      	blt.n	80005ec <_write+0x16>
	return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <newTask>:
uint8_t new_task_init = 0;
void newTask(void *argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	for(;;) {
		if(!new_task_init) {
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <newTask+0x2c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d109      	bne.n	8000638 <newTask+0x24>
			CDC_Transmit_FS((uint8_t *) "Hello, from new task\r\n", strlen("Hello, from new task\r\n"));
 8000624:	2116      	movs	r1, #22
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <newTask+0x30>)
 8000628:	f00a fa14 	bl	800aa54 <CDC_Transmit_FS>
			printf("Hello, from new task\r\n");
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <newTask+0x34>)
 800062e:	f00a ffc1 	bl	800b5b4 <puts>
			new_task_init = 1;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <newTask+0x2c>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f007 fb51 	bl	8007ce0 <osDelay>
		if(!new_task_init) {
 800063e:	e7ed      	b.n	800061c <newTask+0x8>
 8000640:	2000020a 	.word	0x2000020a
 8000644:	0800c410 	.word	0x0800c410
 8000648:	0800c428 	.word	0x0800c428

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 ff8e 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f81e 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f962 	bl	8000920 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065c:	f000 f89e 	bl	800079c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000660:	f000 f8ca 	bl	80007f8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000664:	f000 f8f6 	bl	8000854 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000668:	f000 f924 	bl	80008b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066c:	f007 f986 	bl	800797c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000670:	4a05      	ldr	r2, [pc, #20]	; (8000688 <main+0x3c>)
 8000672:	2100      	movs	r1, #0
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <main+0x40>)
 8000676:	f007 f9eb 	bl	8007a50 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <main+0x44>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f007 f9b0 	bl	80079e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x38>
 8000686:	bf00      	nop
 8000688:	0800c838 	.word	0x0800c838
 800068c:	08000da5 	.word	0x08000da5
 8000690:	20004b24 	.word	0x20004b24

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fe66 	bl	800b374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <SystemClock_Config+0x100>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a30      	ldr	r2, [pc, #192]	; (8000794 <SystemClock_Config+0x100>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <SystemClock_Config+0x100>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemClock_Config+0x104>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <SystemClock_Config+0x104>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0x104>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800071a:	23c0      	movs	r3, #192	; 0xc0
 800071c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000722:	2308      	movs	r3, #8
 8000724:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800072a:	4618      	mov	r0, r3
 800072c:	f003 f96e 	bl	8003a0c <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000736:	f000 fc41 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2103      	movs	r1, #3
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fbc8 	bl	8003eec <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000762:	f000 fc2b 	bl	8000fbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800076a:	23c8      	movs	r3, #200	; 0xc8
 800076c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800076e:	2305      	movs	r3, #5
 8000770:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4618      	mov	r0, r3
 800077c:	f003 fde4 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000786:	f000 fc19 	bl	8000fbc <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3768      	adds	r7, #104	; 0x68
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MX_I2C1_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_I2C1_Init+0x50>)
 80007da:	f001 f9af 	bl	8001b3c <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 fbea 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20004b28 	.word	0x20004b28
 80007f0:	40005400 	.word	0x40005400
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2S2_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_I2S2_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2S2_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2S2_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_I2S2_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_I2S2_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_I2S2_Init+0x50>)
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <MX_I2S2_Init+0x58>)
 8000820:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_I2S2_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_I2S2_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_I2S2_Init+0x50>)
 8000830:	2201      	movs	r2, #1
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_I2S2_Init+0x50>)
 8000836:	f001 fac5 	bl	8001dc4 <HAL_I2S_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 fbbc 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20004c14 	.word	0x20004c14
 800084c:	40003800 	.word	0x40003800
 8000850:	00017700 	.word	0x00017700

08000854 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2S3_Init+0x54>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_I2S3_Init+0x58>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S3_Init+0x54>)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <MX_I2S3_Init+0x5c>)
 800087e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000894:	f001 fa96 	bl	8001dc4 <HAL_I2S_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089e:	f000 fb8d 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20004c5c 	.word	0x20004c5c
 80008ac:	40003c00 	.word	0x40003c00
 80008b0:	00017700 	.word	0x00017700

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_SPI1_Init+0x64>)
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_SPI1_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SPI1_Init+0x64>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_SPI1_Init+0x64>)
 8000906:	f003 fe6f 	bl	80045e8 <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 fb54 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20004bb8 	.word	0x20004bb8
 800091c:	40013000 	.word	0x40013000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	4b60      	ldr	r3, [pc, #384]	; (8000abc <MX_GPIO_Init+0x19c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a5f      	ldr	r2, [pc, #380]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5d      	ldr	r3, [pc, #372]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	4b59      	ldr	r3, [pc, #356]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a58      	ldr	r2, [pc, #352]	; (8000abc <MX_GPIO_Init+0x19c>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b56      	ldr	r3, [pc, #344]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b52      	ldr	r3, [pc, #328]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a51      	ldr	r2, [pc, #324]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <MX_GPIO_Init+0x19c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b48      	ldr	r3, [pc, #288]	; (8000abc <MX_GPIO_Init+0x19c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a43      	ldr	r2, [pc, #268]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a3c      	ldr	r2, [pc, #240]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_GPIO_Init+0x19c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009e4:	f001 f890 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	4835      	ldr	r0, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x1a4>)
 80009ee:	f001 f88b 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f2:	2200      	movs	r2, #0
 80009f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009f8:	4833      	ldr	r0, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0x1a8>)
 80009fa:	f001 f885 	bl	8001b08 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000a12:	f000 fef5 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f000 fee7 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a32:	2332      	movs	r3, #50	; 0x32
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000a46:	f000 fedb 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0x1a4>)
 8000a62:	f000 fecd 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000a7a:	f000 fec1 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a82:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_GPIO_Init+0x1a8>)
 8000a98:	f000 feb2 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_GPIO_Init+0x1a8>)
 8000ab0:	f000 fea6 	bl	8001800 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	10120000 	.word	0x10120000
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <CDC_ReceiveCallback>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallback(uint8_t *Buf, uint16_t Len)
{
 8000ad4:	b5b0      	push	{r4, r5, r7, lr}
 8000ad6:	b0c4      	sub	sp, #272	; 0x110
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	6018      	str	r0, [r3, #0]
 8000ade:	460a      	mov	r2, r1
 8000ae0:	1cbb      	adds	r3, r7, #2
 8000ae2:	801a      	strh	r2, [r3, #0]
	if(Buf[0] != '\r') {
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b0d      	cmp	r3, #13
 8000aec:	d029      	beq.n	8000b42 <CDC_ReceiveCallback+0x6e>
		if(((char)Buf[0] >= 65 && (char)Buf[0] <= 90) || ((char)Buf[0] >= 97 && (char)Buf[0] <= 122)) {
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b40      	cmp	r3, #64	; 0x40
 8000af6:	d904      	bls.n	8000b02 <CDC_ReceiveCallback+0x2e>
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b5a      	cmp	r3, #90	; 0x5a
 8000b00:	d90b      	bls.n	8000b1a <CDC_ReceiveCallback+0x46>
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b60      	cmp	r3, #96	; 0x60
 8000b0a:	f240 8139 	bls.w	8000d80 <CDC_ReceiveCallback+0x2ac>
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b7a      	cmp	r3, #122	; 0x7a
 8000b16:	f200 8133 	bhi.w	8000d80 <CDC_ReceiveCallback+0x2ac>
			buffer[count++] = Buf[0];
 8000b1a:	4b9c      	ldr	r3, [pc, #624]	; (8000d8c <CDC_ReceiveCallback+0x2b8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	4a9a      	ldr	r2, [pc, #616]	; (8000d8c <CDC_ReceiveCallback+0x2b8>)
 8000b24:	7011      	strb	r1, [r2, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7819      	ldrb	r1, [r3, #0]
 8000b2e:	4b98      	ldr	r3, [pc, #608]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000b30:	5499      	strb	r1, [r3, r2]
			CDC_Transmit_FS(Buf, Len);
 8000b32:	1cbb      	adds	r3, r7, #2
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4611      	mov	r1, r2
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	f009 ff8a 	bl	800aa54 <CDC_Transmit_FS>
		}
		init = 1;
		memset(buffer, 0, sizeof buffer);
		count = 0;
	}
}
 8000b40:	e11e      	b.n	8000d80 <CDC_ReceiveCallback+0x2ac>
		uint8_t buf_cb[256] = "\r\ncallback: ";
 8000b42:	f107 050c 	add.w	r5, r7, #12
 8000b46:	4b93      	ldr	r3, [pc, #588]	; (8000d94 <CDC_ReceiveCallback+0x2c0>)
 8000b48:	462c      	mov	r4, r5
 8000b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b4e:	7023      	strb	r3, [r4, #0]
 8000b50:	f105 030d 	add.w	r3, r5, #13
 8000b54:	22f3      	movs	r2, #243	; 0xf3
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a fc0b 	bl	800b374 <memset>
		strcat((char *) buf_cb, (char *) buffer);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	498b      	ldr	r1, [pc, #556]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00a fd5d 	bl	800b624 <strcat>
		strcat((char *) buf_cb, "\r\n");
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fb36 	bl	80001e0 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a86      	ldr	r2, [pc, #536]	; (8000d98 <CDC_ReceiveCallback+0x2c4>)
 8000b80:	8811      	ldrh	r1, [r2, #0]
 8000b82:	7892      	ldrb	r2, [r2, #2]
 8000b84:	8019      	strh	r1, [r3, #0]
 8000b86:	709a      	strb	r2, [r3, #2]
		CDC_Transmit_FS(buf_cb, strlen((char *) buf_cb));
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fb27 	bl	80001e0 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f009 ff59 	bl	800aa54 <CDC_Transmit_FS>
		for(uint8_t i = 0; i < 32; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ba8:	e0da      	b.n	8000d60 <CDC_ReceiveCallback+0x28c>
			if((char)buffer[i] == 'h' && (char)buffer[i+1] == 'e' && (char)buffer[i+2] == 'l' && (char)buffer[i+3] == 'p') {
 8000baa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bae:	4a78      	ldr	r2, [pc, #480]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	2b68      	cmp	r3, #104	; 0x68
 8000bb4:	d118      	bne.n	8000be8 <CDC_ReceiveCallback+0x114>
 8000bb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a74      	ldr	r2, [pc, #464]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	2b65      	cmp	r3, #101	; 0x65
 8000bc2:	d111      	bne.n	8000be8 <CDC_ReceiveCallback+0x114>
 8000bc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bc8:	3302      	adds	r3, #2
 8000bca:	4a71      	ldr	r2, [pc, #452]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bcc:	5cd3      	ldrb	r3, [r2, r3]
 8000bce:	2b6c      	cmp	r3, #108	; 0x6c
 8000bd0:	d10a      	bne.n	8000be8 <CDC_ReceiveCallback+0x114>
 8000bd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bd6:	3303      	adds	r3, #3
 8000bd8:	4a6d      	ldr	r2, [pc, #436]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bda:	5cd3      	ldrb	r3, [r2, r3]
 8000bdc:	2b70      	cmp	r3, #112	; 0x70
 8000bde:	d103      	bne.n	8000be8 <CDC_ReceiveCallback+0x114>
				flag = 0;
 8000be0:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
				break;
 8000be6:	e0c0      	b.n	8000d6a <CDC_ReceiveCallback+0x296>
			} else if((char)buffer[i] == 'c' && (char)buffer[i+1] == 'r' && (char)buffer[i+2] == 'e' && (char)buffer[i+3] == 'a' && (char)buffer[i+4] == 't' && (char)buffer[i+5] == 'e') {
 8000be8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bec:	4a68      	ldr	r2, [pc, #416]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	2b63      	cmp	r3, #99	; 0x63
 8000bf2:	d126      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
 8000bf4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a65      	ldr	r2, [pc, #404]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	2b72      	cmp	r3, #114	; 0x72
 8000c00:	d11f      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
 8000c02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c06:	3302      	adds	r3, #2
 8000c08:	4a61      	ldr	r2, [pc, #388]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	2b65      	cmp	r3, #101	; 0x65
 8000c0e:	d118      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
 8000c10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c14:	3303      	adds	r3, #3
 8000c16:	4a5e      	ldr	r2, [pc, #376]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	2b61      	cmp	r3, #97	; 0x61
 8000c1c:	d111      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
 8000c1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c22:	3304      	adds	r3, #4
 8000c24:	4a5a      	ldr	r2, [pc, #360]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	2b74      	cmp	r3, #116	; 0x74
 8000c2a:	d10a      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
 8000c2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c30:	3305      	adds	r3, #5
 8000c32:	4a57      	ldr	r2, [pc, #348]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	2b65      	cmp	r3, #101	; 0x65
 8000c38:	d103      	bne.n	8000c42 <CDC_ReceiveCallback+0x16e>
				flag = 1;
 8000c3a:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
				break;
 8000c40:	e093      	b.n	8000d6a <CDC_ReceiveCallback+0x296>
			} else if((char)buffer[i] == 'd' && (char)buffer[i+1] == 'e' && (char)buffer[i+2] == 'l' && (char)buffer[i+3] == 'e' && (char)buffer[i+4] == 't' && (char)buffer[i+5] == 'e') {
 8000c42:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c46:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d126      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
 8000c4e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a4e      	ldr	r2, [pc, #312]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	2b65      	cmp	r3, #101	; 0x65
 8000c5a:	d11f      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
 8000c5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c60:	3302      	adds	r3, #2
 8000c62:	4a4b      	ldr	r2, [pc, #300]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	2b6c      	cmp	r3, #108	; 0x6c
 8000c68:	d118      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
 8000c6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c6e:	3303      	adds	r3, #3
 8000c70:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	2b65      	cmp	r3, #101	; 0x65
 8000c76:	d111      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
 8000c78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	4a44      	ldr	r2, [pc, #272]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	2b74      	cmp	r3, #116	; 0x74
 8000c84:	d10a      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
 8000c86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c8a:	3305      	adds	r3, #5
 8000c8c:	4a40      	ldr	r2, [pc, #256]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	2b65      	cmp	r3, #101	; 0x65
 8000c92:	d103      	bne.n	8000c9c <CDC_ReceiveCallback+0x1c8>
				flag = 2;
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	701a      	strb	r2, [r3, #0]
				break;
 8000c9a:	e066      	b.n	8000d6a <CDC_ReceiveCallback+0x296>
			} else if((char)buffer[i] == 's' && (char)buffer[i+1] == 'h' && (char)buffer[i+2] == 'o' && (char)buffer[i+3] == 'w') {
 8000c9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ca0:	4a3b      	ldr	r2, [pc, #236]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	2b73      	cmp	r3, #115	; 0x73
 8000ca6:	d118      	bne.n	8000cda <CDC_ReceiveCallback+0x206>
 8000ca8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a38      	ldr	r2, [pc, #224]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	2b68      	cmp	r3, #104	; 0x68
 8000cb4:	d111      	bne.n	8000cda <CDC_ReceiveCallback+0x206>
 8000cb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cba:	3302      	adds	r3, #2
 8000cbc:	4a34      	ldr	r2, [pc, #208]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	2b6f      	cmp	r3, #111	; 0x6f
 8000cc2:	d10a      	bne.n	8000cda <CDC_ReceiveCallback+0x206>
 8000cc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cc8:	3303      	adds	r3, #3
 8000cca:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000ccc:	5cd3      	ldrb	r3, [r2, r3]
 8000cce:	2b77      	cmp	r3, #119	; 0x77
 8000cd0:	d103      	bne.n	8000cda <CDC_ReceiveCallback+0x206>
				flag = 3;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	701a      	strb	r2, [r3, #0]
				break;
 8000cd8:	e047      	b.n	8000d6a <CDC_ReceiveCallback+0x296>
			} else if((char)buffer[i] == 'p' && (char)buffer[i+1] == 'r' && (char)buffer[i+2] == 'i' && (char)buffer[i+3] == 'o' && (char)buffer[i+4] == 'r' && (char)buffer[i+5] == 'i' && (char)buffer[i+6] == 't' && (char)buffer[i+7] == 'y') {
 8000cda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	2b70      	cmp	r3, #112	; 0x70
 8000ce4:	d134      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000ce6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	2b72      	cmp	r3, #114	; 0x72
 8000cf2:	d12d      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000cf4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	2b69      	cmp	r3, #105	; 0x69
 8000d00:	d126      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000d02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d06:	3303      	adds	r3, #3
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	2b6f      	cmp	r3, #111	; 0x6f
 8000d0e:	d11f      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000d10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d14:	3304      	adds	r3, #4
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	2b72      	cmp	r3, #114	; 0x72
 8000d1c:	d118      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000d1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d22:	3305      	adds	r3, #5
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	2b69      	cmp	r3, #105	; 0x69
 8000d2a:	d111      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000d2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d30:	3306      	adds	r3, #6
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	2b74      	cmp	r3, #116	; 0x74
 8000d38:	d10a      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
 8000d3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d3e:	3307      	adds	r3, #7
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	2b79      	cmp	r3, #121	; 0x79
 8000d46:	d103      	bne.n	8000d50 <CDC_ReceiveCallback+0x27c>
				flag = 4;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	701a      	strb	r2, [r3, #0]
				break;
 8000d4e:	e00c      	b.n	8000d6a <CDC_ReceiveCallback+0x296>
				flag = 5;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <CDC_ReceiveCallback+0x2c8>)
 8000d52:	2205      	movs	r2, #5
 8000d54:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 32; i++) {
 8000d56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	f67f af20 	bls.w	8000baa <CDC_ReceiveCallback+0xd6>
		init = 1;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <CDC_ReceiveCallback+0x2cc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		memset(buffer, 0, sizeof buffer);
 8000d70:	223c      	movs	r2, #60	; 0x3c
 8000d72:	2100      	movs	r1, #0
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <CDC_ReceiveCallback+0x2bc>)
 8000d76:	f00a fafd 	bl	800b374 <memset>
		count = 0;
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <CDC_ReceiveCallback+0x2b8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000208 	.word	0x20000208
 8000d90:	20004b7c 	.word	0x20004b7c
 8000d94:	0800c444 	.word	0x0800c444
 8000d98:	0800c440 	.word	0x0800c440
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000209 	.word	0x20000209

08000da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	b0c7      	sub	sp, #284	; 0x11c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000dae:	f009 fd8d 	bl	800a8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(init && flag == 5) {
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <StartDefaultTask+0x2e>
 8000dba:	4b66      	ldr	r3, [pc, #408]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d107      	bne.n	8000dd2 <StartDefaultTask+0x2e>
		CDC_Transmit_FS((uint8_t *)"[-] Command not available! Type help for more info!\r\n", strlen("[-] Command not available! Type help for more info!\r\n"));
 8000dc2:	2135      	movs	r1, #53	; 0x35
 8000dc4:	4864      	ldr	r0, [pc, #400]	; (8000f58 <StartDefaultTask+0x1b4>)
 8000dc6:	f009 fe45 	bl	800aa54 <CDC_Transmit_FS>
		init = 0;
 8000dca:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e0ba      	b.n	8000f48 <StartDefaultTask+0x1a4>
	}
	else if(init && flag == 0) {
 8000dd2:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <StartDefaultTask+0x4e>
 8000dda:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <StartDefaultTask+0x4e>
		CDC_Transmit_FS((uint8_t *)"[+] Following commands are available:\r\ncreate : create a task\r\ndelete : delete a task\r\nshow : show the tasks\r\npriority : change the priority of a task\r\n\r\n", strlen("[+] Following commands are available:\r\ncreate : create a task\r\ndelete : delete a task\r\nshow : show the tasks\r\npriority : change the priority of a task\r\n\r\n"));
 8000de2:	219a      	movs	r1, #154	; 0x9a
 8000de4:	485d      	ldr	r0, [pc, #372]	; (8000f5c <StartDefaultTask+0x1b8>)
 8000de6:	f009 fe35 	bl	800aa54 <CDC_Transmit_FS>
		init = 0;
 8000dea:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e0aa      	b.n	8000f48 <StartDefaultTask+0x1a4>
	}
	else if(init && flag == 1) {
 8000df2:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01c      	beq.n	8000e34 <StartDefaultTask+0x90>
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d118      	bne.n	8000e34 <StartDefaultTask+0x90>
		if(new_task_init) {
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <StartDefaultTask+0x1bc>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <StartDefaultTask+0x70>
			CDC_Transmit_FS((uint8_t *) "[-] New Task already created!\r\n", strlen("[-] New Task already created!\r\n"));
 8000e0a:	211f      	movs	r1, #31
 8000e0c:	4855      	ldr	r0, [pc, #340]	; (8000f64 <StartDefaultTask+0x1c0>)
 8000e0e:	f009 fe21 	bl	800aa54 <CDC_Transmit_FS>
 8000e12:	e00b      	b.n	8000e2c <StartDefaultTask+0x88>
		} else {
			new_task = osThreadNew(newTask, NULL, &new_task_attribute);
 8000e14:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <StartDefaultTask+0x1c4>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <StartDefaultTask+0x1c8>)
 8000e1a:	f006 fe19 	bl	8007a50 <osThreadNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a53      	ldr	r2, [pc, #332]	; (8000f70 <StartDefaultTask+0x1cc>)
 8000e22:	6013      	str	r3, [r2, #0]
			CDC_Transmit_FS((uint8_t *) "[+] New Task created!\r\n", strlen("[+] New Task created!\r\n"));
 8000e24:	2117      	movs	r1, #23
 8000e26:	4853      	ldr	r0, [pc, #332]	; (8000f74 <StartDefaultTask+0x1d0>)
 8000e28:	f009 fe14 	bl	800aa54 <CDC_Transmit_FS>

		}
		init = 0;
 8000e2c:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e089      	b.n	8000f48 <StartDefaultTask+0x1a4>
	}
	else if(init && flag == 2) {
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01f      	beq.n	8000e7c <StartDefaultTask+0xd8>
 8000e3c:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d11b      	bne.n	8000e7c <StartDefaultTask+0xd8>
		if(new_task_init) {
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <StartDefaultTask+0x1bc>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00f      	beq.n	8000e6c <StartDefaultTask+0xc8>
			osThreadTerminate(new_task);
 8000e4c:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <StartDefaultTask+0x1cc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fedf 	bl	8007c14 <osThreadTerminate>
			new_task_init = 0;
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <StartDefaultTask+0x1bc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *) "[+] New Task destroyed!\r\n", strlen("[+] New Task destroyed!\r\n"));
 8000e5c:	2119      	movs	r1, #25
 8000e5e:	4846      	ldr	r0, [pc, #280]	; (8000f78 <StartDefaultTask+0x1d4>)
 8000e60:	f009 fdf8 	bl	800aa54 <CDC_Transmit_FS>
			printf("newTask destroyed!\r\n");
 8000e64:	4845      	ldr	r0, [pc, #276]	; (8000f7c <StartDefaultTask+0x1d8>)
 8000e66:	f00a fba5 	bl	800b5b4 <puts>
 8000e6a:	e003      	b.n	8000e74 <StartDefaultTask+0xd0>
		} else {
			CDC_Transmit_FS((uint8_t *) "[+] New Task not created!\r\n", strlen("[+] New Task not created!\r\n"));
 8000e6c:	211b      	movs	r1, #27
 8000e6e:	4844      	ldr	r0, [pc, #272]	; (8000f80 <StartDefaultTask+0x1dc>)
 8000e70:	f009 fdf0 	bl	800aa54 <CDC_Transmit_FS>
		}
		init = 0;
 8000e74:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e065      	b.n	8000f48 <StartDefaultTask+0x1a4>
	}
	else if(init && flag == 3)
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d04c      	beq.n	8000f1e <StartDefaultTask+0x17a>
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d148      	bne.n	8000f1e <StartDefaultTask+0x17a>
	{
		uint32_t task_count = osThreadGetCount();
 8000e8c:	f006 ff02 	bl	8007c94 <osThreadGetCount>
 8000e90:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		char buf[9];
		sprintf(buf, "%08x", task_count);
 8000e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000e9c:	4939      	ldr	r1, [pc, #228]	; (8000f84 <StartDefaultTask+0x1e0>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00a fba0 	bl	800b5e4 <siprintf>
		char tmp_buf[256] = "[+] Total number of tasks running : ";
 8000ea4:	f107 0608 	add.w	r6, r7, #8
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <StartDefaultTask+0x1e4>)
 8000eaa:	4634      	mov	r4, r6
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eba:	6020      	str	r0, [r4, #0]
 8000ebc:	3404      	adds	r4, #4
 8000ebe:	7021      	strb	r1, [r4, #0]
 8000ec0:	f106 0325 	add.w	r3, r6, #37	; 0x25
 8000ec4:	22db      	movs	r2, #219	; 0xdb
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00a fa53 	bl	800b374 <memset>
		strcat(tmp_buf, buf);
 8000ece:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00a fba3 	bl	800b624 <strcat>
		strcat(tmp_buf, "\r\n");
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff f97c 	bl	80001e0 <strlen>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <StartDefaultTask+0x1e8>)
 8000ef4:	8811      	ldrh	r1, [r2, #0]
 8000ef6:	7892      	ldrb	r2, [r2, #2]
 8000ef8:	8019      	strh	r1, [r3, #0]
 8000efa:	709a      	strb	r2, [r3, #2]
		CDC_Transmit_FS((uint8_t *)tmp_buf, strlen(tmp_buf));
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f96d 	bl	80001e0 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f009 fd9f 	bl	800aa54 <CDC_Transmit_FS>
		init = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	{
 8000f1c:	e014      	b.n	8000f48 <StartDefaultTask+0x1a4>
	}
	else if(init && flag == 4)
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d010      	beq.n	8000f48 <StartDefaultTask+0x1a4>
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <StartDefaultTask+0x1b0>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d10c      	bne.n	8000f48 <StartDefaultTask+0x1a4>
	{
		osThreadSetPriority(defaultTaskHandle, osPriorityHigh);
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <StartDefaultTask+0x1ec>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2128      	movs	r1, #40	; 0x28
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 fe31 	bl	8007b9c <osThreadSetPriority>
		CDC_Transmit_FS((uint8_t *)"[+]Priority changed to high of default thread!\r\n", strlen("[+]Priority changed to high of default thread!\r\n"));
 8000f3a:	2130      	movs	r1, #48	; 0x30
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <StartDefaultTask+0x1f0>)
 8000f3e:	f009 fd89 	bl	800aa54 <CDC_Transmit_FS>
		init = 0;
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <StartDefaultTask+0x1ac>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f006 fec9 	bl	8007ce0 <osDelay>
	if(init && flag == 5) {
 8000f4e:	e730      	b.n	8000db2 <StartDefaultTask+0xe>
 8000f50:	20000209 	.word	0x20000209
 8000f54:	20000000 	.word	0x20000000
 8000f58:	0800c544 	.word	0x0800c544
 8000f5c:	0800c57c 	.word	0x0800c57c
 8000f60:	2000020a 	.word	0x2000020a
 8000f64:	0800c618 	.word	0x0800c618
 8000f68:	0800c85c 	.word	0x0800c85c
 8000f6c:	08000615 	.word	0x08000615
 8000f70:	20004c10 	.word	0x20004c10
 8000f74:	0800c638 	.word	0x0800c638
 8000f78:	0800c650 	.word	0x0800c650
 8000f7c:	0800c66c 	.word	0x0800c66c
 8000f80:	0800c680 	.word	0x0800c680
 8000f84:	0800c69c 	.word	0x0800c69c
 8000f88:	0800c6d8 	.word	0x0800c6d8
 8000f8c:	0800c440 	.word	0x0800c440
 8000f90:	20004b24 	.word	0x20004b24
 8000f94:	0800c6a4 	.word	0x0800c6a4

08000f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000faa:	f000 fb03 	bl	80015b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40014800 	.word	0x40014800

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x54>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_MspInit+0x54>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x54>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_MspInit+0x54>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_MspInit+0x54>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_MspInit+0x54>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0001 	mvn.w	r0, #1
 800100e:	f000 fbcd 	bl	80017ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12c      	bne.n	800109c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800105e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	2312      	movs	r3, #18
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001070:	2304      	movs	r3, #4
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <HAL_I2C_MspInit+0x8c>)
 800107c:	f000 fbc0 	bl	8001800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 800108a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_I2C_MspInit+0x88>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40005400 	.word	0x40005400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a59      	ldr	r2, [pc, #356]	; (8001234 <HAL_I2S_MspInit+0x184>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d15b      	bne.n	800118a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	4b58      	ldr	r3, [pc, #352]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a57      	ldr	r2, [pc, #348]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b55      	ldr	r3, [pc, #340]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	623b      	str	r3, [r7, #32]
 80010ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	4b51      	ldr	r3, [pc, #324]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <HAL_I2S_MspInit+0x188>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <HAL_I2S_MspInit+0x188>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_I2S_MspInit+0x188>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <HAL_I2S_MspInit+0x188>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001136:	2306      	movs	r3, #6
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	483e      	ldr	r0, [pc, #248]	; (800123c <HAL_I2S_MspInit+0x18c>)
 8001142:	f000 fb5d 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001146:	2308      	movs	r3, #8
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001156:	2305      	movs	r3, #5
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4836      	ldr	r0, [pc, #216]	; (800123c <HAL_I2S_MspInit+0x18c>)
 8001162:	f000 fb4d 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001166:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001178:	2305      	movs	r3, #5
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	482f      	ldr	r0, [pc, #188]	; (8001240 <HAL_I2S_MspInit+0x190>)
 8001184:	f000 fb3c 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001188:	e04f      	b.n	800122a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2d      	ldr	r2, [pc, #180]	; (8001244 <HAL_I2S_MspInit+0x194>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d14a      	bne.n	800122a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_I2S_MspInit+0x188>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_I2S_MspInit+0x188>)
 800119e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_I2S_MspInit+0x188>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011e8:	2310      	movs	r3, #16
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f8:	2306      	movs	r3, #6
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <HAL_I2S_MspInit+0x198>)
 8001204:	f000 fafc 	bl	8001800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001208:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800121a:	2306      	movs	r3, #6
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_I2S_MspInit+0x18c>)
 8001226:	f000 faeb 	bl	8001800 <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40003800 	.word	0x40003800
 8001238:	40023800 	.word	0x40023800
 800123c:	40020800 	.word	0x40020800
 8001240:	40020400 	.word	0x40020400
 8001244:	40003c00 	.word	0x40003c00
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_SPI_MspInit+0x84>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12b      	bne.n	80012c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012a6:	23e0      	movs	r3, #224	; 0xe0
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b6:	2305      	movs	r3, #5
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 80012c2:	f000 fa9d 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013000 	.word	0x40013000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	201a      	movs	r0, #26
 80012f2:	f000 fa5b 	bl	80017ac <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012f6:	201a      	movs	r0, #26
 80012f8:	f000 fa74 	bl	80017e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_InitTick+0xa0>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_InitTick+0xa0>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130a:	6453      	str	r3, [r2, #68]	; 0x44
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_InitTick+0xa0>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ffde 	bl	80042e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001328:	f002 ffc8 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 800132c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	4a13      	ldr	r2, [pc, #76]	; (8001380 <HAL_InitTick+0xa4>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	3b01      	subs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_InitTick+0xa8>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_InitTick+0xac>)
 8001340:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_InitTick+0xa8>)
 8001344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001348:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_InitTick+0xa8>)
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_InitTick+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_InitTick+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_InitTick+0xa8>)
 800135e:	f003 f9a7 	bl	80046b0 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_InitTick+0xa8>)
 800136a:	f003 f9d6 	bl	800471a <HAL_TIM_Base_Start_IT>
 800136e:	4603      	mov	r3, r0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3730      	adds	r7, #48	; 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	431bde83 	.word	0x431bde83
 8001384:	20004ca4 	.word	0x20004ca4
 8001388:	40014800 	.word	0x40014800

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80013be:	f003 f9d0 	bl	8004762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20004ca4 	.word	0x20004ca4

080013cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <OTG_FS_IRQHandler+0x10>)
 80013d2:	f001 fae7 	bl	80029a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200061f8 	.word	0x200061f8

080013e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e00a      	b.n	8001408 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f2:	f3af 8000 	nop.w
 80013f6:	4601      	mov	r1, r0
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	b2ca      	uxtb	r2, r1
 8001400:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf0      	blt.n	80013f2 <_read+0x12>
	}

return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:
	}
	return len;
}

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f009 ff16 	bl	800b2e4 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20020000 	.word	0x20020000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	20006610 	.word	0x20006610

080014f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <SystemInit+0x28>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <SystemInit+0x28>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SystemInit+0x28>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
#endif
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001522:	e003      	b.n	800152c <LoopCopyDataInit>

08001524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152a:	3104      	adds	r1, #4

0800152c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001534:	d3f6      	bcc.n	8001524 <CopyDataInit>
  ldr  r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001538:	e002      	b.n	8001540 <LoopFillZerobss>

0800153a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800153a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800153c:	f842 3b04 	str.w	r3, [r2], #4

08001540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001544:	d3f9      	bcc.n	800153a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001546:	f7ff ffd3 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f009 fed1 	bl	800b2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f87d 	bl	800064c <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001558:	0800c940 	.word	0x0800c940
  ldr  r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001560:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001564:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001568:	20006610 	.word	0x20006610

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f8fc 	bl	8001796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fe9c 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fd10 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20004ce4 	.word	0x20004ce4

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20004ce4 	.word	0x20004ce4

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000000c 	.word	0x2000000c

0800163c <__NVIC_SetPriorityGrouping>:
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff4c 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017be:	f7ff ff61 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	6978      	ldr	r0, [r7, #20]
 80017ca:	f7ff ffb1 	bl	8001730 <NVIC_EncodePriority>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff80 	bl	80016dc <__NVIC_SetPriority>
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff54 	bl	80016a0 <__NVIC_EnableIRQ>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e159      	b.n	8001ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8148 	bne.w	8001aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d00b      	beq.n	800185a <HAL_GPIO_Init+0x5a>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184e:	2b11      	cmp	r3, #17
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b12      	cmp	r3, #18
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0xfc>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b12      	cmp	r3, #18
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a2 	beq.w	8001aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a56      	ldr	r2, [pc, #344]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a2:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_GPIO_Init+0x2ec>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x202>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_GPIO_Init+0x2f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x1fe>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a47      	ldr	r2, [pc, #284]	; (8001af8 <HAL_GPIO_Init+0x2f8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x1fa>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_GPIO_Init+0x2fc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x1f6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <HAL_GPIO_Init+0x300>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x1f2>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e008      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x204>
 8001a02:	2300      	movs	r3, #0
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <HAL_GPIO_Init+0x2ec>)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a46:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a70:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x304>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	f67f aea2 	bls.w	800181c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e12b      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fa5c 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba0:	f002 fb78 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a81      	ldr	r2, [pc, #516]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d807      	bhi.n	8001bc0 <HAL_I2C_Init+0x84>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a80      	ldr	r2, [pc, #512]	; (8001db4 <HAL_I2C_Init+0x278>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e006      	b.n	8001bce <HAL_I2C_Init+0x92>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a7d      	ldr	r2, [pc, #500]	; (8001db8 <HAL_I2C_Init+0x27c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0e7      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a78      	ldr	r2, [pc, #480]	; (8001dbc <HAL_I2C_Init+0x280>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d802      	bhi.n	8001c10 <HAL_I2C_Init+0xd4>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	e009      	b.n	8001c24 <HAL_I2C_Init+0xe8>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_I2C_Init+0x284>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	3301      	adds	r3, #1
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	495c      	ldr	r1, [pc, #368]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d819      	bhi.n	8001c78 <HAL_I2C_Init+0x13c>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e59      	subs	r1, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c58:	400b      	ands	r3, r1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_I2C_Init+0x138>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e59      	subs	r1, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	e051      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e04f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_I2C_Init+0x168>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e012      	b.n	8001cca <HAL_I2C_Init+0x18e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x196>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e022      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_I2C_Init+0x1bc>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e58      	subs	r0, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6809      	ldr	r1, [r1, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6911      	ldr	r1, [r2, #16]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	000186a0 	.word	0x000186a0
 8001db4:	001e847f 	.word	0x001e847f
 8001db8:	003d08ff 	.word	0x003d08ff
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e128      	b.n	8002028 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a90      	ldr	r2, [pc, #576]	; (8002030 <HAL_I2S_Init+0x26c>)
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff f95d 	bl	80010b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e0c:	f023 030f 	bic.w	r3, r3, #15
 8001e10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d060      	beq.n	8001ee4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e001      	b.n	8001e34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d802      	bhi.n	8001e42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f002 fb70 	bl	8004528 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e48:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e52:	d125      	bne.n	8001ea0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	3305      	adds	r3, #5
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e01f      	b.n	8001ebe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e00e      	b.n	8001ebe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	3305      	adds	r3, #5
 8001ebc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_I2S_Init+0x270>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	08db      	lsrs	r3, r3, #3
 8001ec8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e003      	b.n	8001eec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d902      	bls.n	8001ef8 <HAL_I2S_Init+0x134>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2bff      	cmp	r3, #255	; 0xff
 8001ef6:	d907      	bls.n	8001f08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e08f      	b.n	8002028 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f26:	f023 030f 	bic.w	r3, r3, #15
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6851      	ldr	r1, [r2, #4]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68d2      	ldr	r2, [r2, #12]
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6992      	ldr	r2, [r2, #24]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d161      	bne.n	8002018 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a38      	ldr	r2, [pc, #224]	; (8002038 <HAL_I2S_Init+0x274>)
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a37      	ldr	r2, [pc, #220]	; (800203c <HAL_I2S_Init+0x278>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_I2S_Init+0x1a4>
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_I2S_Init+0x27c>)
 8001f66:	e001      	b.n	8001f6c <HAL_I2S_Init+0x1a8>
 8001f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	4932      	ldr	r1, [pc, #200]	; (800203c <HAL_I2S_Init+0x278>)
 8001f74:	428a      	cmp	r2, r1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2S_Init+0x1b8>
 8001f78:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_I2S_Init+0x27c>)
 8001f7a:	e001      	b.n	8001f80 <HAL_I2S_Init+0x1bc>
 8001f7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f84:	f023 030f 	bic.w	r3, r3, #15
 8001f88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_I2S_Init+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_I2S_Init+0x1d4>
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_I2S_Init+0x27c>)
 8001f96:	e001      	b.n	8001f9c <HAL_I2S_Init+0x1d8>
 8001f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_I2S_Init+0x278>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_I2S_Init+0x1ea>
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_I2S_Init+0x27c>)
 8001fac:	e001      	b.n	8001fb2 <HAL_I2S_Init+0x1ee>
 8001fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbe:	d003      	beq.n	8001fc8 <HAL_I2S_Init+0x204>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d103      	bne.n	8001fd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e001      	b.n	8001fd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fea:	4303      	orrs	r3, r0
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002000:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_I2S_Init+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_I2S_Init+0x24c>
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_I2S_Init+0x27c>)
 800200e:	e001      	b.n	8002014 <HAL_I2S_Init+0x250>
 8002010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002014:	897a      	ldrh	r2, [r7, #10]
 8002016:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	0800213b 	.word	0x0800213b
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	08002251 	.word	0x08002251
 800203c:	40003800 	.word	0x40003800
 8002040:	40003400 	.word	0x40003400

08002044 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	1c9a      	adds	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10e      	bne.n	80020d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffb8 	bl	8002044 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	b292      	uxth	r2, r2
 80020f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	1c9a      	adds	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10e      	bne.n	8002132 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002122:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff93 	bl	8002058 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b04      	cmp	r3, #4
 8002154:	d13a      	bne.n	80021cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d109      	bne.n	8002174 <I2S_IRQHandler+0x3a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d102      	bne.n	8002174 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffb4 	bl	80020dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d126      	bne.n	80021cc <I2S_IRQHandler+0x92>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d11f      	bne.n	80021cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800219a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f043 0202 	orr.w	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff50 	bl	800206c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d136      	bne.n	8002246 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d109      	bne.n	80021f6 <I2S_IRQHandler+0xbc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d102      	bne.n	80021f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff45 	bl	8002080 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d122      	bne.n	8002246 <I2S_IRQHandler+0x10c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b20      	cmp	r3, #32
 800220c:	d11b      	bne.n	8002246 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800221c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff13 	bl	800206c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4aa2      	ldr	r2, [pc, #648]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800226a:	4ba2      	ldr	r3, [pc, #648]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800226c:	e001      	b.n	8002272 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800226e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a9b      	ldr	r2, [pc, #620]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002288:	4b9a      	ldr	r3, [pc, #616]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800228a:	e001      	b.n	8002290 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800228c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229c:	d004      	beq.n	80022a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8099 	bne.w	80023da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f925 	bl	800250c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f9c8 	bl	800266c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d13a      	bne.n	800235c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d035      	beq.n	800235c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80022fa:	4b7e      	ldr	r3, [pc, #504]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022fc:	e001      	b.n	8002302 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80022fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4979      	ldr	r1, [pc, #484]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800230a:	428b      	cmp	r3, r1
 800230c:	d101      	bne.n	8002312 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800230e:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002310:	e001      	b.n	8002316 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800231a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800232a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fe88 	bl	800206c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	f040 80be 	bne.w	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80b8 	beq.w	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002382:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a59      	ldr	r2, [pc, #356]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800238e:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002390:	e001      	b.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4954      	ldr	r1, [pc, #336]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800239e:	428b      	cmp	r3, r1
 80023a0:	d101      	bne.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80023a2:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023a4:	e001      	b.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80023a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f043 0204 	orr.w	r2, r3, #4
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fe4a 	bl	800206c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023d8:	e084      	b.n	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8be 	bl	8002570 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8fd 	bl	8002608 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d12f      	bne.n	8002478 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d02a      	beq.n	8002478 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002430:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800243e:	e001      	b.n	8002444 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4929      	ldr	r1, [pc, #164]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d101      	bne.n	8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002452:	e001      	b.n	8002458 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002458:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800245c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fdfa 	bl	800206c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d131      	bne.n	80024e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02c      	beq.n	80024e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002498:	e001      	b.n	800249e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800249a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024a6:	428b      	cmp	r3, r1
 80024a8:	d101      	bne.n	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024ac:	e001      	b.n	80024b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80024ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fdc5 	bl	800206c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024e2:	e000      	b.n	80024e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024e4:	bf00      	nop
}
 80024e6:	bf00      	nop
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40003800 	.word	0x40003800
 80024f4:	40003400 	.word	0x40003400

080024f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c99      	adds	r1, r3, #2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6251      	str	r1, [r2, #36]	; 0x24
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d113      	bne.n	8002566 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800254c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffc9 	bl	80024f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c99      	adds	r1, r3, #2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6251      	str	r1, [r2, #36]	; 0x24
 8002582:	8819      	ldrh	r1, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <I2SEx_TxISR_I2SExt+0x90>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <I2SEx_TxISR_I2SExt+0x22>
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <I2SEx_TxISR_I2SExt+0x94>)
 8002590:	e001      	b.n	8002596 <I2SEx_TxISR_I2SExt+0x26>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002596:	460a      	mov	r2, r1
 8002598:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d121      	bne.n	80025f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <I2SEx_TxISR_I2SExt+0x90>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <I2SEx_TxISR_I2SExt+0x50>
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <I2SEx_TxISR_I2SExt+0x94>)
 80025be:	e001      	b.n	80025c4 <I2SEx_TxISR_I2SExt+0x54>
 80025c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	490d      	ldr	r1, [pc, #52]	; (8002600 <I2SEx_TxISR_I2SExt+0x90>)
 80025cc:	428b      	cmp	r3, r1
 80025ce:	d101      	bne.n	80025d4 <I2SEx_TxISR_I2SExt+0x64>
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <I2SEx_TxISR_I2SExt+0x94>)
 80025d2:	e001      	b.n	80025d8 <I2SEx_TxISR_I2SExt+0x68>
 80025d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff81 	bl	80024f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40003800 	.word	0x40003800
 8002604:	40003400 	.word	0x40003400

08002608 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68d8      	ldr	r0, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	1c99      	adds	r1, r3, #2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002620:	b282      	uxth	r2, r0
 8002622:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d113      	bne.n	8002664 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800264a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff4a 	bl	80024f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a20      	ldr	r2, [pc, #128]	; (80026fc <I2SEx_RxISR_I2SExt+0x90>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <I2SEx_RxISR_I2SExt+0x16>
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <I2SEx_RxISR_I2SExt+0x94>)
 8002680:	e001      	b.n	8002686 <I2SEx_RxISR_I2SExt+0x1a>
 8002682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002686:	68d8      	ldr	r0, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	1c99      	adds	r1, r3, #2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002692:	b282      	uxth	r2, r0
 8002694:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d121      	bne.n	80026f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <I2SEx_RxISR_I2SExt+0x90>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <I2SEx_RxISR_I2SExt+0x50>
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <I2SEx_RxISR_I2SExt+0x94>)
 80026ba:	e001      	b.n	80026c0 <I2SEx_RxISR_I2SExt+0x54>
 80026bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <I2SEx_RxISR_I2SExt+0x90>)
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d101      	bne.n	80026d0 <I2SEx_RxISR_I2SExt+0x64>
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <I2SEx_RxISR_I2SExt+0x94>)
 80026ce:	e001      	b.n	80026d4 <I2SEx_RxISR_I2SExt+0x68>
 80026d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff03 	bl	80024f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40003800 	.word	0x40003800
 8002700:	40003400 	.word	0x40003400

08002704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b08f      	sub	sp, #60	; 0x3c
 8002708:	af0a      	add	r7, sp, #40	; 0x28
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e10f      	b.n	8002936 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f008 fad7 	bl	800ace4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fade 	bl	8004d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	687e      	ldr	r6, [r7, #4]
 8002762:	466d      	mov	r5, sp
 8002764:	f106 0410 	add.w	r4, r6, #16
 8002768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002774:	e885 0003 	stmia.w	r5, {r0, r1}
 8002778:	1d33      	adds	r3, r6, #4
 800277a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f002 f9b5 	bl	8004aec <USB_CoreInit>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d0      	b.n	8002936 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f002 facc 	bl	8004d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e04a      	b.n	800283c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	333d      	adds	r3, #61	; 0x3d
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	333c      	adds	r3, #60	; 0x3c
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	b298      	uxth	r0, r3
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3342      	adds	r3, #66	; 0x42
 80027e2:	4602      	mov	r2, r0
 80027e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	333f      	adds	r3, #63	; 0x3f
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3344      	adds	r3, #68	; 0x44
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3348      	adds	r3, #72	; 0x48
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3350      	adds	r3, #80	; 0x50
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3301      	adds	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3af      	bcc.n	80027a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e044      	b.n	80028d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	3301      	adds	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3b5      	bcc.n	800284c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	687e      	ldr	r6, [r7, #4]
 80028e8:	466d      	mov	r5, sp
 80028ea:	f106 0410 	add.w	r4, r6, #16
 80028ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fe:	1d33      	adds	r3, r6, #4
 8002900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	f002 fa42 	bl	8004d8c <USB_DevInit>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00d      	b.n	8002936 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fa8a 	bl	8005e48 <USB_DevDisconnect>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800293e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_PCD_Start+0x1c>
 8002956:	2302      	movs	r3, #2
 8002958:	e020      	b.n	800299c <HAL_PCD_Start+0x5e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	2b01      	cmp	r3, #1
 8002968:	d109      	bne.n	800297e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800296e:	2b01      	cmp	r3, #1
 8002970:	d005      	beq.n	800297e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f002 f9b6 	bl	8004cf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fa3a 	bl	8005e06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b08d      	sub	sp, #52	; 0x34
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 faf8 	bl	8005fb0 <USB_GetMode>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 839d 	bne.w	8003102 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fa5c 	bl	8005e8a <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8393 	beq.w	8003100 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fa53 	bl	8005e8a <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d107      	bne.n	80029fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f002 0202 	and.w	r2, r2, #2
 80029fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fa41 	bl	8005e8a <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d161      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0210 	bic.w	r2, r2, #16
 8002a20:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3304      	adds	r3, #4
 8002a40:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	0c5b      	lsrs	r3, r3, #17
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d124      	bne.n	8002a98 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d035      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6a38      	ldr	r0, [r7, #32]
 8002a6e:	f003 f8a7 	bl	8005bc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7e:	441a      	add	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a90:	441a      	add	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	619a      	str	r2, [r3, #24]
 8002a96:	e016      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	0c5b      	lsrs	r3, r3, #17
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d110      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aaa:	2208      	movs	r2, #8
 8002aac:	4619      	mov	r1, r3
 8002aae:	6a38      	ldr	r0, [r7, #32]
 8002ab0:	f003 f886 	bl	8005bc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac0:	441a      	add	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0210 	orr.w	r2, r2, #16
 8002ad4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f9d5 	bl	8005e8a <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aea:	d16e      	bne.n	8002bca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f9db 	bl	8005eb0 <USB_ReadDevAllOutEpInterrupt>
 8002afa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002afc:	e062      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d057      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fa00 	bl	8005f18 <USB_ReadDevOutEPInterrupt>
 8002b18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	2301      	movs	r3, #1
 8002b34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fdb1 	bl	80036a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b54:	461a      	mov	r2, r3
 8002b56:	2308      	movs	r3, #8
 8002b58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 feab 	bl	80038b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b94:	461a      	mov	r2, r3
 8002b96:	2320      	movs	r3, #32
 8002b98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	3301      	adds	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d199      	bne.n	8002afe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f95b 	bl	8005e8a <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bde:	f040 80c0 	bne.w	8002d62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 f97c 	bl	8005ee4 <USB_ReadDevAllInEpInterrupt>
 8002bec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bf2:	e0b2      	b.n	8002d5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80a7 	beq.w	8002d4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f9a2 	bl	8005f54 <USB_ReadDevInEPInterrupt>
 8002c10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d057      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	2201      	movs	r2, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69f9      	ldr	r1, [r7, #28]
 8002c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2301      	movs	r3, #1
 8002c50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d132      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3348      	adds	r3, #72	; 0x48
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	3344      	adds	r3, #68	; 0x44
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4419      	add	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4403      	add	r3, r0
 8002c8e:	3348      	adds	r3, #72	; 0x48
 8002c90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d113      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x31c>
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3350      	adds	r3, #80	; 0x50
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2101      	movs	r1, #1
 8002cbc:	f003 f9aa 	bl	8006014 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f008 f89b 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2310      	movs	r3, #16
 8002d02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2340      	movs	r3, #64	; 0x40
 8002d1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d36:	461a      	mov	r2, r3
 8002d38:	2302      	movs	r3, #2
 8002d3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fc1b 	bl	8003584 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	3301      	adds	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f af49 	bne.w	8002bf4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 f88f 	bl	8005e8a <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d76:	d122      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe27 	bl	80039f4 <HAL_PCDEx_LPM_Callback>
 8002da6:	e002      	b.n	8002dae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f008 f897 	bl	800aedc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 f861 	bl	8005e8a <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd2:	d112      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f008 f853 	bl	800ae90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002df8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 f843 	bl	8005e8a <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	f040 80c7 	bne.w	8002fa0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2110      	movs	r1, #16
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 f911 	bl	8005054 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	e056      	b.n	8002ee6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e44:	461a      	mov	r2, r3
 8002e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5c:	0151      	lsls	r1, r2, #5
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	440a      	add	r2, r1
 8002e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7c:	0151      	lsls	r1, r2, #5
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	440a      	add	r2, r1
 8002e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb0:	0151      	lsls	r1, r2, #5
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	440a      	add	r2, r1
 8002eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ebe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed0:	0151      	lsls	r1, r2, #5
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ede:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3a3      	bcc.n	8002e38 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1c:	f043 030b 	orr.w	r3, r3, #11
 8002f20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f32:	f043 030b 	orr.w	r3, r3, #11
 8002f36:	6453      	str	r3, [r2, #68]	; 0x44
 8002f38:	e015      	b.n	8002f66 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f60:	f043 030b 	orr.w	r3, r3, #11
 8002f64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f003 f842 	bl	8006014 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 ff70 	bl	8005e8a <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb4:	d124      	bne.n	8003000 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f806 	bl	8005fcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 f8a6 	bl	8005116 <USB_GetDevSpeed>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681c      	ldr	r4, [r3, #0]
 8002fd6:	f001 f951 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002fda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f001 fde3 	bl	8004bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f007 ff31 	bl	800ae52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f002 ff40 	bl	8005e8a <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d10a      	bne.n	800302a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f007 ff0e 	bl	800ae36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 0208 	and.w	r2, r2, #8
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f002 ff2b 	bl	8005e8a <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303e:	d10f      	bne.n	8003060 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f007 ff66 	bl	800af1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800305e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f002 ff10 	bl	8005e8a <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003074:	d10f      	bne.n	8003096 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f007 ff39 	bl	800aef8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fef5 	bl	8005e8a <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d10a      	bne.n	80030c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f007 ff47 	bl	800af40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f002 fedf 	bl	8005e8a <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d115      	bne.n	8003102 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f007 ff37 	bl	800af5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e000      	b.n	8003102 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003100:	bf00      	nop
    }
  }
}
 8003102:	3734      	adds	r7, #52	; 0x34
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_PCD_SetAddress+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e013      	b.n	800314a <HAL_PCD_SetAddress+0x42>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f002 fe3d 	bl	8005dba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	4608      	mov	r0, r1
 800315c:	4611      	mov	r1, r2
 800315e:	461a      	mov	r2, r3
 8003160:	4603      	mov	r3, r0
 8003162:	70fb      	strb	r3, [r7, #3]
 8003164:	460b      	mov	r3, r1
 8003166:	803b      	strh	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da0f      	bge.n	8003198 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	705a      	strb	r2, [r3, #1]
 8003196:	e00f      	b.n	80031b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031c4:	883a      	ldrh	r2, [r7, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	78ba      	ldrb	r2, [r7, #2]
 80031ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031e2:	78bb      	ldrb	r3, [r7, #2]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d102      	bne.n	80031ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_EP_Open+0xaa>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e00e      	b.n	800321a <HAL_PCD_EP_Open+0xc8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	4618      	mov	r0, r3
 800320c:	f001 ffa8 	bl	8005160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003218:	7afb      	ldrb	r3, [r7, #11]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800322e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da0f      	bge.n	8003256 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3338      	adds	r3, #56	; 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	705a      	strb	r2, [r3, #1]
 8003254:	e00f      	b.n	8003276 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PCD_EP_Close+0x6e>
 800328c:	2302      	movs	r3, #2
 800328e:	e00e      	b.n	80032ae <HAL_PCD_EP_Close+0x8c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 ffe6 	bl	8005270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	460b      	mov	r3, r1
 80032c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	f002 fac1 	bl	80058b0 <USB_EP0StartXfer>
 800332e:	e008      	b.n	8003342 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	f002 f873 	bl	8005428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 020f 	and.w	r2, r3, #15
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	460b      	mov	r3, r1
 800338a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	f003 020f 	and.w	r2, r3, #15
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3338      	adds	r3, #56	; 0x38
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	3304      	adds	r3, #4
 80033a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2201      	movs	r2, #1
 80033ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	f002 fa5f 	bl	80058b0 <USB_EP0StartXfer>
 80033f2:	e008      	b.n	8003406 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	6979      	ldr	r1, [r7, #20]
 8003402:	f002 f811 	bl	8005428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d901      	bls.n	800342e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e050      	b.n	80034d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800342e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	da0f      	bge.n	8003456 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3338      	adds	r3, #56	; 0x38
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	705a      	strb	r2, [r3, #1]
 8003454:	e00d      	b.n	8003472 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_PCD_EP_SetStall+0x82>
 800348e:	2302      	movs	r3, #2
 8003490:	e01e      	b.n	80034d0 <HAL_PCD_EP_SetStall+0xc0>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f002 fbb6 	bl	8005c12 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	b2d9      	uxtb	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034c0:	461a      	mov	r2, r3
 80034c2:	f002 fda7 	bl	8006014 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d901      	bls.n	80034f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e042      	b.n	800357c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da0f      	bge.n	800351e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	3338      	adds	r3, #56	; 0x38
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	3304      	adds	r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	705a      	strb	r2, [r3, #1]
 800351c:	e00f      	b.n	800353e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_EP_ClrStall+0x86>
 800355a:	2302      	movs	r3, #2
 800355c:	e00e      	b.n	800357c <HAL_PCD_EP_ClrStall+0xa4>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f002 fbbe 	bl	8005cee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	3338      	adds	r3, #56	; 0x38
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d901      	bls.n	80035bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e06c      	b.n	8003696 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d902      	bls.n	80035d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3303      	adds	r3, #3
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e0:	e02b      	b.n	800363a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d902      	bls.n	80035fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3303      	adds	r3, #3
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003616:	b2db      	uxtb	r3, r3
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	4603      	mov	r3, r0
 800361c:	6978      	ldr	r0, [r7, #20]
 800361e:	f002 fa9a 	bl	8005b56 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	b29b      	uxth	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	d809      	bhi.n	8003664 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003658:	429a      	cmp	r2, r3
 800365a:	d203      	bcs.n	8003664 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1be      	bne.n	80035e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	429a      	cmp	r2, r3
 800366e:	d811      	bhi.n	8003694 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	2201      	movs	r2, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	43db      	mvns	r3, r3
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003690:	4013      	ands	r3, r2
 8003692:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	333c      	adds	r3, #60	; 0x3c
 80036b8:	3304      	adds	r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80a0 	bne.w	8003818 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a72      	ldr	r2, [pc, #456]	; (80038b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	f240 80dd 	bls.w	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80d7 	beq.w	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	e0cb      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	2320      	movs	r3, #32
 8003728:	6093      	str	r3, [r2, #8]
 800372a:	e0bc      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80b7 	bne.w	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a5d      	ldr	r2, [pc, #372]	; (80038b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d90f      	bls.n	8003760 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003756:	461a      	mov	r2, r3
 8003758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375c:	6093      	str	r3, [r2, #8]
 800375e:	e0a2      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003772:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	440b      	add	r3, r1
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003786:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4403      	add	r3, r0
 8003796:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800379a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4403      	add	r3, r0
 80037be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4419      	add	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4403      	add	r3, r0
 80037d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d114      	bne.n	800380a <PCD_EP_OutXfrComplete_int+0x16a>
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003802:	461a      	mov	r2, r3
 8003804:	2101      	movs	r1, #1
 8003806:	f002 fc05 	bl	8006014 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f007 fadb 	bl	800adcc <HAL_PCD_DataOutStageCallback>
 8003816:	e046      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d124      	bne.n	800386a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383c:	6093      	str	r3, [r2, #8]
 800383e:	e032      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2320      	movs	r3, #32
 800385a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f007 fab2 	bl	800adcc <HAL_PCD_DataOutStageCallback>
 8003868:	e01d      	b.n	80038a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d114      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d108      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003892:	461a      	mov	r2, r3
 8003894:	2100      	movs	r1, #0
 8003896:	f002 fbbd 	bl	8006014 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 fa93 	bl	800adcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	4f54300a 	.word	0x4f54300a
 80038b4:	4f54310a 	.word	0x4f54310a

080038b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	333c      	adds	r3, #60	; 0x3c
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90e      	bls.n	800390c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f007 fa4b 	bl	800ada8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <PCD_EP_OutSetupPacket_int+0x88>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d90c      	bls.n	8003934 <PCD_EP_OutSetupPacket_int+0x7c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d108      	bne.n	8003934 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800392c:	461a      	mov	r2, r3
 800392e:	2101      	movs	r1, #1
 8003930:	f002 fb70 	bl	8006014 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	4f54300a 	.word	0x4f54300a

08003944 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
 8003950:	4613      	mov	r3, r2
 8003952:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003962:	883b      	ldrh	r3, [r7, #0]
 8003964:	0419      	lsls	r1, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	430a      	orrs	r2, r1
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
 8003970:	e028      	b.n	80039c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e00d      	b.n	80039a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	3340      	adds	r3, #64	; 0x40
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	3301      	adds	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3ec      	bcc.n	8003986 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039ac:	883b      	ldrh	r3, [r7, #0]
 80039ae:	0418      	lsls	r0, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4302      	orrs	r2, r0
 80039bc:	3340      	adds	r3, #64	; 0x40
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e25b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d075      	beq.n	8003b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	4ba3      	ldr	r3, [pc, #652]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4ba0      	ldr	r3, [pc, #640]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d112      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b9d      	ldr	r3, [pc, #628]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	4b99      	ldr	r3, [pc, #612]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d05b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e236      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x74>
 8003a72:	4b91      	ldr	r3, [pc, #580]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a90      	ldr	r2, [pc, #576]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a8a      	ldr	r2, [pc, #552]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a87      	ldr	r2, [pc, #540]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003aa4:	4b84      	ldr	r3, [pc, #528]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a83      	ldr	r2, [pc, #524]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a80      	ldr	r2, [pc, #512]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fd8a 	bl	80015dc <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fd86 	bl	80015dc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1fb      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xc0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fd76 	bl	80015dc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd fd72 	bl	80015dc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1e7      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xe8>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1bb      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4952      	ldr	r1, [pc, #328]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e03a      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCC_OscConfig+0x2b0>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd fd2b 	bl	80015dc <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fd27 	bl	80015dc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e19c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4940      	ldr	r1, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_OscConfig+0x2b0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fd0a 	bl	80015dc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fd06 	bl	80015dc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e17b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d030      	beq.n	8003c58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCC_OscConfig+0x2b4>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fcea 	bl	80015dc <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fce6 	bl	80015dc <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e15b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x200>
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x2b4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fcd3 	bl	80015dc <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fd fccf 	bl	80015dc <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e144      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a0 	beq.w	8003da6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d121      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cae:	f7fd fc95 	bl	80015dc <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	e011      	b.n	8003cda <HAL_RCC_OscConfig+0x2ce>
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470000 	.word	0x42470000
 8003cc0:	42470e80 	.word	0x42470e80
 8003cc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd fc88 	bl	80015dc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0fd      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCC_OscConfig+0x4d4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfa:	e01c      	b.n	8003d36 <HAL_RCC_OscConfig+0x32a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCC_OscConfig+0x312>
 8003d04:	4b77      	ldr	r3, [pc, #476]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a76      	ldr	r2, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	4b74      	ldr	r3, [pc, #464]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	e00b      	b.n	8003d36 <HAL_RCC_OscConfig+0x32a>
 8003d1e:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a70      	ldr	r2, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d015      	beq.n	8003d6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fd fc4d 	bl	80015dc <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fc49 	bl	80015dc <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0bc      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ee      	beq.n	8003d46 <HAL_RCC_OscConfig+0x33a>
 8003d68:	e014      	b.n	8003d94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fc37 	bl	80015dc <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fd fc33 	bl	80015dc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0a6      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ee      	bne.n	8003d72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8092 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d05c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d141      	bne.n	8003e48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd fc07 	bl	80015dc <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd fc03 	bl	80015dc <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e078      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	019b      	lsls	r3, r3, #6
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	4933      	ldr	r1, [pc, #204]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fbdc 	bl	80015dc <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd fbd8 	bl	80015dc <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e04d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x41c>
 8003e46:	e045      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_RCC_OscConfig+0x4dc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fbc5 	bl	80015dc <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd fbc1 	bl	80015dc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e036      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x44a>
 8003e74:	e02e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e029      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470060 	.word	0x42470060

08003eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0cc      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90c      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0b8      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	494d      	ldr	r1, [pc, #308]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d044      	beq.n	800400c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e07f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e06f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e067      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4934      	ldr	r1, [pc, #208]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fafe 	bl	80015dc <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fd fafa 	bl	80015dc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d20c      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e032      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4916      	ldr	r1, [pc, #88]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	490e      	ldr	r1, [pc, #56]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004072:	f000 f821 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004076:	4602      	mov	r2, r0
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	490a      	ldr	r1, [pc, #40]	; (80040ac <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd f922 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	0800c880 	.word	0x0800c880
 80040b0:	20000004 	.word	0x20000004
 80040b4:	20000008 	.word	0x20000008

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	2300      	movs	r3, #0
 80040ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d0:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d00d      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x40>
 80040dc:	2b08      	cmp	r3, #8
 80040de:	f200 80bd 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x1a4>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ea:	e0b7      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040ee:	60bb      	str	r3, [r7, #8]
       break;
 80040f0:	e0b7      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f2:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040f4:	60bb      	str	r3, [r7, #8]
      break;
 80040f6:	e0b4      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f8:	4b5d      	ldr	r3, [pc, #372]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004100:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004102:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04d      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	461a      	mov	r2, r3
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	ea02 0800 	and.w	r8, r2, r0
 8004126:	ea03 0901 	and.w	r9, r3, r1
 800412a:	4640      	mov	r0, r8
 800412c:	4649      	mov	r1, r9
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	014b      	lsls	r3, r1, #5
 8004138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800413c:	0142      	lsls	r2, r0, #5
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	ebb0 0008 	subs.w	r0, r0, r8
 8004146:	eb61 0109 	sbc.w	r1, r1, r9
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	018b      	lsls	r3, r1, #6
 8004154:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004158:	0182      	lsls	r2, r0, #6
 800415a:	1a12      	subs	r2, r2, r0
 800415c:	eb63 0301 	sbc.w	r3, r3, r1
 8004160:	f04f 0000 	mov.w	r0, #0
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	00d9      	lsls	r1, r3, #3
 800416a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800416e:	00d0      	lsls	r0, r2, #3
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	eb12 0208 	adds.w	r2, r2, r8
 8004178:	eb43 0309 	adc.w	r3, r3, r9
 800417c:	f04f 0000 	mov.w	r0, #0
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	0259      	lsls	r1, r3, #9
 8004186:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800418a:	0250      	lsls	r0, r2, #9
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	f7fc f878 	bl	8000290 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e04a      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b31      	ldr	r3, [pc, #196]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	461a      	mov	r2, r3
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	ea02 0400 	and.w	r4, r2, r0
 80041c2:	ea03 0501 	and.w	r5, r3, r1
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	014b      	lsls	r3, r1, #5
 80041d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d8:	0142      	lsls	r2, r0, #5
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	1b00      	subs	r0, r0, r4
 80041e0:	eb61 0105 	sbc.w	r1, r1, r5
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	018b      	lsls	r3, r1, #6
 80041ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f2:	0182      	lsls	r2, r0, #6
 80041f4:	1a12      	subs	r2, r2, r0
 80041f6:	eb63 0301 	sbc.w	r3, r3, r1
 80041fa:	f04f 0000 	mov.w	r0, #0
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	00d9      	lsls	r1, r3, #3
 8004204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004208:	00d0      	lsls	r0, r2, #3
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1912      	adds	r2, r2, r4
 8004210:	eb45 0303 	adc.w	r3, r5, r3
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	0299      	lsls	r1, r3, #10
 800421e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004222:	0290      	lsls	r0, r2, #10
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f7fc f82c 	bl	8000290 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	60bb      	str	r3, [r7, #8]
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800425e:	60bb      	str	r3, [r7, #8]
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	68bb      	ldr	r3, [r7, #8]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800c890 	.word	0x0800c890

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c0:	f7ff ffdc 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800c890 	.word	0x0800c890

080042e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	220f      	movs	r2, #15
 80042f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0203 	and.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCC_GetClockConfig+0x5c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCC_GetClockConfig+0x5c>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_RCC_GetClockConfig+0x60>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 020f 	and.w	r2, r3, #15
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	40023c00 	.word	0x40023c00

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d038      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004370:	4b68      	ldr	r3, [pc, #416]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7fd f931 	bl	80015dc <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437e:	f7fd f92d 	bl	80015dc <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0bd      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004390:	4b61      	ldr	r3, [pc, #388]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	495a      	ldr	r1, [pc, #360]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b6:	4b57      	ldr	r3, [pc, #348]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043bc:	f7fd f90e 	bl	80015dc <HAL_GetTick>
 80043c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c4:	f7fd f90a 	bl	80015dc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e09a      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d6:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8083 	beq.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	4b48      	ldr	r3, [pc, #288]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a47      	ldr	r2, [pc, #284]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004400:	4b45      	ldr	r3, [pc, #276]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004416:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004418:	f7fd f8e0 	bl	80015dc <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004420:	f7fd f8dc 	bl	80015dc <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e06c      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02f      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x166>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d028      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800445c:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004464:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004466:	4b2e      	ldr	r3, [pc, #184]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004472:	4a29      	ldr	r2, [pc, #164]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d114      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd f8aa 	bl	80015dc <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fd f8a6 	bl	80015dc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e034      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	4911      	ldr	r1, [pc, #68]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	e005      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	4909      	ldr	r1, [pc, #36]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	7d1a      	ldrb	r2, [r3, #20]
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004508:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	42470068 	.word	0x42470068
 8004518:	40023800 	.word	0x40023800
 800451c:	40007000 	.word	0x40007000
 8004520:	42470e40 	.word	0x42470e40
 8004524:	424711e0 	.word	0x424711e0

08004528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d140      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d131      	bne.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800455e:	617b      	str	r3, [r7, #20]
          break;
 8004560:	e031      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456e:	d109      	bne.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457a:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e008      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	0f1b      	lsrs	r3, r3, #28
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
          break;
 80045be:	e002      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
          break;
 80045c4:	bf00      	nop
        }
      }
      break;
 80045c6:	bf00      	nop
    }
  }
  return frequency;
 80045c8:	697b      	ldr	r3, [r7, #20]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00bb8000 	.word	0x00bb8000
 80045e0:	007a1200 	.word	0x007a1200
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e056      	b.n	80046a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc fe19 	bl	800124c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	ea42 0103 	orr.w	r1, r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f003 0104 	and.w	r1, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004696:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01d      	b.n	80046fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f815 	bl	8004706 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 f968 	bl	80049c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b06      	cmp	r3, #6
 8004742:	d007      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d122      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d11b      	bne.n	80047be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0202 	mvn.w	r2, #2
 800478e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f8ee 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80047aa:	e005      	b.n	80047b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f8e0 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8f1 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d122      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d11b      	bne.n	8004812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f06f 0204 	mvn.w	r2, #4
 80047e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8c4 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80047fe:	e005      	b.n	800480c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8b6 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8c7 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d122      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11b      	bne.n	8004866 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0208 	mvn.w	r2, #8
 8004836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2204      	movs	r2, #4
 800483c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f89a 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 8004852:	e005      	b.n	8004860 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f88c 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f89d 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d122      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d11b      	bne.n	80048ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0210 	mvn.w	r2, #16
 800488a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2208      	movs	r2, #8
 8004890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f870 	bl	8004986 <HAL_TIM_IC_CaptureCallback>
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f862 	bl	8004972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f873 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10e      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0201 	mvn.w	r2, #1
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc fb59 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d10e      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8e3 	bl	8004ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d10e      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d107      	bne.n	800493e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f838 	bl	80049ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b20      	cmp	r3, #32
 800494a:	d10e      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b20      	cmp	r3, #32
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0220 	mvn.w	r2, #32
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8ad 	bl	8004ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a31      	ldr	r2, [pc, #196]	; (8004aac <TIM_Base_SetConfig+0xe8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <TIM_Base_SetConfig+0xec>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <TIM_Base_SetConfig+0xe8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <TIM_Base_SetConfig+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <TIM_Base_SetConfig+0xf0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <TIM_Base_SetConfig+0xf4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <TIM_Base_SetConfig+0xf8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <TIM_Base_SetConfig+0xfc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <TIM_Base_SetConfig+0xe4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d103      	bne.n	8004a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	615a      	str	r2, [r3, #20]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aec:	b084      	sub	sp, #16
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	f107 001c 	add.w	r0, r7, #28
 8004afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d122      	bne.n	8004b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 fac6 	bl	80060d0 <USB_CoreReset>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e01a      	b.n	8004b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 faba 	bl	80060d0 <USB_CoreReset>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
 8004b72:	e005      	b.n	8004b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f043 0206 	orr.w	r2, r3, #6
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004baa:	b004      	add	sp, #16
 8004bac:	4770      	bx	lr
	...

08004bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d165      	bne.n	8004c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <USB_SetTurnaroundTime+0x11c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d906      	bls.n	8004bda <USB_SetTurnaroundTime+0x2a>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a40      	ldr	r2, [pc, #256]	; (8004cd0 <USB_SetTurnaroundTime+0x120>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d202      	bcs.n	8004bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e062      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <USB_SetTurnaroundTime+0x120>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d306      	bcc.n	8004bf0 <USB_SetTurnaroundTime+0x40>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <USB_SetTurnaroundTime+0x124>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d202      	bcs.n	8004bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bea:	230e      	movs	r3, #14
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e057      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <USB_SetTurnaroundTime+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d306      	bcc.n	8004c06 <USB_SetTurnaroundTime+0x56>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <USB_SetTurnaroundTime+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d202      	bcs.n	8004c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c00:	230d      	movs	r3, #13
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e04c      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <USB_SetTurnaroundTime+0x128>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d306      	bcc.n	8004c1c <USB_SetTurnaroundTime+0x6c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4a32      	ldr	r2, [pc, #200]	; (8004cdc <USB_SetTurnaroundTime+0x12c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d802      	bhi.n	8004c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c16:	230c      	movs	r3, #12
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e041      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <USB_SetTurnaroundTime+0x12c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d906      	bls.n	8004c32 <USB_SetTurnaroundTime+0x82>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <USB_SetTurnaroundTime+0x130>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d802      	bhi.n	8004c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c2c:	230b      	movs	r3, #11
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e036      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <USB_SetTurnaroundTime+0x130>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d906      	bls.n	8004c48 <USB_SetTurnaroundTime+0x98>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <USB_SetTurnaroundTime+0x134>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d802      	bhi.n	8004c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c42:	230a      	movs	r3, #10
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e02b      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <USB_SetTurnaroundTime+0x134>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d906      	bls.n	8004c5e <USB_SetTurnaroundTime+0xae>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <USB_SetTurnaroundTime+0x138>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d202      	bcs.n	8004c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c58:	2309      	movs	r3, #9
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e020      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <USB_SetTurnaroundTime+0x138>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d306      	bcc.n	8004c74 <USB_SetTurnaroundTime+0xc4>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <USB_SetTurnaroundTime+0x13c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d802      	bhi.n	8004c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c6e:	2308      	movs	r3, #8
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e015      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <USB_SetTurnaroundTime+0x13c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d906      	bls.n	8004c8a <USB_SetTurnaroundTime+0xda>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <USB_SetTurnaroundTime+0x140>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d202      	bcs.n	8004c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c84:	2307      	movs	r3, #7
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e00a      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c8a:	2306      	movs	r3, #6
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e007      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c96:	2309      	movs	r3, #9
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e001      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c9c:	2309      	movs	r3, #9
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	00d8acbf 	.word	0x00d8acbf
 8004cd0:	00e4e1c0 	.word	0x00e4e1c0
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	01067380 	.word	0x01067380
 8004cdc:	011a499f 	.word	0x011a499f
 8004ce0:	01312cff 	.word	0x01312cff
 8004ce4:	014ca43f 	.word	0x014ca43f
 8004ce8:	016e3600 	.word	0x016e3600
 8004cec:	01a6ab1f 	.word	0x01a6ab1f
 8004cf0:	01e84800 	.word	0x01e84800

08004cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e00b      	b.n	8004d7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e001      	b.n	8004d7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e003      	b.n	8004d84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d7c:	2032      	movs	r0, #50	; 0x32
 8004d7e:	f7fc fc39 	bl	80015f4 <HAL_Delay>

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e009      	b.n	8004dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3340      	adds	r3, #64	; 0x40
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b0e      	cmp	r3, #14
 8004dc4:	d9f2      	bls.n	8004dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11c      	bne.n	8004e06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
 8004e04:	e00b      	b.n	8004e1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e24:	461a      	mov	r2, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e30:	4619      	mov	r1, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e38:	461a      	mov	r2, r3
 8004e3a:	680b      	ldr	r3, [r1, #0]
 8004e3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10c      	bne.n	8004e5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f949 	bl	80050e4 <USB_SetDevSpeed>
 8004e52:	e008      	b.n	8004e66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e54:	2101      	movs	r1, #1
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f944 	bl	80050e4 <USB_SetDevSpeed>
 8004e5c:	e003      	b.n	8004e66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e5e:	2103      	movs	r1, #3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f93f 	bl	80050e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e66:	2110      	movs	r1, #16
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8f3 	bl	8005054 <USB_FlushTxFifo>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f911 	bl	80050a0 <USB_FlushRxFifo>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e043      	b.n	8004f3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec8:	d118      	bne.n	8004efc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e013      	b.n	8004f0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e008      	b.n	8004f0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3301      	adds	r3, #1
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3b7      	bcc.n	8004eb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e043      	b.n	8004fd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5e:	d118      	bne.n	8004f92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e013      	b.n	8004fa4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e008      	b.n	8004fa4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d3b7      	bcc.n	8004f48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f043 0210 	orr.w	r2, r3, #16
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <USB_DevInit+0x2c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504c:	b004      	add	sp, #16
 800504e:	4770      	bx	lr
 8005050:	803c3800 	.word	0x803c3800

08005054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	f043 0220 	orr.w	r2, r3, #32
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <USB_FlushTxFifo+0x48>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e006      	b.n	800508e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d0f0      	beq.n	800506e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	00030d40 	.word	0x00030d40

080050a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2210      	movs	r2, #16
 80050b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <USB_FlushRxFifo+0x40>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e006      	b.n	80050d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d0f0      	beq.n	80050b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	00030d40 	.word	0x00030d40

080050e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
 800513a:	e00a      	b.n	8005152 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d002      	beq.n	8005148 <USB_GetDevSpeed+0x32>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d102      	bne.n	800514e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005148:	2302      	movs	r3, #2
 800514a:	75fb      	strb	r3, [r7, #23]
 800514c:	e001      	b.n	8005152 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800514e:	230f      	movs	r3, #15
 8005150:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
}
 8005154:	4618      	mov	r0, r3
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d13a      	bne.n	80051f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	2101      	movs	r1, #1
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800519a:	4313      	orrs	r3, r2
 800519c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d155      	bne.n	8005260 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	78db      	ldrb	r3, [r3, #3]
 80051ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	059b      	lsls	r3, r3, #22
 80051d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051d8:	4313      	orrs	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	e036      	b.n	8005260 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	2101      	movs	r1, #1
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005210:	4313      	orrs	r3, r2
 8005212:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11a      	bne.n	8005260 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005246:	430b      	orrs	r3, r1
 8005248:	4313      	orrs	r3, r2
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d161      	bne.n	8005350 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a2:	d11f      	bne.n	80052e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f303 	lsl.w	r3, r1, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4013      	ands	r3, r2
 8005306:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005328:	4013      	ands	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	0159      	lsls	r1, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	440b      	add	r3, r1
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	4619      	mov	r1, r3
 8005348:	4b35      	ldr	r3, [pc, #212]	; (8005420 <USB_DeactivateEndpoint+0x1b0>)
 800534a:	4013      	ands	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
 800534e:	e060      	b.n	8005412 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005366:	d11f      	bne.n	80053a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005386:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	2101      	movs	r1, #1
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	43db      	mvns	r3, r3
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c8:	4013      	ands	r3, r2
 80053ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	43db      	mvns	r3, r3
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4013      	ands	r3, r2
 80053ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0159      	lsls	r1, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	440b      	add	r3, r1
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	4619      	mov	r1, r3
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <USB_DeactivateEndpoint+0x1b4>)
 800540e:	4013      	ands	r3, r2
 8005410:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	ec337800 	.word	0xec337800
 8005424:	eff37800 	.word	0xeff37800

08005428 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 815c 	bne.w	8005702 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d132      	bne.n	80054b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b0:	0cdb      	lsrs	r3, r3, #19
 80054b2:	04db      	lsls	r3, r3, #19
 80054b4:	6113      	str	r3, [r2, #16]
 80054b6:	e074      	b.n	80055a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	0cdb      	lsrs	r3, r3, #19
 80054d4:	04db      	lsls	r3, r3, #19
 80054d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6959      	ldr	r1, [r3, #20]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	440b      	add	r3, r1
 8005514:	1e59      	subs	r1, r3, #1
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	fbb1 f3f3 	udiv	r3, r1, r3
 800551e:	04d9      	lsls	r1, r3, #19
 8005520:	4b9d      	ldr	r3, [pc, #628]	; (8005798 <USB_EPStartXfer+0x370>)
 8005522:	400b      	ands	r3, r1
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	0148      	lsls	r0, r1, #5
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	4401      	add	r1, r0
 800552c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005530:	4313      	orrs	r3, r2
 8005532:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554a:	69b9      	ldr	r1, [r7, #24]
 800554c:	0148      	lsls	r0, r1, #5
 800554e:	69f9      	ldr	r1, [r7, #28]
 8005550:	4401      	add	r1, r0
 8005552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d11f      	bne.n	80055a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005580:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d14b      	bne.n	8005640 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	78db      	ldrb	r3, [r3, #3]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d128      	bne.n	800561e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e00f      	b.n	800561e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005638:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e12f      	b.n	80058a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800565e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d015      	beq.n	8005694 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8117 	beq.w	80058a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800568e:	4313      	orrs	r3, r2
 8005690:	634b      	str	r3, [r1, #52]	; 0x34
 8005692:	e105      	b.n	80058a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d110      	bne.n	80056c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e00f      	b.n	80056e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	68d9      	ldr	r1, [r3, #12]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	b298      	uxth	r0, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4603      	mov	r3, r0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fa2b 	bl	8005b56 <USB_WritePacket>
 8005700:	e0ce      	b.n	80058a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	0cdb      	lsrs	r3, r3, #19
 800571e:	04db      	lsls	r3, r3, #19
 8005720:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005740:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005744:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d126      	bne.n	800579c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	0148      	lsls	r0, r1, #5
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	4401      	add	r1, r0
 800576c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005792:	6113      	str	r3, [r2, #16]
 8005794:	e036      	b.n	8005804 <USB_EPStartXfer+0x3dc>
 8005796:	bf00      	nop
 8005798:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4413      	add	r3, r2
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	8afb      	ldrh	r3, [r7, #22]
 80057c2:	04d9      	lsls	r1, r3, #19
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <USB_EPStartXfer+0x484>)
 80057c6:	400b      	ands	r3, r1
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	0148      	lsls	r0, r1, #5
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	4401      	add	r1, r0
 80057d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057d4:	4313      	orrs	r3, r2
 80057d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	8af9      	ldrh	r1, [r7, #22]
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	0148      	lsls	r0, r1, #5
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	4401      	add	r1, r0
 80057fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d10d      	bne.n	8005826 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	68d9      	ldr	r1, [r3, #12]
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	460a      	mov	r2, r1
 8005824:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d128      	bne.n	8005880 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d110      	bne.n	8005860 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e00f      	b.n	8005880 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800589e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	1ff80000 	.word	0x1ff80000

080058b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 80cd 	bne.w	8005a6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d132      	bne.n	8005940 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005938:	0cdb      	lsrs	r3, r3, #19
 800593a:	04db      	lsls	r3, r3, #19
 800593c:	6113      	str	r3, [r2, #16]
 800593e:	e04e      	b.n	80059de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595a:	0cdb      	lsrs	r3, r3, #19
 800595c:	04db      	lsls	r3, r3, #19
 800595e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800597e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005982:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	429a      	cmp	r2, r3
 800598e:	d903      	bls.n	8005998 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	0148      	lsls	r0, r1, #5
 80059d2:	6979      	ldr	r1, [r7, #20]
 80059d4:	4401      	add	r1, r0
 80059d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059da:	4313      	orrs	r3, r2
 80059dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d11e      	bne.n	8005a22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	461a      	mov	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e092      	b.n	8005b48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	0151      	lsls	r1, r2, #5
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	440a      	add	r2, r1
 8005a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d07e      	beq.n	8005b48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	6979      	ldr	r1, [r7, #20]
 8005a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a66:	4313      	orrs	r3, r2
 8005a68:	634b      	str	r3, [r1, #52]	; 0x34
 8005a6a:	e06d      	b.n	8005b48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a86:	0cdb      	lsrs	r3, r3, #19
 8005a88:	04db      	lsls	r3, r3, #19
 8005a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	0148      	lsls	r0, r1, #5
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	4401      	add	r1, r0
 8005afe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10d      	bne.n	8005b28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68d9      	ldr	r1, [r3, #12]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	460a      	mov	r2, r1
 8005b26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b089      	sub	sp, #36	; 0x24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	4611      	mov	r1, r2
 8005b62:	461a      	mov	r2, r3
 8005b64:	460b      	mov	r3, r1
 8005b66:	71fb      	strb	r3, [r7, #7]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11a      	bne.n	8005bb2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b7c:	88bb      	ldrh	r3, [r7, #4]
 8005b7e:	3303      	adds	r3, #3
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e00f      	b.n	8005baa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	031a      	lsls	r2, r3, #12
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b96:	461a      	mov	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d3eb      	bcc.n	8005b8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3724      	adds	r7, #36	; 0x24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	3303      	adds	r3, #3
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e00b      	b.n	8005bfc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d3ef      	bcc.n	8005be4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c04:	69fb      	ldr	r3, [r7, #28]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3724      	adds	r7, #36	; 0x24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12c      	bne.n	8005c88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	db12      	blt.n	8005c66 <USB_EPSetStall+0x54>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e02b      	b.n	8005ce0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	db12      	blt.n	8005cc0 <USB_EPSetStall+0xae>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00f      	beq.n	8005cc0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cbe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d128      	bne.n	8005d5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	78db      	ldrb	r3, [r3, #3]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d003      	beq.n	8005d3a <USB_EPClearStall+0x4c>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d138      	bne.n	8005dac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e027      	b.n	8005dac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	78db      	ldrb	r3, [r3, #3]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d003      	beq.n	8005d8c <USB_EPClearStall+0x9e>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d10f      	bne.n	8005dac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ddc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e34:	f023 0302 	bic.w	r3, r3, #2
 8005e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e76:	f043 0302 	orr.w	r3, r3, #2
 8005e7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	0c1b      	lsrs	r3, r3, #16
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	b29b      	uxth	r3, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f46:	68bb      	ldr	r3, [r7, #8]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	460b      	mov	r3, r1
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	333c      	adds	r3, #60	; 0x3c
 800602a:	3304      	adds	r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4a26      	ldr	r2, [pc, #152]	; (80060cc <USB_EP0_OutStart+0xb8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d90a      	bls.n	800604e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006048:	d101      	bne.n	800604e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e037      	b.n	80060be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800606c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607c:	f043 0318 	orr.w	r3, r3, #24
 8006080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006094:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d10f      	bne.n	80060bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	4f54300a 	.word	0x4f54300a

080060d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <USB_CoreReset+0x64>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e01b      	b.n	8006126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	daf2      	bge.n	80060dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <USB_CoreReset+0x64>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e006      	b.n	8006126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d0f0      	beq.n	8006106 <USB_CoreReset+0x36>

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	00030d40 	.word	0x00030d40

08006138 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006144:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006148:	f005 f8f6 	bl	800b338 <malloc>
 800614c:	4603      	mov	r3, r0
 800614e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d105      	bne.n	8006162 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800615e:	2302      	movs	r3, #2
 8006160:	e066      	b.n	8006230 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7c1b      	ldrb	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d119      	bne.n	80061a6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006176:	2202      	movs	r2, #2
 8006178:	2181      	movs	r1, #129	; 0x81
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f004 ff63 	bl	800b046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618a:	2202      	movs	r2, #2
 800618c:	2101      	movs	r1, #1
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f004 ff59 	bl	800b046 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2210      	movs	r2, #16
 80061a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80061a4:	e016      	b.n	80061d4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061a6:	2340      	movs	r3, #64	; 0x40
 80061a8:	2202      	movs	r2, #2
 80061aa:	2181      	movs	r1, #129	; 0x81
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f004 ff4a 	bl	800b046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	2202      	movs	r2, #2
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f004 ff41 	bl	800b046 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2210      	movs	r2, #16
 80061d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061d4:	2308      	movs	r3, #8
 80061d6:	2203      	movs	r2, #3
 80061d8:	2182      	movs	r1, #130	; 0x82
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f004 ff33 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7c1b      	ldrb	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006214:	2101      	movs	r1, #1
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f005 f804 	bl	800b224 <USBD_LL_PrepareReceive>
 800621c:	e007      	b.n	800622e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f004 fffb 	bl	800b224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006248:	2181      	movs	r1, #129	; 0x81
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f004 ff21 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006256:	2101      	movs	r1, #1
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f004 ff1a 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006266:	2182      	movs	r1, #130	; 0x82
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f004 ff12 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006298:	4618      	mov	r0, r3
 800629a:	f005 f855 	bl	800b348 <free>
    pdev->pClassData = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d03a      	beq.n	8006350 <USBD_CDC_Setup+0xa0>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	f040 8097 	bne.w	800640e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	88db      	ldrh	r3, [r3, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d029      	beq.n	800633c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da11      	bge.n	8006316 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80062fe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	88d2      	ldrh	r2, [r2, #6]
 8006304:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	88db      	ldrh	r3, [r3, #6]
 800630c:	461a      	mov	r2, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 faac 	bl	800786c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006314:	e082      	b.n	800641c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	785a      	ldrb	r2, [r3, #1]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	88db      	ldrh	r3, [r3, #6]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800632c:	6939      	ldr	r1, [r7, #16]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88db      	ldrh	r3, [r3, #6]
 8006332:	461a      	mov	r2, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fac5 	bl	80078c4 <USBD_CtlPrepareRx>
    break;
 800633a:	e06f      	b.n	800641c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	7850      	ldrb	r0, [r2, #1]
 8006348:	2200      	movs	r2, #0
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	4798      	blx	r3
    break;
 800634e:	e065      	b.n	800641c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b0b      	cmp	r3, #11
 8006356:	d84f      	bhi.n	80063f8 <USBD_CDC_Setup+0x148>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <USBD_CDC_Setup+0xb0>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006391 	.word	0x08006391
 8006364:	08006407 	.word	0x08006407
 8006368:	080063f9 	.word	0x080063f9
 800636c:	080063f9 	.word	0x080063f9
 8006370:	080063f9 	.word	0x080063f9
 8006374:	080063f9 	.word	0x080063f9
 8006378:	080063f9 	.word	0x080063f9
 800637c:	080063f9 	.word	0x080063f9
 8006380:	080063f9 	.word	0x080063f9
 8006384:	080063f9 	.word	0x080063f9
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063e1 	.word	0x080063e1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006396:	2b03      	cmp	r3, #3
 8006398:	d107      	bne.n	80063aa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800639a:	f107 030c 	add.w	r3, r7, #12
 800639e:	2202      	movs	r2, #2
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fa62 	bl	800786c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063a8:	e030      	b.n	800640c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 f9ec 	bl	800778a <USBD_CtlError>
        ret = USBD_FAIL;
 80063b2:	2303      	movs	r3, #3
 80063b4:	75fb      	strb	r3, [r7, #23]
      break;
 80063b6:	e029      	b.n	800640c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d107      	bne.n	80063d2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063c2:	f107 030f 	add.w	r3, r7, #15
 80063c6:	2201      	movs	r2, #1
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fa4e 	bl	800786c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063d0:	e01c      	b.n	800640c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f9d8 	bl	800778a <USBD_CtlError>
        ret = USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e015      	b.n	800640c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d00f      	beq.n	800640a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 f9cc 	bl	800778a <USBD_CtlError>
        ret = USBD_FAIL;
 80063f2:	2303      	movs	r3, #3
 80063f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063f6:	e008      	b.n	800640a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f9c5 	bl	800778a <USBD_CtlError>
      ret = USBD_FAIL;
 8006400:	2303      	movs	r3, #3
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e002      	b.n	800640c <USBD_CDC_Setup+0x15c>
      break;
 8006406:	bf00      	nop
 8006408:	e008      	b.n	800641c <USBD_CDC_Setup+0x16c>
      break;
 800640a:	bf00      	nop
    }
    break;
 800640c:	e006      	b.n	800641c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 f9ba 	bl	800778a <USBD_CtlError>
    ret = USBD_FAIL;
 8006416:	2303      	movs	r3, #3
 8006418:	75fb      	strb	r3, [r7, #23]
    break;
 800641a:	bf00      	nop
  }

  return (uint8_t)ret;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800643a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006446:	2303      	movs	r3, #3
 8006448:	e049      	b.n	80064de <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006450:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3318      	adds	r3, #24
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d029      	beq.n	80064bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	3318      	adds	r3, #24
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	78f9      	ldrb	r1, [r7, #3]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	460b      	mov	r3, r1
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	1a5b      	subs	r3, r3, r1
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4403      	add	r3, r0
 8006488:	3344      	adds	r3, #68	; 0x44
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006490:	fb03 f301 	mul.w	r3, r3, r1
 8006494:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006496:	2b00      	cmp	r3, #0
 8006498:	d110      	bne.n	80064bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3318      	adds	r3, #24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064ae:	78f9      	ldrb	r1, [r7, #3]
 80064b0:	2300      	movs	r3, #0
 80064b2:	2200      	movs	r2, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f004 fe94 	bl	800b1e2 <USBD_LL_Transmit>
 80064ba:	e00f      	b.n	80064dc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064d8:	78fa      	ldrb	r2, [r7, #3]
 80064da:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e015      	b.n	8006534 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f004 feaa 	bl	800b266 <USBD_LL_GetRxDataSize>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800652e:	4611      	mov	r1, r2
 8006530:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d015      	beq.n	8006582 <USBD_CDC_EP0_RxReady+0x46>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800655c:	2bff      	cmp	r3, #255	; 0xff
 800655e:	d010      	beq.n	8006582 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800656e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006576:	b292      	uxth	r2, r2
 8006578:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	22ff      	movs	r2, #255	; 0xff
 800657e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2243      	movs	r2, #67	; 0x43
 8006598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800659a:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	20000098 	.word	0x20000098

080065ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2243      	movs	r2, #67	; 0x43
 80065b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065ba:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	20000054 	.word	0x20000054

080065cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2243      	movs	r2, #67	; 0x43
 80065d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	200000dc 	.word	0x200000dc

080065ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	220a      	movs	r2, #10
 80065f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000010 	.word	0x20000010

0800660c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e004      	b.n	800662a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006636:	b480      	push	{r7}
 8006638:	b087      	sub	sp, #28
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006648:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006678:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e01a      	b.n	80066e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d114      	bne.n	80066e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066da:	2181      	movs	r1, #129	; 0x81
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f004 fd80 	bl	800b1e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800670a:	2303      	movs	r3, #3
 800670c:	e016      	b.n	800673c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	7c1b      	ldrb	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800671c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006720:	2101      	movs	r1, #1
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f004 fd7e 	bl	800b224 <USBD_LL_PrepareReceive>
 8006728:	e007      	b.n	800673a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	2101      	movs	r1, #1
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f004 fd75 	bl	800b224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e025      	b.n	80067a8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	79fa      	ldrb	r2, [r7, #7]
 800679a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f004 fbeb 	bl	800af78 <USBD_LL_Init>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e010      	b.n	80067ea <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	f107 020e 	add.w	r2, r7, #14
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	4602      	mov	r2, r0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f004 fc08 	bl	800b010 <USBD_LL_Start>
 8006800:	4603      	mov	r3, r0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	4611      	mov	r1, r2
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
 800684a:	4603      	mov	r3, r0
 800684c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	4611      	mov	r1, r2
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
  }

  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 ff3b 	bl	8007716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d01a      	beq.n	80068fa <USBD_LL_SetupStage+0x72>
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d822      	bhi.n	800690e <USBD_LL_SetupStage+0x86>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <USBD_LL_SetupStage+0x4a>
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d00a      	beq.n	80068e6 <USBD_LL_SetupStage+0x5e>
 80068d0:	e01d      	b.n	800690e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa18 	bl	8006d10 <USBD_StdDevReq>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e020      	b.n	8006928 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa7c 	bl	8006dec <USBD_StdItfReq>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
      break;
 80068f8:	e016      	b.n	8006928 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 faba 	bl	8006e7c <USBD_StdEPReq>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
      break;
 800690c:	e00c      	b.n	8006928 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f004 fbd7 	bl	800b0d0 <USBD_LL_StallEP>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	bf00      	nop
  }

  return ret;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	460b      	mov	r3, r1
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d137      	bne.n	80069b6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800694c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006954:	2b03      	cmp	r3, #3
 8006956:	d14a      	bne.n	80069ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d913      	bls.n	800698c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	1ad2      	subs	r2, r2, r3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4293      	cmp	r3, r2
 800697c:	bf28      	it	cs
 800697e:	4613      	movcs	r3, r2
 8006980:	461a      	mov	r2, r3
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 ffba 	bl	80078fe <USBD_CtlContinueRx>
 800698a:	e030      	b.n	80069ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d105      	bne.n	80069ae <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 ffb6 	bl	8007920 <USBD_CtlSendStatus>
 80069b4:	e01b      	b.n	80069ee <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d013      	beq.n	80069ea <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d10e      	bne.n	80069ea <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	7afa      	ldrb	r2, [r7, #11]
 80069d6:	4611      	mov	r1, r2
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	4798      	blx	r3
 80069dc:	4603      	mov	r3, r0
 80069de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	e002      	b.n	80069f0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e000      	b.n	80069f0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d16a      	bne.n	8006ae2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d155      	bne.n	8006ac8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d914      	bls.n	8006a52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	1ad2      	subs	r2, r2, r3
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 ff2f 	bl	80078a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a44:	2300      	movs	r3, #0
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f004 fbea 	bl	800b224 <USBD_LL_PrepareReceive>
 8006a50:	e03a      	b.n	8006ac8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d11c      	bne.n	8006a98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d316      	bcc.n	8006a98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d20f      	bcs.n	8006a98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 ff10 	bl	80078a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f004 fbc7 	bl	800b224 <USBD_LL_PrepareReceive>
 8006a96:	e017      	b.n	8006ac8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d105      	bne.n	8006aba <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f004 fb07 	bl	800b0d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 ff3f 	bl	8007946 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d123      	bne.n	8006b1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fe99 	bl	800680a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ae0:	e01b      	b.n	8006b1a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d013      	beq.n	8006b16 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d10e      	bne.n	8006b16 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	7afa      	ldrb	r2, [r7, #11]
 8006b02:	4611      	mov	r1, r2
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	e002      	b.n	8006b1c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e000      	b.n	8006b1c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6852      	ldr	r2, [r2, #4]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	4611      	mov	r1, r2
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f004 fa69 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2240      	movs	r2, #64	; 0x40
 8006b80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b84:	2340      	movs	r3, #64	; 0x40
 8006b86:	2200      	movs	r2, #0
 8006b88:	2180      	movs	r1, #128	; 0x80
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f004 fa5b 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2240      	movs	r2, #64	; 0x40
 8006b9a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d105      	bne.n	8006c0e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d10b      	bne.n	8006c46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6852      	ldr	r2, [r2, #4]
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
  }

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b087      	sub	sp, #28
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cf0:	8a3b      	ldrh	r3, [r7, #16]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	b21a      	sxth	r2, r3
 8006cf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d00:	89fb      	ldrh	r3, [r7, #14]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d005      	beq.n	8006d36 <USBD_StdDevReq+0x26>
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d853      	bhi.n	8006dd6 <USBD_StdDevReq+0xc6>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <USBD_StdDevReq+0x3a>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d14f      	bne.n	8006dd6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
    break;
 8006d48:	e04a      	b.n	8006de0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b09      	cmp	r3, #9
 8006d50:	d83b      	bhi.n	8006dca <USBD_StdDevReq+0xba>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <USBD_StdDevReq+0x48>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006dad 	.word	0x08006dad
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dcb 	.word	0x08006dcb
 8006d64:	08006db7 	.word	0x08006db7
 8006d68:	08006dcb 	.word	0x08006dcb
 8006d6c:	08006d8b 	.word	0x08006d8b
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006dcb 	.word	0x08006dcb
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006d95 	.word	0x08006d95
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9d8 	bl	8007138 <USBD_GetDescriptor>
      break;
 8006d88:	e024      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb3d 	bl	800740c <USBD_SetAddress>
      break;
 8006d92:	e01f      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fb7c 	bl	8007494 <USBD_SetConfig>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e018      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc19 	bl	80075dc <USBD_GetConfig>
      break;
 8006daa:	e013      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fc49 	bl	8007646 <USBD_GetStatus>
      break;
 8006db4:	e00e      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc77 	bl	80076ac <USBD_SetFeature>
      break;
 8006dbe:	e009      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fc86 	bl	80076d4 <USBD_ClrFeature>
      break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fcdc 	bl	800778a <USBD_CtlError>
      break;
 8006dd2:	bf00      	nop
    }
    break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fcd6 	bl	800778a <USBD_CtlError>
    break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d005      	beq.n	8006e12 <USBD_StdItfReq+0x26>
 8006e06:	2b40      	cmp	r3, #64	; 0x40
 8006e08:	d82e      	bhi.n	8006e68 <USBD_StdItfReq+0x7c>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <USBD_StdItfReq+0x26>
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d12a      	bne.n	8006e68 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d81d      	bhi.n	8006e5a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	889b      	ldrh	r3, [r3, #4]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d813      	bhi.n	8006e50 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d110      	bne.n	8006e64 <USBD_StdItfReq+0x78>
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10d      	bne.n	8006e64 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fd69 	bl	8007920 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006e4e:	e009      	b.n	8006e64 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc99 	bl	800778a <USBD_CtlError>
      break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fc94 	bl	800778a <USBD_CtlError>
      break;
 8006e62:	e000      	b.n	8006e66 <USBD_StdItfReq+0x7a>
      break;
 8006e64:	bf00      	nop
    }
    break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc8d 	bl	800778a <USBD_CtlError>
    break;
 8006e70:	bf00      	nop
  }

  return ret;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	889b      	ldrh	r3, [r3, #4]
 8006e8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d007      	beq.n	8006eac <USBD_StdEPReq+0x30>
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	f200 8140 	bhi.w	8007122 <USBD_StdEPReq+0x2a6>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <USBD_StdEPReq+0x44>
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	f040 813b 	bne.w	8007122 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ebe:	e135      	b.n	800712c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d007      	beq.n	8006ed8 <USBD_StdEPReq+0x5c>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	f300 8124 	bgt.w	8007116 <USBD_StdEPReq+0x29a>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d07b      	beq.n	8006fca <USBD_StdEPReq+0x14e>
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d03b      	beq.n	8006f4e <USBD_StdEPReq+0xd2>
 8006ed6:	e11e      	b.n	8007116 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <USBD_StdEPReq+0x6c>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d016      	beq.n	8006f14 <USBD_StdEPReq+0x98>
 8006ee6:	e02c      	b.n	8006f42 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <USBD_StdEPReq+0x8e>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d00a      	beq.n	8006f0a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f004 f8e9 	bl	800b0d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f004 f8e5 	bl	800b0d0 <USBD_LL_StallEP>
 8006f06:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f08:	e020      	b.n	8006f4c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc3c 	bl	800778a <USBD_CtlError>
        break;
 8006f12:	e01b      	b.n	8006f4c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10e      	bne.n	8006f3a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <USBD_StdEPReq+0xbe>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d008      	beq.n	8006f3a <USBD_StdEPReq+0xbe>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	88db      	ldrh	r3, [r3, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f004 f8cb 	bl	800b0d0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fcf0 	bl	8007920 <USBD_CtlSendStatus>

        break;
 8006f40:	e004      	b.n	8006f4c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc20 	bl	800778a <USBD_CtlError>
        break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e0e8      	b.n	8007120 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d002      	beq.n	8006f5e <USBD_StdEPReq+0xe2>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d016      	beq.n	8006f8a <USBD_StdEPReq+0x10e>
 8006f5c:	e02e      	b.n	8006fbc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00d      	beq.n	8006f80 <USBD_StdEPReq+0x104>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d00a      	beq.n	8006f80 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f004 f8ae 	bl	800b0d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f004 f8aa 	bl	800b0d0 <USBD_LL_StallEP>
 8006f7c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f7e:	e023      	b.n	8006fc8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fc01 	bl	800778a <USBD_CtlError>
        break;
 8006f88:	e01e      	b.n	8006fc8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d119      	bne.n	8006fc6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f004 f8b4 	bl	800b10e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fcba 	bl	8007920 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
        }
        break;
 8006fba:	e004      	b.n	8006fc6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fbe3 	bl	800778a <USBD_CtlError>
        break;
 8006fc4:	e000      	b.n	8006fc8 <USBD_StdEPReq+0x14c>
        break;
 8006fc6:	bf00      	nop
      }
      break;
 8006fc8:	e0aa      	b.n	8007120 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d002      	beq.n	8006fda <USBD_StdEPReq+0x15e>
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d032      	beq.n	800703e <USBD_StdEPReq+0x1c2>
 8006fd8:	e097      	b.n	800710a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <USBD_StdEPReq+0x174>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d004      	beq.n	8006ff0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fbce 	bl	800778a <USBD_CtlError>
          break;
 8006fee:	e091      	b.n	8007114 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0b      	bge.n	8007010 <USBD_StdEPReq+0x194>
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	3310      	adds	r3, #16
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	e00b      	b.n	8007028 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	3304      	adds	r3, #4
 8007028:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2202      	movs	r2, #2
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fc18 	bl	800786c <USBD_CtlSendData>
        break;
 800703c:	e06a      	b.n	8007114 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800703e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da11      	bge.n	800706a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3324      	adds	r3, #36	; 0x24
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d117      	bne.n	8007090 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb91 	bl	800778a <USBD_CtlError>
            break;
 8007068:	e054      	b.n	8007114 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fb7e 	bl	800778a <USBD_CtlError>
            break;
 800708e:	e041      	b.n	8007114 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da0b      	bge.n	80070b0 <USBD_StdEPReq+0x234>
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	3310      	adds	r3, #16
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4413      	add	r3, r2
 80070ac:	3304      	adds	r3, #4
 80070ae:	e00b      	b.n	80070c8 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	3304      	adds	r3, #4
 80070c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <USBD_StdEPReq+0x25a>
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d103      	bne.n	80070de <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	e00e      	b.n	80070fc <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f004 f832 	bl	800b14c <USBD_LL_IsStallEP>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e002      	b.n	80070fc <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2202      	movs	r2, #2
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fbb2 	bl	800786c <USBD_CtlSendData>
          break;
 8007108:	e004      	b.n	8007114 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fb3c 	bl	800778a <USBD_CtlError>
        break;
 8007112:	bf00      	nop
      }
      break;
 8007114:	e004      	b.n	8007120 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb36 	bl	800778a <USBD_CtlError>
      break;
 800711e:	bf00      	nop
    }
    break;
 8007120:	e004      	b.n	800712c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fb30 	bl	800778a <USBD_CtlError>
    break;
 800712a:	bf00      	nop
  }

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	885b      	ldrh	r3, [r3, #2]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	2b06      	cmp	r3, #6
 800715a:	f200 8128 	bhi.w	80073ae <USBD_GetDescriptor+0x276>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <USBD_GetDescriptor+0x2c>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007181 	.word	0x08007181
 8007168:	08007199 	.word	0x08007199
 800716c:	080071d9 	.word	0x080071d9
 8007170:	080073af 	.word	0x080073af
 8007174:	080073af 	.word	0x080073af
 8007178:	0800734f 	.word	0x0800734f
 800717c:	0800737b 	.word	0x0800737b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
    break;
 8007196:	e112      	b.n	80073be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7c1b      	ldrb	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f107 0208 	add.w	r2, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	2202      	movs	r2, #2
 80071b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80071ba:	e100      	b.n	80073be <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f107 0208 	add.w	r2, r7, #8
 80071c8:	4610      	mov	r0, r2
 80071ca:	4798      	blx	r3
 80071cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	2202      	movs	r2, #2
 80071d4:	701a      	strb	r2, [r3, #0]
    break;
 80071d6:	e0f2      	b.n	80073be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	885b      	ldrh	r3, [r3, #2]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b05      	cmp	r3, #5
 80071e0:	f200 80ac 	bhi.w	800733c <USBD_GetDescriptor+0x204>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <USBD_GetDescriptor+0xb4>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007205 	.word	0x08007205
 80071f0:	08007239 	.word	0x08007239
 80071f4:	0800726d 	.word	0x0800726d
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	080072d5 	.word	0x080072d5
 8007200:	08007309 	.word	0x08007309
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 0108 	add.w	r1, r7, #8
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007226:	e091      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 faad 	bl	800778a <USBD_CtlError>
        err++;
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	3301      	adds	r3, #1
 8007234:	72fb      	strb	r3, [r7, #11]
      break;
 8007236:	e089      	b.n	800734c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	f107 0108 	add.w	r1, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800725a:	e077      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa93 	bl	800778a <USBD_CtlError>
        err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
      break;
 800726a:	e06f      	b.n	800734c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7c12      	ldrb	r2, [r2, #16]
 8007284:	f107 0108 	add.w	r1, r7, #8
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
 800728c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800728e:	e05d      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa79 	bl	800778a <USBD_CtlError>
        err++;
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	3301      	adds	r3, #1
 800729c:	72fb      	strb	r3, [r7, #11]
      break;
 800729e:	e055      	b.n	800734c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	7c12      	ldrb	r2, [r2, #16]
 80072b8:	f107 0108 	add.w	r1, r7, #8
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
 80072c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072c2:	e043      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa5f 	bl	800778a <USBD_CtlError>
        err++;
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	3301      	adds	r3, #1
 80072d0:	72fb      	strb	r3, [r7, #11]
      break;
 80072d2:	e03b      	b.n	800734c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7c12      	ldrb	r2, [r2, #16]
 80072ec:	f107 0108 	add.w	r1, r7, #8
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072f6:	e029      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa45 	bl	800778a <USBD_CtlError>
        err++;
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	3301      	adds	r3, #1
 8007304:	72fb      	strb	r3, [r7, #11]
      break;
 8007306:	e021      	b.n	800734c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7c12      	ldrb	r2, [r2, #16]
 8007320:	f107 0108 	add.w	r1, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800732a:	e00f      	b.n	800734c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa2b 	bl	800778a <USBD_CtlError>
        err++;
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	3301      	adds	r3, #1
 8007338:	72fb      	strb	r3, [r7, #11]
      break;
 800733a:	e007      	b.n	800734c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa23 	bl	800778a <USBD_CtlError>
      err++;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	3301      	adds	r3, #1
 8007348:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800734a:	bf00      	nop
    }
    break;
 800734c:	e037      	b.n	80073be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	7c1b      	ldrb	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	f107 0208 	add.w	r2, r7, #8
 8007362:	4610      	mov	r0, r2
 8007364:	4798      	blx	r3
 8007366:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007368:	e029      	b.n	80073be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa0c 	bl	800778a <USBD_CtlError>
      err++;
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	3301      	adds	r3, #1
 8007376:	72fb      	strb	r3, [r7, #11]
    break;
 8007378:	e021      	b.n	80073be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7c1b      	ldrb	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f107 0208 	add.w	r2, r7, #8
 800738e:	4610      	mov	r0, r2
 8007390:	4798      	blx	r3
 8007392:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	2207      	movs	r2, #7
 800739a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800739c:	e00f      	b.n	80073be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f9f2 	bl	800778a <USBD_CtlError>
      err++;
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	3301      	adds	r3, #1
 80073aa:	72fb      	strb	r3, [r7, #11]
    break;
 80073ac:	e007      	b.n	80073be <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f9ea 	bl	800778a <USBD_CtlError>
    err++;
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	3301      	adds	r3, #1
 80073ba:	72fb      	strb	r3, [r7, #11]
    break;
 80073bc:	bf00      	nop
  }

  if (err != 0U)
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11e      	bne.n	8007402 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d016      	beq.n	80073fa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80073cc:	893b      	ldrh	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00e      	beq.n	80073f0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88da      	ldrh	r2, [r3, #6]
 80073d6:	893b      	ldrh	r3, [r7, #8]
 80073d8:	4293      	cmp	r3, r2
 80073da:	bf28      	it	cs
 80073dc:	4613      	movcs	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80073e2:	893b      	ldrh	r3, [r7, #8]
 80073e4:	461a      	mov	r2, r3
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa3f 	bl	800786c <USBD_CtlSendData>
 80073ee:	e009      	b.n	8007404 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9c9 	bl	800778a <USBD_CtlError>
 80073f8:	e004      	b.n	8007404 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa90 	bl	8007920 <USBD_CtlSendStatus>
 8007400:	e000      	b.n	8007404 <USBD_GetDescriptor+0x2cc>
    return;
 8007402:	bf00      	nop
    }
  }
}
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop

0800740c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	889b      	ldrh	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d130      	bne.n	8007480 <USBD_SetAddress+0x74>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88db      	ldrh	r3, [r3, #6]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d12c      	bne.n	8007480 <USBD_SetAddress+0x74>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	2b7f      	cmp	r3, #127	; 0x7f
 800742c:	d828      	bhi.n	8007480 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	885b      	ldrh	r3, [r3, #2]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007438:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007440:	2b03      	cmp	r3, #3
 8007442:	d104      	bne.n	800744e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f99f 	bl	800778a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744c:	e01d      	b.n	800748a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f003 fea2 	bl	800b1a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa5d 	bl	8007920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007474:	e009      	b.n	800748a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	e004      	b.n	800748a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f981 	bl	800778a <USBD_CtlError>
  }
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	4b4b      	ldr	r3, [pc, #300]	; (80075d8 <USBD_SetConfig+0x144>)
 80074aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <USBD_SetConfig+0x144>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d905      	bls.n	80074c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f967 	bl	800778a <USBD_CtlError>
    return USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	e087      	b.n	80075d0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d002      	beq.n	80074d0 <USBD_SetConfig+0x3c>
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d025      	beq.n	800751a <USBD_SetConfig+0x86>
 80074ce:	e071      	b.n	80075b4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80074d0:	4b41      	ldr	r3, [pc, #260]	; (80075d8 <USBD_SetConfig+0x144>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01c      	beq.n	8007512 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80074d8:	4b3f      	ldr	r3, [pc, #252]	; (80075d8 <USBD_SetConfig+0x144>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074e2:	4b3d      	ldr	r3, [pc, #244]	; (80075d8 <USBD_SetConfig+0x144>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff f999 	bl	8006820 <USBD_SetClassConfig>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f945 	bl	800778a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007500:	e065      	b.n	80075ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa0c 	bl	8007920 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2203      	movs	r2, #3
 800750c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007510:	e05d      	b.n	80075ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa04 	bl	8007920 <USBD_CtlSendStatus>
    break;
 8007518:	e059      	b.n	80075ce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800751a:	4b2f      	ldr	r3, [pc, #188]	; (80075d8 <USBD_SetConfig+0x144>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d112      	bne.n	8007548 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <USBD_SetConfig+0x144>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007534:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <USBD_SetConfig+0x144>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff f98c 	bl	8006858 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f9ed 	bl	8007920 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007546:	e042      	b.n	80075ce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007548:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <USBD_SetConfig+0x144>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d02a      	beq.n	80075ac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f97a 	bl	8006858 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007564:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <USBD_SetConfig+0x144>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800756e:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <USBD_SetConfig+0x144>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff f953 	bl	8006820 <USBD_SetClassConfig>
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00f      	beq.n	80075a4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8ff 	bl	800778a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff f95f 	bl	8006858 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80075a2:	e014      	b.n	80075ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9bb 	bl	8007920 <USBD_CtlSendStatus>
    break;
 80075aa:	e010      	b.n	80075ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9b7 	bl	8007920 <USBD_CtlSendStatus>
    break;
 80075b2:	e00c      	b.n	80075ce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f8e7 	bl	800778a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <USBD_SetConfig+0x144>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f948 	bl	8006858 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	73fb      	strb	r3, [r7, #15]
    break;
 80075cc:	bf00      	nop
  }

  return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000210 	.word	0x20000210

080075dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d004      	beq.n	80075f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8ca 	bl	800778a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80075f6:	e022      	b.n	800763e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	2b02      	cmp	r3, #2
 8007600:	dc02      	bgt.n	8007608 <USBD_GetConfig+0x2c>
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc03      	bgt.n	800760e <USBD_GetConfig+0x32>
 8007606:	e015      	b.n	8007634 <USBD_GetConfig+0x58>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d00b      	beq.n	8007624 <USBD_GetConfig+0x48>
 800760c:	e012      	b.n	8007634 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3308      	adds	r3, #8
 8007618:	2201      	movs	r2, #1
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f925 	bl	800786c <USBD_CtlSendData>
      break;
 8007622:	e00c      	b.n	800763e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	2201      	movs	r2, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f91d 	bl	800786c <USBD_CtlSendData>
      break;
 8007632:	e004      	b.n	800763e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8a7 	bl	800778a <USBD_CtlError>
      break;
 800763c:	bf00      	nop
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	3b01      	subs	r3, #1
 8007658:	2b02      	cmp	r3, #2
 800765a:	d81e      	bhi.n	800769a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d004      	beq.n	800766e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f88f 	bl	800778a <USBD_CtlError>
      break;
 800766c:	e01a      	b.n	80076a4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	330c      	adds	r3, #12
 800768e:	2202      	movs	r2, #2
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8ea 	bl	800786c <USBD_CtlSendData>
    break;
 8007698:	e004      	b.n	80076a4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f874 	bl	800778a <USBD_CtlError>
    break;
 80076a2:	bf00      	nop
  }
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d106      	bne.n	80076cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f92a 	bl	8007920 <USBD_CtlSendStatus>
  }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d80b      	bhi.n	8007702 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d10c      	bne.n	800770c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f910 	bl	8007920 <USBD_CtlSendStatus>
      }
      break;
 8007700:	e004      	b.n	800770c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f840 	bl	800778a <USBD_CtlError>
      break;
 800770a:	e000      	b.n	800770e <USBD_ClrFeature+0x3a>
      break;
 800770c:	bf00      	nop
  }
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fac6 	bl	8006cd2 <SWAPBYTE>
 8007746:	4603      	mov	r3, r0
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fab9 	bl	8006cd2 <SWAPBYTE>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff faac 	bl	8006cd2 <SWAPBYTE>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	80da      	strh	r2, [r3, #6]
}
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007794:	2180      	movs	r1, #128	; 0x80
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f003 fc9a 	bl	800b0d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f003 fc96 	bl	800b0d0 <USBD_LL_StallEP>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d036      	beq.n	8007830 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f000 f836 	bl	8007838 <USBD_GetLen>
 80077cc:	4603      	mov	r3, r0
 80077ce:	3301      	adds	r3, #1
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4413      	add	r3, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	3301      	adds	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	2203      	movs	r2, #3
 80077f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	3301      	adds	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077fc:	e013      	b.n	8007826 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	4413      	add	r3, r2
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3301      	adds	r3, #1
 800780e:	613b      	str	r3, [r7, #16]
    idx++;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	3301      	adds	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4413      	add	r3, r2
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	3301      	adds	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e7      	bne.n	80077fe <USBD_GetString+0x52>
 800782e:	e000      	b.n	8007832 <USBD_GetString+0x86>
    return;
 8007830:	bf00      	nop
  }
}
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007848:	e005      	b.n	8007856 <USBD_GetLen+0x1e>
  {
    len++;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	3301      	adds	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	3301      	adds	r3, #1
 8007854:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f5      	bne.n	800784a <USBD_GetLen+0x12>
  }

  return len;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2202      	movs	r2, #2
 800787c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f003 fca5 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	2100      	movs	r1, #0
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f003 fc94 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2203      	movs	r2, #3
 80078d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	2100      	movs	r1, #0
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f003 fc98 	bl	800b224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f003 fc87 	bl	800b224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2204      	movs	r2, #4
 800792c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007930:	2300      	movs	r3, #0
 8007932:	2200      	movs	r2, #0
 8007934:	2100      	movs	r1, #0
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f003 fc53 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2205      	movs	r2, #5
 8007952:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f003 fc61 	bl	800b224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007970:	bf00      	nop
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007982:	f3ef 8305 	mrs	r3, IPSR
 8007986:	60bb      	str	r3, [r7, #8]
  return(result);
 8007988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798e:	f3ef 8310 	mrs	r3, PRIMASK
 8007992:	607b      	str	r3, [r7, #4]
  return(result);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800799a:	f3ef 8311 	mrs	r3, BASEPRI
 800799e:	603b      	str	r3, [r7, #0]
  return(result);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <osKernelInitialize+0x3a>
 80079a6:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <osKernelInitialize+0x64>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d103      	bne.n	80079b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80079ae:	f06f 0305 	mvn.w	r3, #5
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e00c      	b.n	80079d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <osKernelInitialize+0x64>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079be:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <osKernelInitialize+0x64>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e002      	b.n	80079d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295
 80079ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000214 	.word	0x20000214

080079e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ea:	f3ef 8305 	mrs	r3, IPSR
 80079ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80079f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10f      	bne.n	8007a16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f6:	f3ef 8310 	mrs	r3, PRIMASK
 80079fa:	607b      	str	r3, [r7, #4]
  return(result);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a02:	f3ef 8311 	mrs	r3, BASEPRI
 8007a06:	603b      	str	r3, [r7, #0]
  return(result);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <osKernelStart+0x3a>
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <osKernelStart+0x68>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007a16:	f06f 0305 	mvn.w	r3, #5
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e010      	b.n	8007a40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <osKernelStart+0x68>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d109      	bne.n	8007a3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a26:	f7ff ffa1 	bl	800796c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <osKernelStart+0x68>)
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a30:	f001 faa0 	bl	8008f74 <vTaskStartScheduler>
      stat = osOK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e002      	b.n	8007a40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007a40:	68fb      	ldr	r3, [r7, #12]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000214 	.word	0x20000214

08007a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b090      	sub	sp, #64	; 0x40
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a60:	f3ef 8305 	mrs	r3, IPSR
 8007a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 808f 	bne.w	8007b8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <osThreadNew+0x3e>
 8007a86:	4b44      	ldr	r3, [pc, #272]	; (8007b98 <osThreadNew+0x148>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d07e      	beq.n	8007b8c <osThreadNew+0x13c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07b      	beq.n	8007b8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007a98:	2318      	movs	r3, #24
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d045      	beq.n	8007b38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <osThreadNew+0x6a>
        name = attr->name;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <osThreadNew+0x90>
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	2b38      	cmp	r3, #56	; 0x38
 8007ad2:	d805      	bhi.n	8007ae0 <osThreadNew+0x90>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <osThreadNew+0x94>
        return (NULL);
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e054      	b.n	8007b8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <osThreadNew+0xca>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b5b      	cmp	r3, #91	; 0x5b
 8007b02:	d90a      	bls.n	8007b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <osThreadNew+0xca>
        mem = 1;
 8007b14:	2301      	movs	r3, #1
 8007b16:	623b      	str	r3, [r7, #32]
 8007b18:	e010      	b.n	8007b3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <osThreadNew+0xec>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <osThreadNew+0xec>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <osThreadNew+0xec>
          mem = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	623b      	str	r3, [r7, #32]
 8007b36:	e001      	b.n	8007b3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d110      	bne.n	8007b64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b4a:	9202      	str	r2, [sp, #8]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 febf 	bl	80088dc <xTaskCreateStatic>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	e013      	b.n	8007b8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d110      	bne.n	8007b8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	f107 0310 	add.w	r3, r7, #16
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 ff0a 	bl	8008996 <xTaskCreate>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d001      	beq.n	8007b8c <osThreadNew+0x13c>
          hTask = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b8c:	693b      	ldr	r3, [r7, #16]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3730      	adds	r7, #48	; 0x30
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000214 	.word	0x20000214

08007b9c <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007baa:	f3ef 8305 	mrs	r3, IPSR
 8007bae:	617b      	str	r3, [r7, #20]
  return(result);
 8007bb0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10f      	bne.n	8007bd6 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bba:	613b      	str	r3, [r7, #16]
  return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <osThreadSetPriority+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <osThreadSetPriority+0x42>
 8007bce:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <osThreadSetPriority+0x74>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d103      	bne.n	8007bde <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8007bd6:	f06f 0305 	mvn.w	r3, #5
 8007bda:	61fb      	str	r3, [r7, #28]
 8007bdc:	e013      	b.n	8007c06 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <osThreadSetPriority+0x54>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dd02      	ble.n	8007bf0 <osThreadSetPriority+0x54>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b38      	cmp	r3, #56	; 0x38
 8007bee:	dd03      	ble.n	8007bf8 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8007bf0:	f06f 0303 	mvn.w	r3, #3
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	e006      	b.n	8007c06 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	69b8      	ldr	r0, [r7, #24]
 8007c02:	f001 f919 	bl	8008e38 <vTaskPrioritySet>
  }

  return (stat);
 8007c06:	69fb      	ldr	r3, [r7, #28]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000214 	.word	0x20000214

08007c14 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	613b      	str	r3, [r7, #16]
  return(result);
 8007c26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10f      	bne.n	8007c4c <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c38:	f3ef 8311 	mrs	r3, BASEPRI
 8007c3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <osThreadTerminate+0x40>
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <osThreadTerminate+0x7c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d103      	bne.n	8007c54 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8007c4c:	f06f 0305 	mvn.w	r3, #5
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	e017      	b.n	8007c84 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8007c5a:	f06f 0303 	mvn.w	r3, #3
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	e010      	b.n	8007c84 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007c62:	69b8      	ldr	r0, [r7, #24]
 8007c64:	f001 f882 	bl	8008d6c <eTaskGetState>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d005      	beq.n	8007c7e <osThreadTerminate+0x6a>
      stat = osOK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8007c76:	69b8      	ldr	r0, [r7, #24]
 8007c78:	f000 ffd2 	bl	8008c20 <vTaskDelete>
 8007c7c:	e002      	b.n	8007c84 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8007c7e:	f06f 0302 	mvn.w	r3, #2
 8007c82:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000214 	.word	0x20000214

08007c94 <osThreadGetCount>:

uint32_t osThreadGetCount (void) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9a:	f3ef 8305 	mrs	r3, IPSR
 8007c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
  uint32_t count;

  if (IS_IRQ()) {
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10f      	bne.n	8007cc6 <osThreadGetCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	607b      	str	r3, [r7, #4]
  return(result);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <osThreadGetCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d006      	beq.n	8007ccc <osThreadGetCount+0x38>
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <osThreadGetCount+0x48>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d102      	bne.n	8007ccc <osThreadGetCount+0x38>
    count = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e002      	b.n	8007cd2 <osThreadGetCount+0x3e>
  } else {
    count = uxTaskGetNumberOfTasks();
 8007ccc:	f001 fa74 	bl	80091b8 <uxTaskGetNumberOfTasks>
 8007cd0:	60f8      	str	r0, [r7, #12]
  }

  return (count);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000214 	.word	0x20000214

08007ce0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce8:	f3ef 8305 	mrs	r3, IPSR
 8007cec:	613b      	str	r3, [r7, #16]
  return(result);
 8007cee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10f      	bne.n	8007d14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d105      	bne.n	8007d0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d00:	f3ef 8311 	mrs	r3, BASEPRI
 8007d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <osDelay+0x3c>
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <osDelay+0x58>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d103      	bne.n	8007d1c <osDelay+0x3c>
    stat = osErrorISR;
 8007d14:	f06f 0305 	mvn.w	r3, #5
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e007      	b.n	8007d2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 ffec 	bl	8008d04 <vTaskDelay>
    }
  }

  return (stat);
 8007d2c:	697b      	ldr	r3, [r7, #20]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000214 	.word	0x20000214

08007d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a07      	ldr	r2, [pc, #28]	; (8007d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4a06      	ldr	r2, [pc, #24]	; (8007d6c <vApplicationGetIdleTaskMemory+0x30>)
 8007d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2280      	movs	r2, #128	; 0x80
 8007d58:	601a      	str	r2, [r3, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000218 	.word	0x20000218
 8007d6c:	20000274 	.word	0x20000274

08007d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a07      	ldr	r2, [pc, #28]	; (8007d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8007d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4a06      	ldr	r2, [pc, #24]	; (8007da0 <vApplicationGetTimerTaskMemory+0x30>)
 8007d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d8e:	601a      	str	r2, [r3, #0]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	20000474 	.word	0x20000474
 8007da0:	200004d0 	.word	0x200004d0

08007da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f103 0208 	add.w	r2, r3, #8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f103 0208 	add.w	r2, r3, #8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f103 0208 	add.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	601a      	str	r2, [r3, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d103      	bne.n	8007e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e00c      	b.n	8007e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e002      	b.n	8007e74 <vListInsert+0x2e>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d2f6      	bcs.n	8007e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	601a      	str	r2, [r3, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6892      	ldr	r2, [r2, #8]
 8007ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6852      	ldr	r2, [r2, #4]
 8007ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d103      	bne.n	8007eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f36:	f002 f9cd 	bl	800a2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	441a      	add	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f66:	3b01      	subs	r3, #1
 8007f68:	68f9      	ldr	r1, [r7, #12]
 8007f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	22ff      	movs	r2, #255	; 0xff
 8007f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	22ff      	movs	r2, #255	; 0xff
 8007f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d114      	bne.n	8007fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01a      	beq.n	8007fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3310      	adds	r3, #16
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fa81 	bl	80094a0 <xTaskRemoveFromEventList>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d012      	beq.n	8007fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <xQueueGenericReset+0xcc>)
 8007fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	e009      	b.n	8007fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3310      	adds	r3, #16
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fef2 	bl	8007da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff feed 	bl	8007da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fca:	f002 f9b3 	bl	800a334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fce:	2301      	movs	r3, #1
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <xQueueGenericCreateStatic+0x52>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <xQueueGenericCreateStatic+0x56>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <xQueueGenericCreateStatic+0x58>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	623b      	str	r3, [r7, #32]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <xQueueGenericCreateStatic+0x7e>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <xQueueGenericCreateStatic+0x82>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <xQueueGenericCreateStatic+0x84>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	61fb      	str	r3, [r7, #28]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800807a:	2350      	movs	r3, #80	; 0x50
 800807c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b50      	cmp	r3, #80	; 0x50
 8008082:	d00a      	beq.n	800809a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	61bb      	str	r3, [r7, #24]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800809a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	4613      	mov	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f805 	bl	80080cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3730      	adds	r7, #48	; 0x30
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e002      	b.n	80080ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080fa:	2101      	movs	r1, #1
 80080fc:	69b8      	ldr	r0, [r7, #24]
 80080fe:	f7ff ff05 	bl	8007f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08e      	sub	sp, #56	; 0x38
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008122:	2300      	movs	r3, #0
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <xQueueGenericSend+0x32>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <xQueueGenericSend+0x40>
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <xQueueGenericSend+0x44>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <xQueueGenericSend+0x46>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <xQueueGenericSend+0x60>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d103      	bne.n	8008182 <xQueueGenericSend+0x6e>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <xQueueGenericSend+0x72>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueGenericSend+0x74>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	623b      	str	r3, [r7, #32]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081a2:	f001 fb3b 	bl	800981c <xTaskGetSchedulerState>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <xQueueGenericSend+0x9e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <xQueueGenericSend+0xa2>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e000      	b.n	80081b8 <xQueueGenericSend+0xa4>
 80081b6:	2300      	movs	r3, #0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	61fb      	str	r3, [r7, #28]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081d2:	f002 f87f 	bl	800a2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <xQueueGenericSend+0xd4>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d129      	bne.n	800823c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ee:	f000 fa07 	bl	8008600 <prvCopyDataToQueue>
 80081f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d010      	beq.n	800821e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	4618      	mov	r0, r3
 8008202:	f001 f94d 	bl	80094a0 <xTaskRemoveFromEventList>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800820c:	4b3f      	ldr	r3, [pc, #252]	; (800830c <xQueueGenericSend+0x1f8>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	e00a      	b.n	8008234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b39      	ldr	r3, [pc, #228]	; (800830c <xQueueGenericSend+0x1f8>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008234:	f002 f87e 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 8008238:	2301      	movs	r3, #1
 800823a:	e063      	b.n	8008304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008242:	f002 f877 	bl	800a334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008246:	2300      	movs	r3, #0
 8008248:	e05c      	b.n	8008304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f987 	bl	8009568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800825a:	2301      	movs	r3, #1
 800825c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800825e:	f002 f869 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008262:	f000 feed 	bl	8009040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008266:	f002 f835 	bl	800a2d4 <vPortEnterCritical>
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008270:	b25b      	sxtb	r3, r3
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d103      	bne.n	8008280 <xQueueGenericSend+0x16c>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008286:	b25b      	sxtb	r3, r3
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d103      	bne.n	8008296 <xQueueGenericSend+0x182>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008296:	f002 f84d 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800829a:	1d3a      	adds	r2, r7, #4
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 f976 	bl	8009594 <xTaskCheckForTimeOut>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d124      	bne.n	80082f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b0:	f000 fa9e 	bl	80087f0 <prvIsQueueFull>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	3310      	adds	r3, #16
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 f89c 	bl	8009400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ca:	f000 fa29 	bl	8008720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082ce:	f000 fec5 	bl	800905c <xTaskResumeAll>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af7c 	bne.w	80081d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <xQueueGenericSend+0x1f8>)
 80082dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	e772      	b.n	80081d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ee:	f000 fa17 	bl	8008720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082f2:	f000 feb3 	bl	800905c <xTaskResumeAll>
 80082f6:	e76c      	b.n	80081d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082fa:	f000 fa11 	bl	8008720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082fe:	f000 fead 	bl	800905c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008304:	4618      	mov	r0, r3
 8008306:	3738      	adds	r7, #56	; 0x38
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	e000ed04 	.word	0xe000ed04

08008310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08e      	sub	sp, #56	; 0x38
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <xQueueGenericSendFromISR+0x3c>
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <xQueueGenericSendFromISR+0x40>
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <xQueueGenericSendFromISR+0x42>
 8008350:	2300      	movs	r3, #0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	623b      	str	r3, [r7, #32]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d103      	bne.n	800837a <xQueueGenericSendFromISR+0x6a>
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <xQueueGenericSendFromISR+0x6e>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericSendFromISR+0x70>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800839a:	f002 f87d 	bl	800a498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800839e:	f3ef 8211 	mrs	r2, BASEPRI
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	61ba      	str	r2, [r7, #24]
 80083b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <xQueueGenericSendFromISR+0xbc>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d12c      	bne.n	8008426 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083dc:	f000 f910 	bl	8008600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d112      	bne.n	8008410 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	3324      	adds	r3, #36	; 0x24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 f852 	bl	80094a0 <xTaskRemoveFromEventList>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00e      	beq.n	8008420 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e007      	b.n	8008420 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008414:	3301      	adds	r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	b25a      	sxtb	r2, r3
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008424:	e001      	b.n	800842a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008426:	2300      	movs	r3, #0
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008438:	4618      	mov	r0, r3
 800843a:	3738      	adds	r7, #56	; 0x38
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08c      	sub	sp, #48	; 0x30
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <xQueueReceive+0x30>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	623b      	str	r3, [r7, #32]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <xQueueReceive+0x3e>
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <xQueueReceive+0x42>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <xQueueReceive+0x44>
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xQueueReceive+0x5e>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	61fb      	str	r3, [r7, #28]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800849e:	f001 f9bd 	bl	800981c <xTaskGetSchedulerState>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <xQueueReceive+0x6e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <xQueueReceive+0x72>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <xQueueReceive+0x74>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xQueueReceive+0x8e>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61bb      	str	r3, [r7, #24]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ce:	f001 ff01 	bl	800a2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01f      	beq.n	800851e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f000 f8f7 	bl	80086d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00f      	beq.n	8008516 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	3310      	adds	r3, #16
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 ffd0 	bl	80094a0 <xTaskRemoveFromEventList>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008506:	4b3d      	ldr	r3, [pc, #244]	; (80085fc <xQueueReceive+0x1bc>)
 8008508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008516:	f001 ff0d 	bl	800a334 <vPortExitCritical>
				return pdPASS;
 800851a:	2301      	movs	r3, #1
 800851c:	e069      	b.n	80085f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d103      	bne.n	800852c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008524:	f001 ff06 	bl	800a334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008528:	2300      	movs	r3, #0
 800852a:	e062      	b.n	80085f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008532:	f107 0310 	add.w	r3, r7, #16
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f816 	bl	8009568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008540:	f001 fef8 	bl	800a334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008544:	f000 fd7c 	bl	8009040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008548:	f001 fec4 	bl	800a2d4 <vPortEnterCritical>
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008552:	b25b      	sxtb	r3, r3
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d103      	bne.n	8008562 <xQueueReceive+0x122>
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008568:	b25b      	sxtb	r3, r3
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d103      	bne.n	8008578 <xQueueReceive+0x138>
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008578:	f001 fedc 	bl	800a334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800857c:	1d3a      	adds	r2, r7, #4
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f805 	bl	8009594 <xTaskCheckForTimeOut>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d123      	bne.n	80085d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008592:	f000 f917 	bl	80087c4 <prvIsQueueEmpty>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 ff2b 	bl	8009400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ac:	f000 f8b8 	bl	8008720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085b0:	f000 fd54 	bl	800905c <xTaskResumeAll>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d189      	bne.n	80084ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <xQueueReceive+0x1bc>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	e780      	b.n	80084ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ce:	f000 f8a7 	bl	8008720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085d2:	f000 fd43 	bl	800905c <xTaskResumeAll>
 80085d6:	e77a      	b.n	80084ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085da:	f000 f8a1 	bl	8008720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085de:	f000 fd3d 	bl	800905c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e4:	f000 f8ee 	bl	80087c4 <prvIsQueueEmpty>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f43f af6f 	beq.w	80084ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3730      	adds	r7, #48	; 0x30
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14d      	bne.n	80086c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f914 	bl	8009858 <xTaskPriorityDisinherit>
 8008630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	e043      	b.n	80086c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d119      	bne.n	8008674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6858      	ldr	r0, [r3, #4]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	461a      	mov	r2, r3
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	f002 fe84 	bl	800b358 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	429a      	cmp	r2, r3
 8008668:	d32b      	bcc.n	80086c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	e026      	b.n	80086c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68d8      	ldr	r0, [r3, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	461a      	mov	r2, r3
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	f002 fe6a 	bl	800b358 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	425b      	negs	r3, r3
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d207      	bcs.n	80086b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	425b      	negs	r3, r3
 80086aa:	441a      	add	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d105      	bne.n	80086c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3b01      	subs	r3, #1
 80086c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d018      	beq.n	8008718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d303      	bcc.n	8008708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68d9      	ldr	r1, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	461a      	mov	r2, r3
 8008712:	6838      	ldr	r0, [r7, #0]
 8008714:	f002 fe20 	bl	800b358 <memcpy>
	}
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008728:	f001 fdd4 	bl	800a2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008734:	e011      	b.n	800875a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d012      	beq.n	8008764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3324      	adds	r3, #36	; 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f000 feac 	bl	80094a0 <xTaskRemoveFromEventList>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800874e:	f000 ff83 	bl	8009658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3b01      	subs	r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800875a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	dce9      	bgt.n	8008736 <prvUnlockQueue+0x16>
 8008762:	e000      	b.n	8008766 <prvUnlockQueue+0x46>
					break;
 8008764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	22ff      	movs	r2, #255	; 0xff
 800876a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800876e:	f001 fde1 	bl	800a334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008772:	f001 fdaf 	bl	800a2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800877c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800877e:	e011      	b.n	80087a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d012      	beq.n	80087ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3310      	adds	r3, #16
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fe87 	bl	80094a0 <xTaskRemoveFromEventList>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008798:	f000 ff5e 	bl	8009658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	3b01      	subs	r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dce9      	bgt.n	8008780 <prvUnlockQueue+0x60>
 80087ac:	e000      	b.n	80087b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	22ff      	movs	r2, #255	; 0xff
 80087b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087b8:	f001 fdbc 	bl	800a334 <vPortExitCritical>
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087cc:	f001 fd82 	bl	800a2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e001      	b.n	80087e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087e2:	f001 fda7 	bl	800a334 <vPortExitCritical>

	return xReturn;
 80087e6:	68fb      	ldr	r3, [r7, #12]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f8:	f001 fd6c 	bl	800a2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008804:	429a      	cmp	r2, r3
 8008806:	d102      	bne.n	800880e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e001      	b.n	8008812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008812:	f001 fd8f 	bl	800a334 <vPortExitCritical>

	return xReturn;
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e014      	b.n	800885a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <vQueueAddToRegistry+0x50>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800883c:	490c      	ldr	r1, [pc, #48]	; (8008870 <vQueueAddToRegistry+0x50>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008846:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <vQueueAddToRegistry+0x50>)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	4413      	add	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008852:	e006      	b.n	8008862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b07      	cmp	r3, #7
 800885e:	d9e7      	bls.n	8008830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	20004ce8 	.word	0x20004ce8

08008874 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008884:	f001 fd26 	bl	800a2d4 <vPortEnterCritical>
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888e:	b25b      	sxtb	r3, r3
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <vQueueWaitForMessageRestricted+0x2a>
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d103      	bne.n	80088b4 <vQueueWaitForMessageRestricted+0x40>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b4:	f001 fd3e 	bl	800a334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	3324      	adds	r3, #36	; 0x24
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fdbd 	bl	8009448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7ff ff26 	bl	8008720 <prvUnlockQueue>
	}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	; 0x38
 80088e0:	af04      	add	r7, sp, #16
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xTaskCreateStatic+0x2a>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xTaskCreateStatic+0x46>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	61fb      	str	r3, [r7, #28]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008922:	235c      	movs	r3, #92	; 0x5c
 8008924:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b5c      	cmp	r3, #92	; 0x5c
 800892a:	d00a      	beq.n	8008942 <xTaskCreateStatic+0x66>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	61bb      	str	r3, [r7, #24]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008942:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01e      	beq.n	8008988 <xTaskCreateStatic+0xac>
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01b      	beq.n	8008988 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008958:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	2202      	movs	r2, #2
 800895e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008962:	2300      	movs	r3, #0
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	f107 0314 	add.w	r3, r7, #20
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f850 	bl	8008a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008982:	f000 f8dd 	bl	8008b40 <prvAddNewTaskToReadyList>
 8008986:	e001      	b.n	800898c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800898c:	697b      	ldr	r3, [r7, #20]
	}
 800898e:	4618      	mov	r0, r3
 8008990:	3728      	adds	r7, #40	; 0x28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008996:	b580      	push	{r7, lr}
 8008998:	b08c      	sub	sp, #48	; 0x30
 800899a:	af04      	add	r7, sp, #16
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 fdb4 	bl	800a518 <pvPortMalloc>
 80089b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089b8:	205c      	movs	r0, #92	; 0x5c
 80089ba:	f001 fdad 	bl	800a518 <pvPortMalloc>
 80089be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	631a      	str	r2, [r3, #48]	; 0x30
 80089cc:	e005      	b.n	80089da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089ce:	6978      	ldr	r0, [r7, #20]
 80089d0:	f001 fe66 	bl	800a6a0 <vPortFree>
 80089d4:	e001      	b.n	80089da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d017      	beq.n	8008a10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	2300      	movs	r3, #0
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 f80e 	bl	8008a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a04:	69f8      	ldr	r0, [r7, #28]
 8008a06:	f000 f89b 	bl	8008b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e002      	b.n	8008a16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a10:	f04f 33ff 	mov.w	r3, #4294967295
 8008a14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a16:	69bb      	ldr	r3, [r7, #24]
	}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	461a      	mov	r2, r3
 8008a38:	21a5      	movs	r1, #165	; 0xa5
 8008a3a:	f002 fc9b 	bl	800b374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f023 0307 	bic.w	r3, r3, #7
 8008a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	617b      	str	r3, [r7, #20]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01f      	beq.n	8008abe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	e012      	b.n	8008aaa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	7819      	ldrb	r1, [r3, #0]
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	3334      	adds	r3, #52	; 0x34
 8008a94:	460a      	mov	r2, r1
 8008a96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2b0f      	cmp	r3, #15
 8008aae:	d9e9      	bls.n	8008a84 <prvInitialiseNewTask+0x64>
 8008ab0:	e000      	b.n	8008ab4 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ab2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008abc:	e003      	b.n	8008ac6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	2b37      	cmp	r3, #55	; 0x37
 8008aca:	d901      	bls.n	8008ad0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008acc:	2337      	movs	r3, #55	; 0x37
 8008ace:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ada:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	2200      	movs	r2, #0
 8008ae0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff f97c 	bl	8007de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	3318      	adds	r3, #24
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff f977 	bl	8007de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	2200      	movs	r2, #0
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	68f9      	ldr	r1, [r7, #12]
 8008b1e:	69b8      	ldr	r0, [r7, #24]
 8008b20:	f001 faaa 	bl	800a078 <pxPortInitialiseStack>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b36:	bf00      	nop
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b48:	f001 fbc4 	bl	800a2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	; (8008c04 <prvAddNewTaskToReadyList+0xc4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a2c      	ldr	r2, [pc, #176]	; (8008c04 <prvAddNewTaskToReadyList+0xc4>)
 8008b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b56:	4b2c      	ldr	r3, [pc, #176]	; (8008c08 <prvAddNewTaskToReadyList+0xc8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d109      	bne.n	8008b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b5e:	4a2a      	ldr	r2, [pc, #168]	; (8008c08 <prvAddNewTaskToReadyList+0xc8>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <prvAddNewTaskToReadyList+0xc4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d110      	bne.n	8008b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b6c:	f000 fd98 	bl	80096a0 <prvInitialiseTaskLists>
 8008b70:	e00d      	b.n	8008b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b72:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <prvAddNewTaskToReadyList+0xcc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <prvAddNewTaskToReadyList+0xc8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d802      	bhi.n	8008b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b88:	4a1f      	ldr	r2, [pc, #124]	; (8008c08 <prvAddNewTaskToReadyList+0xc8>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b8e:	4b20      	ldr	r3, [pc, #128]	; (8008c10 <prvAddNewTaskToReadyList+0xd0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <prvAddNewTaskToReadyList+0xd0>)
 8008b96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b98:	4b1d      	ldr	r3, [pc, #116]	; (8008c10 <prvAddNewTaskToReadyList+0xd0>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4b1b      	ldr	r3, [pc, #108]	; (8008c14 <prvAddNewTaskToReadyList+0xd4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d903      	bls.n	8008bb4 <prvAddNewTaskToReadyList+0x74>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	4a18      	ldr	r2, [pc, #96]	; (8008c14 <prvAddNewTaskToReadyList+0xd4>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <prvAddNewTaskToReadyList+0xd8>)
 8008bc2:	441a      	add	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7ff f917 	bl	8007dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bd0:	f001 fbb0 	bl	800a334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bd4:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <prvAddNewTaskToReadyList+0xcc>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00e      	beq.n	8008bfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <prvAddNewTaskToReadyList+0xc8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d207      	bcs.n	8008bfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <prvAddNewTaskToReadyList+0xdc>)
 8008bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000da4 	.word	0x20000da4
 8008c08:	200008d0 	.word	0x200008d0
 8008c0c:	20000db0 	.word	0x20000db0
 8008c10:	20000dc0 	.word	0x20000dc0
 8008c14:	20000dac 	.word	0x20000dac
 8008c18:	200008d4 	.word	0x200008d4
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008c28:	f001 fb54 	bl	800a2d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <vTaskDelete+0x18>
 8008c32:	4b2c      	ldr	r3, [pc, #176]	; (8008ce4 <vTaskDelete+0xc4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	e000      	b.n	8008c3a <vTaskDelete+0x1a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff f939 	bl	8007eb8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3318      	adds	r3, #24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff f930 	bl	8007eb8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008c58:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <vTaskDelete+0xc8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a22      	ldr	r2, [pc, #136]	; (8008ce8 <vTaskDelete+0xc8>)
 8008c60:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008c62:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <vTaskDelete+0xc4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d10b      	bne.n	8008c84 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4619      	mov	r1, r3
 8008c72:	481e      	ldr	r0, [pc, #120]	; (8008cec <vTaskDelete+0xcc>)
 8008c74:	f7ff f8c3 	bl	8007dfe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008c78:	4b1d      	ldr	r3, [pc, #116]	; (8008cf0 <vTaskDelete+0xd0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	4a1c      	ldr	r2, [pc, #112]	; (8008cf0 <vTaskDelete+0xd0>)
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e009      	b.n	8008c98 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008c84:	4b1b      	ldr	r3, [pc, #108]	; (8008cf4 <vTaskDelete+0xd4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	4a1a      	ldr	r2, [pc, #104]	; (8008cf4 <vTaskDelete+0xd4>)
 8008c8c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fd74 	bl	800977c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008c94:	f000 fda2 	bl	80097dc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008c98:	f001 fb4c 	bl	800a334 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008c9c:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <vTaskDelete+0xd8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01b      	beq.n	8008cdc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <vTaskDelete+0xc4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d116      	bne.n	8008cdc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008cae:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <vTaskDelete+0xdc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <vTaskDelete+0xac>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	60bb      	str	r3, [r7, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	e7fe      	b.n	8008cca <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <vTaskDelete+0xe0>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200008d0 	.word	0x200008d0
 8008ce8:	20000dc0 	.word	0x20000dc0
 8008cec:	20000d78 	.word	0x20000d78
 8008cf0:	20000d8c 	.word	0x20000d8c
 8008cf4:	20000da4 	.word	0x20000da4
 8008cf8:	20000db0 	.word	0x20000db0
 8008cfc:	20000dcc 	.word	0x20000dcc
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d017      	beq.n	8008d46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <vTaskDelay+0x60>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <vTaskDelay+0x30>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	60bb      	str	r3, [r7, #8]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d34:	f000 f984 	bl	8009040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fdfa 	bl	8009934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d40:	f000 f98c 	bl	800905c <xTaskResumeAll>
 8008d44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <vTaskDelay+0x64>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000dcc 	.word	0x20000dcc
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <eTaskGetState+0x28>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	60bb      	str	r3, [r7, #8]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8008d94:	4b23      	ldr	r3, [pc, #140]	; (8008e24 <eTaskGetState+0xb8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d102      	bne.n	8008da4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	e03a      	b.n	8008e1a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8008da4:	f001 fa96 	bl	800a2d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008dae:	4b1e      	ldr	r3, [pc, #120]	; (8008e28 <eTaskGetState+0xbc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008db4:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <eTaskGetState+0xc0>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008dba:	f001 fabb 	bl	800a334 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d003      	beq.n	8008dce <eTaskGetState+0x62>
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d102      	bne.n	8008dd4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008dce:	2302      	movs	r3, #2
 8008dd0:	77fb      	strb	r3, [r7, #31]
 8008dd2:	e022      	b.n	8008e1a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <eTaskGetState+0xc4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d112      	bne.n	8008e02 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d102      	bne.n	8008df6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8008df0:	2302      	movs	r3, #2
 8008df2:	77fb      	strb	r3, [r7, #31]
 8008df4:	e011      	b.n	8008e1a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8008df6:	2303      	movs	r3, #3
 8008df8:	77fb      	strb	r3, [r7, #31]
 8008dfa:	e00e      	b.n	8008e1a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	e00b      	b.n	8008e1a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	4a0b      	ldr	r2, [pc, #44]	; (8008e34 <eTaskGetState+0xc8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d002      	beq.n	8008e10 <eTaskGetState+0xa4>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008e10:	2304      	movs	r3, #4
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e001      	b.n	8008e1a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008e16:	2301      	movs	r3, #1
 8008e18:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008e1a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	200008d0 	.word	0x200008d0
 8008e28:	20000d5c 	.word	0x20000d5c
 8008e2c:	20000d60 	.word	0x20000d60
 8008e30:	20000d90 	.word	0x20000d90
 8008e34:	20000d78 	.word	0x20000d78

08008e38 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b37      	cmp	r3, #55	; 0x37
 8008e4a:	d90a      	bls.n	8008e62 <vTaskPrioritySet+0x2a>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b37      	cmp	r3, #55	; 0x37
 8008e66:	d901      	bls.n	8008e6c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e68:	2337      	movs	r3, #55	; 0x37
 8008e6a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008e6c:	f001 fa32 	bl	800a2d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <vTaskPrioritySet+0x44>
 8008e76:	4b3b      	ldr	r3, [pc, #236]	; (8008f64 <vTaskPrioritySet+0x12c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	e000      	b.n	8008e7e <vTaskPrioritySet+0x46>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e84:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d063      	beq.n	8008f56 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d90d      	bls.n	8008eb2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008e96:	4b33      	ldr	r3, [pc, #204]	; (8008f64 <vTaskPrioritySet+0x12c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d00f      	beq.n	8008ec0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008ea0:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <vTaskPrioritySet+0x12c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d309      	bcc.n	8008ec0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e006      	b.n	8008ec0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8008eb2:	4b2c      	ldr	r3, [pc, #176]	; (8008f64 <vTaskPrioritySet+0x12c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d101      	bne.n	8008ec0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d102      	bne.n	8008ed8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db04      	blt.n	8008ef0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6959      	ldr	r1, [r3, #20]
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a1a      	ldr	r2, [pc, #104]	; (8008f68 <vTaskPrioritySet+0x130>)
 8008f00:	4413      	add	r3, r2
 8008f02:	4299      	cmp	r1, r3
 8008f04:	d11c      	bne.n	8008f40 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe ffd4 	bl	8007eb8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4b15      	ldr	r3, [pc, #84]	; (8008f6c <vTaskPrioritySet+0x134>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d903      	bls.n	8008f24 <vTaskPrioritySet+0xec>
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <vTaskPrioritySet+0x134>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4a0d      	ldr	r2, [pc, #52]	; (8008f68 <vTaskPrioritySet+0x130>)
 8008f32:	441a      	add	r2, r3
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fe ff5f 	bl	8007dfe <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8008f46:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <vTaskPrioritySet+0x138>)
 8008f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8008f56:	f001 f9ed 	bl	800a334 <vPortExitCritical>
	}
 8008f5a:	bf00      	nop
 8008f5c:	3720      	adds	r7, #32
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200008d0 	.word	0x200008d0
 8008f68:	200008d4 	.word	0x200008d4
 8008f6c:	20000dac 	.word	0x20000dac
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f82:	463a      	mov	r2, r7
 8008f84:	1d39      	adds	r1, r7, #4
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fed6 	bl	8007d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	9202      	str	r2, [sp, #8]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	460a      	mov	r2, r1
 8008fa2:	4921      	ldr	r1, [pc, #132]	; (8009028 <vTaskStartScheduler+0xb4>)
 8008fa4:	4821      	ldr	r0, [pc, #132]	; (800902c <vTaskStartScheduler+0xb8>)
 8008fa6:	f7ff fc99 	bl	80088dc <xTaskCreateStatic>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4a20      	ldr	r2, [pc, #128]	; (8009030 <vTaskStartScheduler+0xbc>)
 8008fae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fb0:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <vTaskStartScheduler+0xbc>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e001      	b.n	8008fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d102      	bne.n	8008fce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fc8:	f000 fd08 	bl	80099dc <xTimerCreateTimerTask>
 8008fcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d116      	bne.n	8009002 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	613b      	str	r3, [r7, #16]
}
 8008fe6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fe8:	4b12      	ldr	r3, [pc, #72]	; (8009034 <vTaskStartScheduler+0xc0>)
 8008fea:	f04f 32ff 	mov.w	r2, #4294967295
 8008fee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <vTaskStartScheduler+0xc4>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <vTaskStartScheduler+0xc8>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ffc:	f001 f8c8 	bl	800a190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009000:	e00e      	b.n	8009020 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d10a      	bne.n	8009020 <vTaskStartScheduler+0xac>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	60fb      	str	r3, [r7, #12]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <vTaskStartScheduler+0xaa>
}
 8009020:	bf00      	nop
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	0800c7d8 	.word	0x0800c7d8
 800902c:	08009671 	.word	0x08009671
 8009030:	20000dc8 	.word	0x20000dc8
 8009034:	20000dc4 	.word	0x20000dc4
 8009038:	20000db0 	.word	0x20000db0
 800903c:	20000da8 	.word	0x20000da8

08009040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009044:	4b04      	ldr	r3, [pc, #16]	; (8009058 <vTaskSuspendAll+0x18>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	4a03      	ldr	r2, [pc, #12]	; (8009058 <vTaskSuspendAll+0x18>)
 800904c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800904e:	bf00      	nop
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20000dcc 	.word	0x20000dcc

0800905c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009066:	2300      	movs	r3, #0
 8009068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800906a:	4b42      	ldr	r3, [pc, #264]	; (8009174 <xTaskResumeAll+0x118>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <xTaskResumeAll+0x2c>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	603b      	str	r3, [r7, #0]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009088:	f001 f924 	bl	800a2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800908c:	4b39      	ldr	r3, [pc, #228]	; (8009174 <xTaskResumeAll+0x118>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3b01      	subs	r3, #1
 8009092:	4a38      	ldr	r2, [pc, #224]	; (8009174 <xTaskResumeAll+0x118>)
 8009094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009096:	4b37      	ldr	r3, [pc, #220]	; (8009174 <xTaskResumeAll+0x118>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d162      	bne.n	8009164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800909e:	4b36      	ldr	r3, [pc, #216]	; (8009178 <xTaskResumeAll+0x11c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d05e      	beq.n	8009164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090a6:	e02f      	b.n	8009108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	4b34      	ldr	r3, [pc, #208]	; (800917c <xTaskResumeAll+0x120>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3318      	adds	r3, #24
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe feff 	bl	8007eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fefa 	bl	8007eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	4b2d      	ldr	r3, [pc, #180]	; (8009180 <xTaskResumeAll+0x124>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d903      	bls.n	80090d8 <xTaskResumeAll+0x7c>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	4a2a      	ldr	r2, [pc, #168]	; (8009180 <xTaskResumeAll+0x124>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a27      	ldr	r2, [pc, #156]	; (8009184 <xTaskResumeAll+0x128>)
 80090e6:	441a      	add	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe fe85 	bl	8007dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4b23      	ldr	r3, [pc, #140]	; (8009188 <xTaskResumeAll+0x12c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	429a      	cmp	r2, r3
 8009100:	d302      	bcc.n	8009108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009102:	4b22      	ldr	r3, [pc, #136]	; (800918c <xTaskResumeAll+0x130>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009108:	4b1c      	ldr	r3, [pc, #112]	; (800917c <xTaskResumeAll+0x120>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1cb      	bne.n	80090a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009116:	f000 fb61 	bl	80097dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800911a:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <xTaskResumeAll+0x134>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009126:	f000 f853 	bl	80091d0 <xTaskIncrementTick>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <xTaskResumeAll+0x130>)
 8009132:	2201      	movs	r2, #1
 8009134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3b01      	subs	r3, #1
 800913a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1f1      	bne.n	8009126 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009142:	4b13      	ldr	r3, [pc, #76]	; (8009190 <xTaskResumeAll+0x134>)
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009148:	4b10      	ldr	r3, [pc, #64]	; (800918c <xTaskResumeAll+0x130>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d009      	beq.n	8009164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009154:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <xTaskResumeAll+0x138>)
 8009156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009164:	f001 f8e6 	bl	800a334 <vPortExitCritical>

	return xAlreadyYielded;
 8009168:	68bb      	ldr	r3, [r7, #8]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000dcc 	.word	0x20000dcc
 8009178:	20000da4 	.word	0x20000da4
 800917c:	20000d64 	.word	0x20000d64
 8009180:	20000dac 	.word	0x20000dac
 8009184:	200008d4 	.word	0x200008d4
 8009188:	200008d0 	.word	0x200008d0
 800918c:	20000db8 	.word	0x20000db8
 8009190:	20000db4 	.word	0x20000db4
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <xTaskGetTickCount+0x1c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091a4:	687b      	ldr	r3, [r7, #4]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20000da8 	.word	0x20000da8

080091b8 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <uxTaskGetNumberOfTasks+0x14>)
 80091be:	681b      	ldr	r3, [r3, #0]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000da4 	.word	0x20000da4

080091d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091da:	4b4f      	ldr	r3, [pc, #316]	; (8009318 <xTaskIncrementTick+0x148>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 8089 	bne.w	80092f6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091e4:	4b4d      	ldr	r3, [pc, #308]	; (800931c <xTaskIncrementTick+0x14c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091ec:	4a4b      	ldr	r2, [pc, #300]	; (800931c <xTaskIncrementTick+0x14c>)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d120      	bne.n	800923a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091f8:	4b49      	ldr	r3, [pc, #292]	; (8009320 <xTaskIncrementTick+0x150>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <xTaskIncrementTick+0x48>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	603b      	str	r3, [r7, #0]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <xTaskIncrementTick+0x46>
 8009218:	4b41      	ldr	r3, [pc, #260]	; (8009320 <xTaskIncrementTick+0x150>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <xTaskIncrementTick+0x154>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a3f      	ldr	r2, [pc, #252]	; (8009320 <xTaskIncrementTick+0x150>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4a3f      	ldr	r2, [pc, #252]	; (8009324 <xTaskIncrementTick+0x154>)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b3e      	ldr	r3, [pc, #248]	; (8009328 <xTaskIncrementTick+0x158>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a3d      	ldr	r2, [pc, #244]	; (8009328 <xTaskIncrementTick+0x158>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	f000 fad1 	bl	80097dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800923a:	4b3c      	ldr	r3, [pc, #240]	; (800932c <xTaskIncrementTick+0x15c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d349      	bcc.n	80092d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009244:	4b36      	ldr	r3, [pc, #216]	; (8009320 <xTaskIncrementTick+0x150>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924e:	4b37      	ldr	r3, [pc, #220]	; (800932c <xTaskIncrementTick+0x15c>)
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	601a      	str	r2, [r3, #0]
					break;
 8009256:	e03f      	b.n	80092d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009258:	4b31      	ldr	r3, [pc, #196]	; (8009320 <xTaskIncrementTick+0x150>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d203      	bcs.n	8009278 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009270:	4a2e      	ldr	r2, [pc, #184]	; (800932c <xTaskIncrementTick+0x15c>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009276:	e02f      	b.n	80092d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fe1b 	bl	8007eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	3318      	adds	r3, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fe12 	bl	8007eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <xTaskIncrementTick+0x160>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d903      	bls.n	80092a8 <xTaskIncrementTick+0xd8>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	4a22      	ldr	r2, [pc, #136]	; (8009330 <xTaskIncrementTick+0x160>)
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <xTaskIncrementTick+0x164>)
 80092b6:	441a      	add	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fd9d 	bl	8007dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <xTaskIncrementTick+0x168>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d3b8      	bcc.n	8009244 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d6:	e7b5      	b.n	8009244 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <xTaskIncrementTick+0x168>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092de:	4915      	ldr	r1, [pc, #84]	; (8009334 <xTaskIncrementTick+0x164>)
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d907      	bls.n	8009300 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	e004      	b.n	8009300 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <xTaskIncrementTick+0x16c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a0f      	ldr	r2, [pc, #60]	; (800933c <xTaskIncrementTick+0x16c>)
 80092fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <xTaskIncrementTick+0x170>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800930c:	697b      	ldr	r3, [r7, #20]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000dcc 	.word	0x20000dcc
 800931c:	20000da8 	.word	0x20000da8
 8009320:	20000d5c 	.word	0x20000d5c
 8009324:	20000d60 	.word	0x20000d60
 8009328:	20000dbc 	.word	0x20000dbc
 800932c:	20000dc4 	.word	0x20000dc4
 8009330:	20000dac 	.word	0x20000dac
 8009334:	200008d4 	.word	0x200008d4
 8009338:	200008d0 	.word	0x200008d0
 800933c:	20000db4 	.word	0x20000db4
 8009340:	20000db8 	.word	0x20000db8

08009344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800934a:	4b28      	ldr	r3, [pc, #160]	; (80093ec <vTaskSwitchContext+0xa8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009352:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <vTaskSwitchContext+0xac>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009358:	e041      	b.n	80093de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800935a:	4b25      	ldr	r3, [pc, #148]	; (80093f0 <vTaskSwitchContext+0xac>)
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009360:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <vTaskSwitchContext+0xb0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e010      	b.n	800938a <vTaskSwitchContext+0x46>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <vTaskSwitchContext+0x40>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	607b      	str	r3, [r7, #4]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <vTaskSwitchContext+0x3e>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3b01      	subs	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	491b      	ldr	r1, [pc, #108]	; (80093f8 <vTaskSwitchContext+0xb4>)
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0e4      	beq.n	8009368 <vTaskSwitchContext+0x24>
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <vTaskSwitchContext+0xb4>)
 80093aa:	4413      	add	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3308      	adds	r3, #8
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d104      	bne.n	80093ce <vTaskSwitchContext+0x8a>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <vTaskSwitchContext+0xb8>)
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	4a06      	ldr	r2, [pc, #24]	; (80093f4 <vTaskSwitchContext+0xb0>)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6013      	str	r3, [r2, #0]
}
 80093de:	bf00      	nop
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	20000dcc 	.word	0x20000dcc
 80093f0:	20000db8 	.word	0x20000db8
 80093f4:	20000dac 	.word	0x20000dac
 80093f8:	200008d4 	.word	0x200008d4
 80093fc:	200008d0 	.word	0x200008d0

08009400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60fb      	str	r3, [r7, #12]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009426:	4b07      	ldr	r3, [pc, #28]	; (8009444 <vTaskPlaceOnEventList+0x44>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3318      	adds	r3, #24
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fe fd09 	bl	8007e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009434:	2101      	movs	r1, #1
 8009436:	6838      	ldr	r0, [r7, #0]
 8009438:	f000 fa7c 	bl	8009934 <prvAddCurrentTaskToDelayedList>
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200008d0 	.word	0x200008d0

08009448 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	617b      	str	r3, [r7, #20]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vTaskPlaceOnEventListRestricted+0x54>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3318      	adds	r3, #24
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7fe fcc0 	bl	8007dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f000 fa51 	bl	8009934 <prvAddCurrentTaskToDelayedList>
	}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200008d0 	.word	0x200008d0

080094a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3318      	adds	r3, #24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fcf1 	bl	8007eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d6:	4b1e      	ldr	r3, [pc, #120]	; (8009550 <xTaskRemoveFromEventList+0xb0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d11d      	bne.n	800951a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fce8 	bl	8007eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4b19      	ldr	r3, [pc, #100]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d903      	bls.n	80094fc <xTaskRemoveFromEventList+0x5c>
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a16      	ldr	r2, [pc, #88]	; (8009554 <xTaskRemoveFromEventList+0xb4>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4a13      	ldr	r2, [pc, #76]	; (8009558 <xTaskRemoveFromEventList+0xb8>)
 800950a:	441a      	add	r2, r3
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe fc73 	bl	8007dfe <vListInsertEnd>
 8009518:	e005      	b.n	8009526 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3318      	adds	r3, #24
 800951e:	4619      	mov	r1, r3
 8009520:	480e      	ldr	r0, [pc, #56]	; (800955c <xTaskRemoveFromEventList+0xbc>)
 8009522:	f7fe fc6c 	bl	8007dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4b0d      	ldr	r3, [pc, #52]	; (8009560 <xTaskRemoveFromEventList+0xc0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	d905      	bls.n	8009540 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <xTaskRemoveFromEventList+0xc4>)
 800953a:	2201      	movs	r2, #1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e001      	b.n	8009544 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009544:	697b      	ldr	r3, [r7, #20]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000dcc 	.word	0x20000dcc
 8009554:	20000dac 	.word	0x20000dac
 8009558:	200008d4 	.word	0x200008d4
 800955c:	20000d64 	.word	0x20000d64
 8009560:	200008d0 	.word	0x200008d0
 8009564:	20000db8 	.word	0x20000db8

08009568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <vTaskInternalSetTimeOutState+0x24>)
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <vTaskInternalSetTimeOutState+0x28>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000dbc 	.word	0x20000dbc
 8009590:	20000da8 	.word	0x20000da8

08009594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	613b      	str	r3, [r7, #16]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095d6:	f000 fe7d 	bl	800a2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095da:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <xTaskCheckForTimeOut+0xbc>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d102      	bne.n	80095fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	61fb      	str	r3, [r7, #28]
 80095f8:	e023      	b.n	8009642 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b15      	ldr	r3, [pc, #84]	; (8009654 <xTaskCheckForTimeOut+0xc0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d007      	beq.n	8009616 <xTaskCheckForTimeOut+0x82>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	429a      	cmp	r2, r3
 800960e:	d302      	bcc.n	8009616 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e015      	b.n	8009642 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	429a      	cmp	r2, r3
 800961e:	d20b      	bcs.n	8009638 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff ff9b 	bl	8009568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	e004      	b.n	8009642 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800963e:	2301      	movs	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009642:	f000 fe77 	bl	800a334 <vPortExitCritical>

	return xReturn;
 8009646:	69fb      	ldr	r3, [r7, #28]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000da8 	.word	0x20000da8
 8009654:	20000dbc 	.word	0x20000dbc

08009658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800965c:	4b03      	ldr	r3, [pc, #12]	; (800966c <vTaskMissedYield+0x14>)
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
}
 8009662:	bf00      	nop
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20000db8 	.word	0x20000db8

08009670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009678:	f000 f852 	bl	8009720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800967c:	4b06      	ldr	r3, [pc, #24]	; (8009698 <prvIdleTask+0x28>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d9f9      	bls.n	8009678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <prvIdleTask+0x2c>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009694:	e7f0      	b.n	8009678 <prvIdleTask+0x8>
 8009696:	bf00      	nop
 8009698:	200008d4 	.word	0x200008d4
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	e00c      	b.n	80096c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4a12      	ldr	r2, [pc, #72]	; (8009700 <prvInitialiseTaskLists+0x60>)
 80096b8:	4413      	add	r3, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fb72 	bl	8007da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3301      	adds	r3, #1
 80096c4:	607b      	str	r3, [r7, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b37      	cmp	r3, #55	; 0x37
 80096ca:	d9ef      	bls.n	80096ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096cc:	480d      	ldr	r0, [pc, #52]	; (8009704 <prvInitialiseTaskLists+0x64>)
 80096ce:	f7fe fb69 	bl	8007da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096d2:	480d      	ldr	r0, [pc, #52]	; (8009708 <prvInitialiseTaskLists+0x68>)
 80096d4:	f7fe fb66 	bl	8007da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096d8:	480c      	ldr	r0, [pc, #48]	; (800970c <prvInitialiseTaskLists+0x6c>)
 80096da:	f7fe fb63 	bl	8007da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096de:	480c      	ldr	r0, [pc, #48]	; (8009710 <prvInitialiseTaskLists+0x70>)
 80096e0:	f7fe fb60 	bl	8007da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096e4:	480b      	ldr	r0, [pc, #44]	; (8009714 <prvInitialiseTaskLists+0x74>)
 80096e6:	f7fe fb5d 	bl	8007da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ea:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <prvInitialiseTaskLists+0x78>)
 80096ec:	4a05      	ldr	r2, [pc, #20]	; (8009704 <prvInitialiseTaskLists+0x64>)
 80096ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <prvInitialiseTaskLists+0x7c>)
 80096f2:	4a05      	ldr	r2, [pc, #20]	; (8009708 <prvInitialiseTaskLists+0x68>)
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	200008d4 	.word	0x200008d4
 8009704:	20000d34 	.word	0x20000d34
 8009708:	20000d48 	.word	0x20000d48
 800970c:	20000d64 	.word	0x20000d64
 8009710:	20000d78 	.word	0x20000d78
 8009714:	20000d90 	.word	0x20000d90
 8009718:	20000d5c 	.word	0x20000d5c
 800971c:	20000d60 	.word	0x20000d60

08009720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009726:	e019      	b.n	800975c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009728:	f000 fdd4 	bl	800a2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800972c:	4b10      	ldr	r3, [pc, #64]	; (8009770 <prvCheckTasksWaitingTermination+0x50>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fbbd 	bl	8007eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <prvCheckTasksWaitingTermination+0x54>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3b01      	subs	r3, #1
 8009744:	4a0b      	ldr	r2, [pc, #44]	; (8009774 <prvCheckTasksWaitingTermination+0x54>)
 8009746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009748:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <prvCheckTasksWaitingTermination+0x58>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3b01      	subs	r3, #1
 800974e:	4a0a      	ldr	r2, [pc, #40]	; (8009778 <prvCheckTasksWaitingTermination+0x58>)
 8009750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009752:	f000 fdef 	bl	800a334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f810 	bl	800977c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <prvCheckTasksWaitingTermination+0x58>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e1      	bne.n	8009728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000d78 	.word	0x20000d78
 8009774:	20000da4 	.word	0x20000da4
 8009778:	20000d8c 	.word	0x20000d8c

0800977c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800978a:	2b00      	cmp	r3, #0
 800978c:	d108      	bne.n	80097a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	4618      	mov	r0, r3
 8009794:	f000 ff84 	bl	800a6a0 <vPortFree>
				vPortFree( pxTCB );
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 ff81 	bl	800a6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800979e:	e018      	b.n	80097d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d103      	bne.n	80097b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 ff78 	bl	800a6a0 <vPortFree>
	}
 80097b0:	e00f      	b.n	80097d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d00a      	beq.n	80097d2 <prvDeleteTCB+0x56>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60fb      	str	r3, [r7, #12]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <prvDeleteTCB+0x54>
	}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e2:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <prvResetNextTaskUnblockTime+0x38>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <prvResetNextTaskUnblockTime+0x3c>)
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097f4:	e008      	b.n	8009808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <prvResetNextTaskUnblockTime+0x38>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4a04      	ldr	r2, [pc, #16]	; (8009818 <prvResetNextTaskUnblockTime+0x3c>)
 8009806:	6013      	str	r3, [r2, #0]
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	20000d5c 	.word	0x20000d5c
 8009818:	20000dc4 	.word	0x20000dc4

0800981c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009822:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <xTaskGetSchedulerState+0x34>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800982a:	2301      	movs	r3, #1
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	e008      	b.n	8009842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009830:	4b08      	ldr	r3, [pc, #32]	; (8009854 <xTaskGetSchedulerState+0x38>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009838:	2302      	movs	r3, #2
 800983a:	607b      	str	r3, [r7, #4]
 800983c:	e001      	b.n	8009842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800983e:	2300      	movs	r3, #0
 8009840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009842:	687b      	ldr	r3, [r7, #4]
	}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20000db0 	.word	0x20000db0
 8009854:	20000dcc 	.word	0x20000dcc

08009858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d056      	beq.n	800991c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800986e:	4b2e      	ldr	r3, [pc, #184]	; (8009928 <xTaskPriorityDisinherit+0xd0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	429a      	cmp	r2, r3
 8009876:	d00a      	beq.n	800988e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	60fb      	str	r3, [r7, #12]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	60bb      	str	r3, [r7, #8]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b0:	1e5a      	subs	r2, r3, #1
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098be:	429a      	cmp	r2, r3
 80098c0:	d02c      	beq.n	800991c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d128      	bne.n	800991c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe faf2 	bl	8007eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <xTaskPriorityDisinherit+0xd4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d903      	bls.n	80098fc <xTaskPriorityDisinherit+0xa4>
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	4a0c      	ldr	r2, [pc, #48]	; (800992c <xTaskPriorityDisinherit+0xd4>)
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <xTaskPriorityDisinherit+0xd8>)
 800990a:	441a      	add	r2, r3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fe fa73 	bl	8007dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800991c:	697b      	ldr	r3, [r7, #20]
	}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	200008d0 	.word	0x200008d0
 800992c:	20000dac 	.word	0x20000dac
 8009930:	200008d4 	.word	0x200008d4

08009934 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800993e:	4b21      	ldr	r3, [pc, #132]	; (80099c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009944:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3304      	adds	r3, #4
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fab4 	bl	8007eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009956:	d10a      	bne.n	800996e <prvAddCurrentTaskToDelayedList+0x3a>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800995e:	4b1a      	ldr	r3, [pc, #104]	; (80099c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4819      	ldr	r0, [pc, #100]	; (80099cc <prvAddCurrentTaskToDelayedList+0x98>)
 8009968:	f7fe fa49 	bl	8007dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800996c:	e026      	b.n	80099bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	429a      	cmp	r2, r3
 8009984:	d209      	bcs.n	800999a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f7fe fa57 	bl	8007e46 <vListInsert>
}
 8009998:	e010      	b.n	80099bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800999a:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7fe fa4d 	bl	8007e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d202      	bcs.n	80099bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099b6:	4a08      	ldr	r2, [pc, #32]	; (80099d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	6013      	str	r3, [r2, #0]
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000da8 	.word	0x20000da8
 80099c8:	200008d0 	.word	0x200008d0
 80099cc:	20000d90 	.word	0x20000d90
 80099d0:	20000d60 	.word	0x20000d60
 80099d4:	20000d5c 	.word	0x20000d5c
 80099d8:	20000dc4 	.word	0x20000dc4

080099dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08a      	sub	sp, #40	; 0x28
 80099e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099e6:	f000 fb07 	bl	8009ff8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ea:	4b1c      	ldr	r3, [pc, #112]	; (8009a5c <xTimerCreateTimerTask+0x80>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d021      	beq.n	8009a36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099fa:	1d3a      	adds	r2, r7, #4
 80099fc:	f107 0108 	add.w	r1, r7, #8
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe f9b3 	bl	8007d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	9202      	str	r2, [sp, #8]
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	2302      	movs	r3, #2
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	460a      	mov	r2, r1
 8009a1c:	4910      	ldr	r1, [pc, #64]	; (8009a60 <xTimerCreateTimerTask+0x84>)
 8009a1e:	4811      	ldr	r0, [pc, #68]	; (8009a64 <xTimerCreateTimerTask+0x88>)
 8009a20:	f7fe ff5c 	bl	80088dc <xTaskCreateStatic>
 8009a24:	4603      	mov	r3, r0
 8009a26:	4a10      	ldr	r2, [pc, #64]	; (8009a68 <xTimerCreateTimerTask+0x8c>)
 8009a28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <xTimerCreateTimerTask+0x8c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a32:	2301      	movs	r3, #1
 8009a34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	613b      	str	r3, [r7, #16]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a52:	697b      	ldr	r3, [r7, #20]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000e00 	.word	0x20000e00
 8009a60:	0800c7e0 	.word	0x0800c7e0
 8009a64:	08009ba1 	.word	0x08009ba1
 8009a68:	20000e04 	.word	0x20000e04

08009a6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	623b      	str	r3, [r7, #32]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <xTimerGenericCommand+0x98>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d02a      	beq.n	8009af8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	dc18      	bgt.n	8009ae6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ab4:	f7ff feb2 	bl	800981c <xTaskGetSchedulerState>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d109      	bne.n	8009ad2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <xTimerGenericCommand+0x98>)
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	f107 0110 	add.w	r1, r7, #16
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aca:	f7fe fb23 	bl	8008114 <xQueueGenericSend>
 8009ace:	6278      	str	r0, [r7, #36]	; 0x24
 8009ad0:	e012      	b.n	8009af8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <xTimerGenericCommand+0x98>)
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	f107 0110 	add.w	r1, r7, #16
 8009ada:	2300      	movs	r3, #0
 8009adc:	2200      	movs	r2, #0
 8009ade:	f7fe fb19 	bl	8008114 <xQueueGenericSend>
 8009ae2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ae4:	e008      	b.n	8009af8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <xTimerGenericCommand+0x98>)
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f107 0110 	add.w	r1, r7, #16
 8009aee:	2300      	movs	r3, #0
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	f7fe fc0d 	bl	8008310 <xQueueGenericSendFromISR>
 8009af6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3728      	adds	r7, #40	; 0x28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000e00 	.word	0x20000e00

08009b08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b12:	4b22      	ldr	r3, [pc, #136]	; (8009b9c <prvProcessExpiredTimer+0x94>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe f9c9 	bl	8007eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d022      	beq.n	8009b7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	699a      	ldr	r2, [r3, #24]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	18d1      	adds	r1, r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	6978      	ldr	r0, [r7, #20]
 8009b42:	f000 f8d1 	bl	8009ce8 <prvInsertTimerInActiveList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01f      	beq.n	8009b8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	2100      	movs	r1, #0
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7ff ff88 	bl	8009a6c <xTimerGenericCommand>
 8009b5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d113      	bne.n	8009b8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60fb      	str	r3, [r7, #12]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b80:	f023 0301 	bic.w	r3, r3, #1
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	6978      	ldr	r0, [r7, #20]
 8009b92:	4798      	blx	r3
}
 8009b94:	bf00      	nop
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000df8 	.word	0x20000df8

08009ba0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ba8:	f107 0308 	add.w	r3, r7, #8
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 f857 	bl	8009c60 <prvGetNextExpireTime>
 8009bb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 f803 	bl	8009bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bbe:	f000 f8d5 	bl	8009d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bc2:	e7f1      	b.n	8009ba8 <prvTimerTask+0x8>

08009bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bce:	f7ff fa37 	bl	8009040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f866 	bl	8009ca8 <prvSampleTimeNow>
 8009bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d130      	bne.n	8009c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <prvProcessTimerOrBlockTask+0x3c>
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d806      	bhi.n	8009c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bf2:	f7ff fa33 	bl	800905c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bf6:	68f9      	ldr	r1, [r7, #12]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff ff85 	bl	8009b08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bfe:	e024      	b.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c06:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <prvProcessTimerOrBlockTask+0x90>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <prvProcessTimerOrBlockTask+0x50>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e000      	b.n	8009c16 <prvProcessTimerOrBlockTask+0x52>
 8009c14:	2300      	movs	r3, #0
 8009c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c18:	4b0f      	ldr	r3, [pc, #60]	; (8009c58 <prvProcessTimerOrBlockTask+0x94>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7fe fe25 	bl	8008874 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c2a:	f7ff fa17 	bl	800905c <xTaskResumeAll>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <prvProcessTimerOrBlockTask+0x98>)
 8009c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	f3bf 8f6f 	isb	sy
}
 8009c44:	e001      	b.n	8009c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c46:	f7ff fa09 	bl	800905c <xTaskResumeAll>
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20000dfc 	.word	0x20000dfc
 8009c58:	20000e00 	.word	0x20000e00
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <prvGetNextExpireTime+0x44>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <prvGetNextExpireTime+0x16>
 8009c72:	2201      	movs	r2, #1
 8009c74:	e000      	b.n	8009c78 <prvGetNextExpireTime+0x18>
 8009c76:	2200      	movs	r2, #0
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <prvGetNextExpireTime+0x44>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e001      	b.n	8009c94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c94:	68fb      	ldr	r3, [r7, #12]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000df8 	.word	0x20000df8

08009ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cb0:	f7ff fa72 	bl	8009198 <xTaskGetTickCount>
 8009cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <prvSampleTimeNow+0x3c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d205      	bcs.n	8009ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cc0:	f000 f936 	bl	8009f30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cd2:	4a04      	ldr	r2, [pc, #16]	; (8009ce4 <prvSampleTimeNow+0x3c>)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000e08 	.word	0x20000e08

08009ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d812      	bhi.n	8009d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	1ad2      	subs	r2, r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d302      	bcc.n	8009d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	e01b      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <prvInsertTimerInActiveList+0x7c>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fe f88a 	bl	8007e46 <vListInsert>
 8009d32:	e012      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d206      	bcs.n	8009d4a <prvInsertTimerInActiveList+0x62>
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e007      	b.n	8009d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <prvInsertTimerInActiveList+0x80>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3304      	adds	r3, #4
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7fe f876 	bl	8007e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d5a:	697b      	ldr	r3, [r7, #20]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20000dfc 	.word	0x20000dfc
 8009d68:	20000df8 	.word	0x20000df8

08009d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08e      	sub	sp, #56	; 0x38
 8009d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d72:	e0ca      	b.n	8009f0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da18      	bge.n	8009dac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d7a:	1d3b      	adds	r3, r7, #4
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	61fb      	str	r3, [r7, #28]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da2:	6850      	ldr	r0, [r2, #4]
 8009da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da6:	6892      	ldr	r2, [r2, #8]
 8009da8:	4611      	mov	r1, r2
 8009daa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f2c0 80aa 	blt.w	8009f08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe f877 	bl	8007eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dca:	463b      	mov	r3, r7
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff ff6b 	bl	8009ca8 <prvSampleTimeNow>
 8009dd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	f200 8097 	bhi.w	8009f0a <prvProcessReceivedCommands+0x19e>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <prvProcessReceivedCommands+0x78>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009e0d 	.word	0x08009e0d
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e0d 	.word	0x08009e0d
 8009df0:	08009e81 	.word	0x08009e81
 8009df4:	08009e95 	.word	0x08009e95
 8009df8:	08009edf 	.word	0x08009edf
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e0d 	.word	0x08009e0d
 8009e04:	08009e81 	.word	0x08009e81
 8009e08:	08009e95 	.word	0x08009e95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	18d1      	adds	r1, r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2c:	f7ff ff5c 	bl	8009ce8 <prvInsertTimerInActiveList>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d069      	beq.n	8009f0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05e      	beq.n	8009f0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	441a      	add	r2, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5e:	f7ff fe05 	bl	8009a6c <xTimerGenericCommand>
 8009e62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d14f      	bne.n	8009f0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	61bb      	str	r3, [r7, #24]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e86:	f023 0301 	bic.w	r3, r3, #1
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e92:	e03a      	b.n	8009f0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	617b      	str	r3, [r7, #20]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	18d1      	adds	r1, r2, r3
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed8:	f7ff ff06 	bl	8009ce8 <prvInsertTimerInActiveList>
					break;
 8009edc:	e015      	b.n	8009f0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eee:	f000 fbd7 	bl	800a6a0 <vPortFree>
 8009ef2:	e00a      	b.n	8009f0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efa:	f023 0301 	bic.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f06:	e000      	b.n	8009f0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <prvProcessReceivedCommands+0x1c0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	1d39      	adds	r1, r7, #4
 8009f10:	2200      	movs	r2, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fa94 	bl	8008440 <xQueueReceive>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f47f af2a 	bne.w	8009d74 <prvProcessReceivedCommands+0x8>
	}
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	3730      	adds	r7, #48	; 0x30
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000e00 	.word	0x20000e00

08009f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f36:	e048      	b.n	8009fca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f42:	4b2b      	ldr	r3, [pc, #172]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fd ffb1 	bl	8007eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02e      	beq.n	8009fca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	4413      	add	r3, r2
 8009f74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d90e      	bls.n	8009f9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f8a:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7fd ff56 	bl	8007e46 <vListInsert>
 8009f9a:	e016      	b.n	8009fca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff fd60 	bl	8009a6c <xTimerGenericCommand>
 8009fac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	603b      	str	r3, [r7, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1b1      	bne.n	8009f38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fd4:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fda:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <prvSwitchTimerLists+0xc0>)
 8009fe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fe2:	4a04      	ldr	r2, [pc, #16]	; (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	6013      	str	r3, [r2, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000df8 	.word	0x20000df8
 8009ff4:	20000dfc 	.word	0x20000dfc

08009ff8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ffe:	f000 f969 	bl	800a2d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d120      	bne.n	800a04c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a00a:	4814      	ldr	r0, [pc, #80]	; (800a05c <prvCheckForValidListAndQueue+0x64>)
 800a00c:	f7fd feca 	bl	8007da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a010:	4813      	ldr	r0, [pc, #76]	; (800a060 <prvCheckForValidListAndQueue+0x68>)
 800a012:	f7fd fec7 	bl	8007da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a016:	4b13      	ldr	r3, [pc, #76]	; (800a064 <prvCheckForValidListAndQueue+0x6c>)
 800a018:	4a10      	ldr	r2, [pc, #64]	; (800a05c <prvCheckForValidListAndQueue+0x64>)
 800a01a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a01c:	4b12      	ldr	r3, [pc, #72]	; (800a068 <prvCheckForValidListAndQueue+0x70>)
 800a01e:	4a10      	ldr	r2, [pc, #64]	; (800a060 <prvCheckForValidListAndQueue+0x68>)
 800a020:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a022:	2300      	movs	r3, #0
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4b11      	ldr	r3, [pc, #68]	; (800a06c <prvCheckForValidListAndQueue+0x74>)
 800a028:	4a11      	ldr	r2, [pc, #68]	; (800a070 <prvCheckForValidListAndQueue+0x78>)
 800a02a:	2110      	movs	r1, #16
 800a02c:	200a      	movs	r0, #10
 800a02e:	f7fd ffd5 	bl	8007fdc <xQueueGenericCreateStatic>
 800a032:	4603      	mov	r3, r0
 800a034:	4a08      	ldr	r2, [pc, #32]	; (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a036:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	490b      	ldr	r1, [pc, #44]	; (800a074 <prvCheckForValidListAndQueue+0x7c>)
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fbea 	bl	8008820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a04c:	f000 f972 	bl	800a334 <vPortExitCritical>
}
 800a050:	bf00      	nop
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000e00 	.word	0x20000e00
 800a05c:	20000dd0 	.word	0x20000dd0
 800a060:	20000de4 	.word	0x20000de4
 800a064:	20000df8 	.word	0x20000df8
 800a068:	20000dfc 	.word	0x20000dfc
 800a06c:	20000eac 	.word	0x20000eac
 800a070:	20000e0c 	.word	0x20000e0c
 800a074:	0800c7e8 	.word	0x0800c7e8

0800a078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3b04      	subs	r3, #4
 800a088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3b04      	subs	r3, #4
 800a096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3b04      	subs	r3, #4
 800a0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0a8:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <pxPortInitialiseStack+0x64>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3b14      	subs	r3, #20
 800a0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3b04      	subs	r3, #4
 800a0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f06f 0202 	mvn.w	r2, #2
 800a0c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3b20      	subs	r3, #32
 800a0cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	0800a0e1 	.word	0x0800a0e1

0800a0e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ea:	4b12      	ldr	r3, [pc, #72]	; (800a134 <prvTaskExitError+0x54>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f2:	d00a      	beq.n	800a10a <prvTaskExitError+0x2a>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	60fb      	str	r3, [r7, #12]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <prvTaskExitError+0x28>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	60bb      	str	r3, [r7, #8]
}
 800a11c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a11e:	bf00      	nop
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0fc      	beq.n	800a120 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a126:	bf00      	nop
 800a128:	bf00      	nop
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20000120 	.word	0x20000120
	...

0800a140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <pxCurrentTCBConst2>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f380 8809 	msr	PSP, r0
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	4770      	bx	lr
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst2>:
 800a160:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a168:	4808      	ldr	r0, [pc, #32]	; (800a18c <prvPortStartFirstTask+0x24>)
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f380 8808 	msr	MSP, r0
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8814 	msr	CONTROL, r0
 800a17a:	b662      	cpsie	i
 800a17c:	b661      	cpsie	f
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	df00      	svc	0
 800a188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a18a:	bf00      	nop
 800a18c:	e000ed08 	.word	0xe000ed08

0800a190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a196:	4b46      	ldr	r3, [pc, #280]	; (800a2b0 <xPortStartScheduler+0x120>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a46      	ldr	r2, [pc, #280]	; (800a2b4 <xPortStartScheduler+0x124>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d10a      	bne.n	800a1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	613b      	str	r3, [r7, #16]
}
 800a1b2:	bf00      	nop
 800a1b4:	e7fe      	b.n	800a1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1b6:	4b3e      	ldr	r3, [pc, #248]	; (800a2b0 <xPortStartScheduler+0x120>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a3f      	ldr	r2, [pc, #252]	; (800a2b8 <xPortStartScheduler+0x128>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d10a      	bne.n	800a1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	60fb      	str	r3, [r7, #12]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1d6:	4b39      	ldr	r3, [pc, #228]	; (800a2bc <xPortStartScheduler+0x12c>)
 800a1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	22ff      	movs	r2, #255	; 0xff
 800a1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	4b31      	ldr	r3, [pc, #196]	; (800a2c0 <xPortStartScheduler+0x130>)
 800a1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1fe:	4b31      	ldr	r3, [pc, #196]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a204:	e009      	b.n	800a21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a206:	4b2f      	ldr	r3, [pc, #188]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4a2d      	ldr	r2, [pc, #180]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	b2db      	uxtb	r3, r3
 800a218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	2b80      	cmp	r3, #128	; 0x80
 800a224:	d0ef      	beq.n	800a206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a226:	4b27      	ldr	r3, [pc, #156]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1c3 0307 	rsb	r3, r3, #7
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d00a      	beq.n	800a248 <xPortStartScheduler+0xb8>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60bb      	str	r3, [r7, #8]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a248:	4b1e      	ldr	r3, [pc, #120]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a25a:	4a1a      	ldr	r2, [pc, #104]	; (800a2c4 <xPortStartScheduler+0x134>)
 800a25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	b2da      	uxtb	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a266:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <xPortStartScheduler+0x138>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a17      	ldr	r2, [pc, #92]	; (800a2c8 <xPortStartScheduler+0x138>)
 800a26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <xPortStartScheduler+0x138>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a14      	ldr	r2, [pc, #80]	; (800a2c8 <xPortStartScheduler+0x138>)
 800a278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a27e:	f000 f8dd 	bl	800a43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a282:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <xPortStartScheduler+0x13c>)
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a288:	f000 f8fc 	bl	800a484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a28c:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <xPortStartScheduler+0x140>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <xPortStartScheduler+0x140>)
 800a292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a298:	f7ff ff66 	bl	800a168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a29c:	f7ff f852 	bl	8009344 <vTaskSwitchContext>
	prvTaskExitError();
 800a2a0:	f7ff ff1e 	bl	800a0e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	e000ed00 	.word	0xe000ed00
 800a2b4:	410fc271 	.word	0x410fc271
 800a2b8:	410fc270 	.word	0x410fc270
 800a2bc:	e000e400 	.word	0xe000e400
 800a2c0:	20000efc 	.word	0x20000efc
 800a2c4:	20000f00 	.word	0x20000f00
 800a2c8:	e000ed20 	.word	0xe000ed20
 800a2cc:	20000120 	.word	0x20000120
 800a2d0:	e000ef34 	.word	0xe000ef34

0800a2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	607b      	str	r3, [r7, #4]
}
 800a2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2ee:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <vPortEnterCritical+0x58>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	4a0d      	ldr	r2, [pc, #52]	; (800a32c <vPortEnterCritical+0x58>)
 800a2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <vPortEnterCritical+0x58>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d10f      	bne.n	800a320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a300:	4b0b      	ldr	r3, [pc, #44]	; (800a330 <vPortEnterCritical+0x5c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <vPortEnterCritical+0x4c>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	603b      	str	r3, [r7, #0]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <vPortEnterCritical+0x4a>
	}
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20000120 	.word	0x20000120
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a33a:	4b12      	ldr	r3, [pc, #72]	; (800a384 <vPortExitCritical+0x50>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <vPortExitCritical+0x24>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	607b      	str	r3, [r7, #4]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a358:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <vPortExitCritical+0x50>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	4a09      	ldr	r2, [pc, #36]	; (800a384 <vPortExitCritical+0x50>)
 800a360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a362:	4b08      	ldr	r3, [pc, #32]	; (800a384 <vPortExitCritical+0x50>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d105      	bne.n	800a376 <vPortExitCritical+0x42>
 800a36a:	2300      	movs	r3, #0
 800a36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f383 8811 	msr	BASEPRI, r3
}
 800a374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20000120 	.word	0x20000120
	...

0800a390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a390:	f3ef 8009 	mrs	r0, PSP
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <pxCurrentTCBConst>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f01e 0f10 	tst.w	lr, #16
 800a3a0:	bf08      	it	eq
 800a3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3b4:	f380 8811 	msr	BASEPRI, r0
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f7fe ffc0 	bl	8009344 <vTaskSwitchContext>
 800a3c4:	f04f 0000 	mov.w	r0, #0
 800a3c8:	f380 8811 	msr	BASEPRI, r0
 800a3cc:	bc09      	pop	{r0, r3}
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	6808      	ldr	r0, [r1, #0]
 800a3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d6:	f01e 0f10 	tst.w	lr, #16
 800a3da:	bf08      	it	eq
 800a3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3e0:	f380 8809 	msr	PSP, r0
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a412:	f7fe fedd 	bl	80091d0 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <SysTick_Handler+0x40>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f383 8811 	msr	BASEPRI, r3
}
 800a42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <vPortSetupTimerInterrupt+0x38>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a44c:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <vPortSetupTimerInterrupt+0x3c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <vPortSetupTimerInterrupt+0x40>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	099b      	lsrs	r3, r3, #6
 800a458:	4a09      	ldr	r2, [pc, #36]	; (800a480 <vPortSetupTimerInterrupt+0x44>)
 800a45a:	3b01      	subs	r3, #1
 800a45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	e000e010 	.word	0xe000e010
 800a474:	e000e018 	.word	0xe000e018
 800a478:	20000004 	.word	0x20000004
 800a47c:	10624dd3 	.word	0x10624dd3
 800a480:	e000e014 	.word	0xe000e014

0800a484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a494 <vPortEnableVFP+0x10>
 800a488:	6801      	ldr	r1, [r0, #0]
 800a48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a48e:	6001      	str	r1, [r0, #0]
 800a490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a492:	bf00      	nop
 800a494:	e000ed88 	.word	0xe000ed88

0800a498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a49e:	f3ef 8305 	mrs	r3, IPSR
 800a4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d914      	bls.n	800a4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4aa:	4a17      	ldr	r2, [pc, #92]	; (800a508 <vPortValidateInterruptPriority+0x70>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4b4:	4b15      	ldr	r3, [pc, #84]	; (800a50c <vPortValidateInterruptPriority+0x74>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	7afa      	ldrb	r2, [r7, #11]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d20a      	bcs.n	800a4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	607b      	str	r3, [r7, #4]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4d4:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <vPortValidateInterruptPriority+0x78>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <vPortValidateInterruptPriority+0x7c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d90a      	bls.n	800a4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	603b      	str	r3, [r7, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <vPortValidateInterruptPriority+0x60>
	}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	e000e3f0 	.word	0xe000e3f0
 800a50c:	20000efc 	.word	0x20000efc
 800a510:	e000ed0c 	.word	0xe000ed0c
 800a514:	20000f00 	.word	0x20000f00

0800a518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	; 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a524:	f7fe fd8c 	bl	8009040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a528:	4b58      	ldr	r3, [pc, #352]	; (800a68c <pvPortMalloc+0x174>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a530:	f000 f910 	bl	800a754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a534:	4b56      	ldr	r3, [pc, #344]	; (800a690 <pvPortMalloc+0x178>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 808e 	bne.w	800a65e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01d      	beq.n	800a584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a548:	2208      	movs	r2, #8
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	2b00      	cmp	r3, #0
 800a558:	d014      	beq.n	800a584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f023 0307 	bic.w	r3, r3, #7
 800a560:	3308      	adds	r3, #8
 800a562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <pvPortMalloc+0x6c>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	617b      	str	r3, [r7, #20]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d069      	beq.n	800a65e <pvPortMalloc+0x146>
 800a58a:	4b42      	ldr	r3, [pc, #264]	; (800a694 <pvPortMalloc+0x17c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d864      	bhi.n	800a65e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a594:	4b40      	ldr	r3, [pc, #256]	; (800a698 <pvPortMalloc+0x180>)
 800a596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a598:	4b3f      	ldr	r3, [pc, #252]	; (800a698 <pvPortMalloc+0x180>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a59e:	e004      	b.n	800a5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d903      	bls.n	800a5bc <pvPortMalloc+0xa4>
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1f1      	bne.n	800a5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5bc:	4b33      	ldr	r3, [pc, #204]	; (800a68c <pvPortMalloc+0x174>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d04b      	beq.n	800a65e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2208      	movs	r2, #8
 800a5cc:	4413      	add	r3, r2
 800a5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d91f      	bls.n	800a628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <pvPortMalloc+0xf8>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	613b      	str	r3, [r7, #16]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	1ad2      	subs	r2, r2, r3
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a622:	69b8      	ldr	r0, [r7, #24]
 800a624:	f000 f8f8 	bl	800a818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a628:	4b1a      	ldr	r3, [pc, #104]	; (800a694 <pvPortMalloc+0x17c>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	4a18      	ldr	r2, [pc, #96]	; (800a694 <pvPortMalloc+0x17c>)
 800a634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a636:	4b17      	ldr	r3, [pc, #92]	; (800a694 <pvPortMalloc+0x17c>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <pvPortMalloc+0x184>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d203      	bcs.n	800a64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a642:	4b14      	ldr	r3, [pc, #80]	; (800a694 <pvPortMalloc+0x17c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a15      	ldr	r2, [pc, #84]	; (800a69c <pvPortMalloc+0x184>)
 800a648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	4b10      	ldr	r3, [pc, #64]	; (800a690 <pvPortMalloc+0x178>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	431a      	orrs	r2, r3
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a65e:	f7fe fcfd 	bl	800905c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <pvPortMalloc+0x16a>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60fb      	str	r3, [r7, #12]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <pvPortMalloc+0x168>
	return pvReturn;
 800a682:	69fb      	ldr	r3, [r7, #28]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3728      	adds	r7, #40	; 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20004b0c 	.word	0x20004b0c
 800a690:	20004b18 	.word	0x20004b18
 800a694:	20004b10 	.word	0x20004b10
 800a698:	20004b04 	.word	0x20004b04
 800a69c:	20004b14 	.word	0x20004b14

0800a6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d048      	beq.n	800a744 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	425b      	negs	r3, r3
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	4b21      	ldr	r3, [pc, #132]	; (800a74c <vPortFree+0xac>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vPortFree+0x44>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	60fb      	str	r3, [r7, #12]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <vPortFree+0x62>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	60bb      	str	r3, [r7, #8]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	4b11      	ldr	r3, [pc, #68]	; (800a74c <vPortFree+0xac>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4013      	ands	r3, r2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d019      	beq.n	800a744 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d115      	bne.n	800a744 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <vPortFree+0xac>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	43db      	mvns	r3, r3
 800a722:	401a      	ands	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a728:	f7fe fc8a 	bl	8009040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	4b07      	ldr	r3, [pc, #28]	; (800a750 <vPortFree+0xb0>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4413      	add	r3, r2
 800a736:	4a06      	ldr	r2, [pc, #24]	; (800a750 <vPortFree+0xb0>)
 800a738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f000 f86c 	bl	800a818 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a740:	f7fe fc8c 	bl	800905c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a744:	bf00      	nop
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20004b18 	.word	0x20004b18
 800a750:	20004b10 	.word	0x20004b10

0800a754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a760:	4b27      	ldr	r3, [pc, #156]	; (800a800 <prvHeapInit+0xac>)
 800a762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3307      	adds	r3, #7
 800a772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	4a1f      	ldr	r2, [pc, #124]	; (800a800 <prvHeapInit+0xac>)
 800a784:	4413      	add	r3, r2
 800a786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a78c:	4a1d      	ldr	r2, [pc, #116]	; (800a804 <prvHeapInit+0xb0>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a792:	4b1c      	ldr	r3, [pc, #112]	; (800a804 <prvHeapInit+0xb0>)
 800a794:	2200      	movs	r2, #0
 800a796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7a0:	2208      	movs	r2, #8
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	1a9b      	subs	r3, r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f023 0307 	bic.w	r3, r3, #7
 800a7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4a15      	ldr	r2, [pc, #84]	; (800a808 <prvHeapInit+0xb4>)
 800a7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <prvHeapInit+0xb4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7be:	4b12      	ldr	r3, [pc, #72]	; (800a808 <prvHeapInit+0xb4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <prvHeapInit+0xb4>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	; (800a80c <prvHeapInit+0xb8>)
 800a7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	4a09      	ldr	r2, [pc, #36]	; (800a810 <prvHeapInit+0xbc>)
 800a7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7ec:	4b09      	ldr	r3, [pc, #36]	; (800a814 <prvHeapInit+0xc0>)
 800a7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	20000f04 	.word	0x20000f04
 800a804:	20004b04 	.word	0x20004b04
 800a808:	20004b0c 	.word	0x20004b0c
 800a80c:	20004b14 	.word	0x20004b14
 800a810:	20004b10 	.word	0x20004b10
 800a814:	20004b18 	.word	0x20004b18

0800a818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a820:	4b28      	ldr	r3, [pc, #160]	; (800a8c4 <prvInsertBlockIntoFreeList+0xac>)
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	e002      	b.n	800a82c <prvInsertBlockIntoFreeList+0x14>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	429a      	cmp	r2, r3
 800a834:	d8f7      	bhi.n	800a826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	4413      	add	r3, r2
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	429a      	cmp	r2, r3
 800a846:	d108      	bne.n	800a85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	441a      	add	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d118      	bne.n	800a8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	429a      	cmp	r2, r3
 800a878:	d00d      	beq.n	800a896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	441a      	add	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	e008      	b.n	800a8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	e003      	b.n	800a8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d002      	beq.n	800a8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8b6:	bf00      	nop
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	20004b04 	.word	0x20004b04
 800a8c8:	20004b0c 	.word	0x20004b0c

0800a8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4912      	ldr	r1, [pc, #72]	; (800a91c <MX_USB_DEVICE_Init+0x50>)
 800a8d4:	4812      	ldr	r0, [pc, #72]	; (800a920 <MX_USB_DEVICE_Init+0x54>)
 800a8d6:	f7fb ff35 	bl	8006744 <USBD_Init>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8e0:	f7f6 fb6c 	bl	8000fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8e4:	490f      	ldr	r1, [pc, #60]	; (800a924 <MX_USB_DEVICE_Init+0x58>)
 800a8e6:	480e      	ldr	r0, [pc, #56]	; (800a920 <MX_USB_DEVICE_Init+0x54>)
 800a8e8:	f7fb ff62 	bl	80067b0 <USBD_RegisterClass>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8f2:	f7f6 fb63 	bl	8000fbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8f6:	490c      	ldr	r1, [pc, #48]	; (800a928 <MX_USB_DEVICE_Init+0x5c>)
 800a8f8:	4809      	ldr	r0, [pc, #36]	; (800a920 <MX_USB_DEVICE_Init+0x54>)
 800a8fa:	f7fb fe87 	bl	800660c <USBD_CDC_RegisterInterface>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a904:	f7f6 fb5a 	bl	8000fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a908:	4805      	ldr	r0, [pc, #20]	; (800a920 <MX_USB_DEVICE_Init+0x54>)
 800a90a:	f7fb ff72 	bl	80067f2 <USBD_Start>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a914:	f7f6 fb52 	bl	8000fbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a918:	bf00      	nop
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20000138 	.word	0x20000138
 800a920:	20004d28 	.word	0x20004d28
 800a924:	2000001c 	.word	0x2000001c
 800a928:	20000124 	.word	0x20000124

0800a92c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a930:	2200      	movs	r2, #0
 800a932:	4905      	ldr	r1, [pc, #20]	; (800a948 <CDC_Init_FS+0x1c>)
 800a934:	4805      	ldr	r0, [pc, #20]	; (800a94c <CDC_Init_FS+0x20>)
 800a936:	f7fb fe7e 	bl	8006636 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a93a:	4905      	ldr	r1, [pc, #20]	; (800a950 <CDC_Init_FS+0x24>)
 800a93c:	4803      	ldr	r0, [pc, #12]	; (800a94c <CDC_Init_FS+0x20>)
 800a93e:	f7fb fe93 	bl	8006668 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a942:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a944:	4618      	mov	r0, r3
 800a946:	bd80      	pop	{r7, pc}
 800a948:	200057f8 	.word	0x200057f8
 800a94c:	20004d28 	.word	0x20004d28
 800a950:	20004ff8 	.word	0x20004ff8

0800a954 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a954:	b480      	push	{r7}
 800a956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a958:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	6039      	str	r1, [r7, #0]
 800a96e:	71fb      	strb	r3, [r7, #7]
 800a970:	4613      	mov	r3, r2
 800a972:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	2b23      	cmp	r3, #35	; 0x23
 800a978:	d84a      	bhi.n	800aa10 <CDC_Control_FS+0xac>
 800a97a:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <CDC_Control_FS+0x1c>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800aa11 	.word	0x0800aa11
 800a984:	0800aa11 	.word	0x0800aa11
 800a988:	0800aa11 	.word	0x0800aa11
 800a98c:	0800aa11 	.word	0x0800aa11
 800a990:	0800aa11 	.word	0x0800aa11
 800a994:	0800aa11 	.word	0x0800aa11
 800a998:	0800aa11 	.word	0x0800aa11
 800a99c:	0800aa11 	.word	0x0800aa11
 800a9a0:	0800aa11 	.word	0x0800aa11
 800a9a4:	0800aa11 	.word	0x0800aa11
 800a9a8:	0800aa11 	.word	0x0800aa11
 800a9ac:	0800aa11 	.word	0x0800aa11
 800a9b0:	0800aa11 	.word	0x0800aa11
 800a9b4:	0800aa11 	.word	0x0800aa11
 800a9b8:	0800aa11 	.word	0x0800aa11
 800a9bc:	0800aa11 	.word	0x0800aa11
 800a9c0:	0800aa11 	.word	0x0800aa11
 800a9c4:	0800aa11 	.word	0x0800aa11
 800a9c8:	0800aa11 	.word	0x0800aa11
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa11 	.word	0x0800aa11
 800a9d4:	0800aa11 	.word	0x0800aa11
 800a9d8:	0800aa11 	.word	0x0800aa11
 800a9dc:	0800aa11 	.word	0x0800aa11
 800a9e0:	0800aa11 	.word	0x0800aa11
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa11 	.word	0x0800aa11
 800a9f4:	0800aa11 	.word	0x0800aa11
 800a9f8:	0800aa11 	.word	0x0800aa11
 800a9fc:	0800aa11 	.word	0x0800aa11
 800aa00:	0800aa11 	.word	0x0800aa11
 800aa04:	0800aa11 	.word	0x0800aa11
 800aa08:	0800aa11 	.word	0x0800aa11
 800aa0c:	0800aa11 	.word	0x0800aa11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa10:	bf00      	nop
  }

  return (USBD_OK);
 800aa12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4808      	ldr	r0, [pc, #32]	; (800aa50 <CDC_Receive_FS+0x30>)
 800aa2e:	f7fb fe1b 	bl	8006668 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa32:	4807      	ldr	r0, [pc, #28]	; (800aa50 <CDC_Receive_FS+0x30>)
 800aa34:	f7fb fe5c 	bl	80066f0 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, (uint16_t) *Len);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7f6 f847 	bl	8000ad4 <CDC_ReceiveCallback>
  return (USBD_OK);
 800aa46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20004d28 	.word	0x20004d28

0800aa54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <CDC_Transmit_FS+0x48>)
 800aa66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e00b      	b.n	800aa92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa7a:	887b      	ldrh	r3, [r7, #2]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4806      	ldr	r0, [pc, #24]	; (800aa9c <CDC_Transmit_FS+0x48>)
 800aa82:	f7fb fdd8 	bl	8006636 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa86:	4805      	ldr	r0, [pc, #20]	; (800aa9c <CDC_Transmit_FS+0x48>)
 800aa88:	f7fb fe02 	bl	8006690 <USBD_CDC_TransmitPacket>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20004d28 	.word	0x20004d28

0800aaa0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
	...

0800aac4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2212      	movs	r2, #18
 800aad4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aad6:	4b03      	ldr	r3, [pc, #12]	; (800aae4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aad8:	4618      	mov	r0, r3
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	20000154 	.word	0x20000154

0800aae8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2204      	movs	r2, #4
 800aaf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aafa:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	20000168 	.word	0x20000168

0800ab0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d105      	bne.n	800ab2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	4907      	ldr	r1, [pc, #28]	; (800ab40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab22:	4808      	ldr	r0, [pc, #32]	; (800ab44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab24:	f7fc fe42 	bl	80077ac <USBD_GetString>
 800ab28:	e004      	b.n	800ab34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4904      	ldr	r1, [pc, #16]	; (800ab40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab2e:	4805      	ldr	r0, [pc, #20]	; (800ab44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab30:	f7fc fe3c 	bl	80077ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab34:	4b02      	ldr	r3, [pc, #8]	; (800ab40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20005ff8 	.word	0x20005ff8
 800ab44:	0800c7f0 	.word	0x0800c7f0

0800ab48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	4904      	ldr	r1, [pc, #16]	; (800ab68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab58:	4804      	ldr	r0, [pc, #16]	; (800ab6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab5a:	f7fc fe27 	bl	80077ac <USBD_GetString>
  return USBD_StrDesc;
 800ab5e:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20005ff8 	.word	0x20005ff8
 800ab6c:	0800c808 	.word	0x0800c808

0800ab70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	221a      	movs	r2, #26
 800ab80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab82:	f000 f843 	bl	800ac0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab86:	4b02      	ldr	r3, [pc, #8]	; (800ab90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	2000016c 	.word	0x2000016c

0800ab94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6039      	str	r1, [r7, #0]
 800ab9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d105      	bne.n	800abb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	4907      	ldr	r1, [pc, #28]	; (800abc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abaa:	4808      	ldr	r0, [pc, #32]	; (800abcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800abac:	f7fc fdfe 	bl	80077ac <USBD_GetString>
 800abb0:	e004      	b.n	800abbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4904      	ldr	r1, [pc, #16]	; (800abc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abb6:	4805      	ldr	r0, [pc, #20]	; (800abcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800abb8:	f7fc fdf8 	bl	80077ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20005ff8 	.word	0x20005ff8
 800abcc:	0800c81c 	.word	0x0800c81c

0800abd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	6039      	str	r1, [r7, #0]
 800abda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	4907      	ldr	r1, [pc, #28]	; (800ac04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abe6:	4808      	ldr	r0, [pc, #32]	; (800ac08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abe8:	f7fc fde0 	bl	80077ac <USBD_GetString>
 800abec:	e004      	b.n	800abf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	4904      	ldr	r1, [pc, #16]	; (800ac04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abf2:	4805      	ldr	r0, [pc, #20]	; (800ac08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abf4:	f7fc fdda 	bl	80077ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20005ff8 	.word	0x20005ff8
 800ac08:	0800c828 	.word	0x0800c828

0800ac0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <Get_SerialNum+0x44>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac18:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <Get_SerialNum+0x48>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac1e:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <Get_SerialNum+0x4c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4413      	add	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d009      	beq.n	800ac46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac32:	2208      	movs	r2, #8
 800ac34:	4909      	ldr	r1, [pc, #36]	; (800ac5c <Get_SerialNum+0x50>)
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f814 	bl	800ac64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	4908      	ldr	r1, [pc, #32]	; (800ac60 <Get_SerialNum+0x54>)
 800ac40:	68b8      	ldr	r0, [r7, #8]
 800ac42:	f000 f80f 	bl	800ac64 <IntToUnicode>
  }
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	1fff7a10 	.word	0x1fff7a10
 800ac54:	1fff7a14 	.word	0x1fff7a14
 800ac58:	1fff7a18 	.word	0x1fff7a18
 800ac5c:	2000016e 	.word	0x2000016e
 800ac60:	2000017e 	.word	0x2000017e

0800ac64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]
 800ac7a:	e027      	b.n	800accc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	0f1b      	lsrs	r3, r3, #28
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	d80b      	bhi.n	800ac9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	0f1b      	lsrs	r3, r3, #28
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	440b      	add	r3, r1
 800ac94:	3230      	adds	r2, #48	; 0x30
 800ac96:	b2d2      	uxtb	r2, r2
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e00a      	b.n	800acb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	0f1b      	lsrs	r3, r3, #28
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4619      	mov	r1, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	440b      	add	r3, r1
 800acac:	3237      	adds	r2, #55	; 0x37
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	3301      	adds	r3, #1
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	4413      	add	r3, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
 800acc8:	3301      	adds	r3, #1
 800acca:	75fb      	strb	r3, [r7, #23]
 800accc:	7dfa      	ldrb	r2, [r7, #23]
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d3d3      	bcc.n	800ac7c <IntToUnicode+0x18>
  }
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	; 0x28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acec:	f107 0314 	add.w	r3, r7, #20
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	605a      	str	r2, [r3, #4]
 800acf6:	609a      	str	r2, [r3, #8]
 800acf8:	60da      	str	r2, [r3, #12]
 800acfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad04:	d147      	bne.n	800ad96 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	4b25      	ldr	r3, [pc, #148]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	4a24      	ldr	r2, [pc, #144]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad10:	f043 0301 	orr.w	r3, r3, #1
 800ad14:	6313      	str	r3, [r2, #48]	; 0x30
 800ad16:	4b22      	ldr	r3, [pc, #136]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]
 800ad20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad30:	f107 0314 	add.w	r3, r7, #20
 800ad34:	4619      	mov	r1, r3
 800ad36:	481b      	ldr	r0, [pc, #108]	; (800ada4 <HAL_PCD_MspInit+0xc0>)
 800ad38:	f7f6 fd62 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ad40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad42:	2302      	movs	r3, #2
 800ad44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad4e:	230a      	movs	r3, #10
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad52:	f107 0314 	add.w	r3, r7, #20
 800ad56:	4619      	mov	r1, r3
 800ad58:	4812      	ldr	r0, [pc, #72]	; (800ada4 <HAL_PCD_MspInit+0xc0>)
 800ad5a:	f7f6 fd51 	bl	8001800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad5e:	4b10      	ldr	r3, [pc, #64]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad62:	4a0f      	ldr	r2, [pc, #60]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad68:	6353      	str	r3, [r2, #52]	; 0x34
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	4b0c      	ldr	r3, [pc, #48]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad72:	4a0b      	ldr	r2, [pc, #44]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad78:	6453      	str	r3, [r2, #68]	; 0x44
 800ad7a:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <HAL_PCD_MspInit+0xbc>)
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2105      	movs	r1, #5
 800ad8a:	2043      	movs	r0, #67	; 0x43
 800ad8c:	f7f6 fd0e 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad90:	2043      	movs	r0, #67	; 0x43
 800ad92:	f7f6 fd27 	bl	80017e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad96:	bf00      	nop
 800ad98:	3728      	adds	r7, #40	; 0x28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40023800 	.word	0x40023800
 800ada4:	40020000 	.word	0x40020000

0800ada8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fb fd62 	bl	8006888 <USBD_LL_SetupStage>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800adde:	78fa      	ldrb	r2, [r7, #3]
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	4619      	mov	r1, r3
 800adf6:	f7fb fd9c 	bl	8006932 <USBD_LL_DataOutStage>
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	1a9b      	subs	r3, r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	3348      	adds	r3, #72	; 0x48
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f7fb fde5 	bl	80069f8 <USBD_LL_DataInStage>
}
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fb fee9 	bl	8006c1c <USBD_LL_SOF>
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d001      	beq.n	800ae6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae66:	f7f6 f8a9 	bl	8000fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fb fe96 	bl	8006ba6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fb fe4f 	bl	8006b24 <USBD_LL_Reset>
}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fb fe91 	bl	8006bc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6812      	ldr	r2, [r2, #0]
 800aeb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aeb6:	f043 0301 	orr.w	r3, r3, #1
 800aeba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aec4:	4b04      	ldr	r3, [pc, #16]	; (800aed8 <HAL_PCD_SuspendCallback+0x48>)
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	4a03      	ldr	r2, [pc, #12]	; (800aed8 <HAL_PCD_SuspendCallback+0x48>)
 800aeca:	f043 0306 	orr.w	r3, r3, #6
 800aece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed00 	.word	0xe000ed00

0800aedc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fb fe80 	bl	8006bf0 <USBD_LL_Resume>
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af0a:	78fa      	ldrb	r2, [r7, #3]
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fb feab 	bl	8006c6a <USBD_LL_IsoOUTIncomplete>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af2e:	78fa      	ldrb	r2, [r7, #3]
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f7fb fe8c 	bl	8006c50 <USBD_LL_IsoINIncomplete>
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fb fe98 	bl	8006c84 <USBD_LL_DevConnected>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fb fe95 	bl	8006c9a <USBD_LL_DevDisconnected>
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d13c      	bne.n	800b002 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af88:	4a20      	ldr	r2, [pc, #128]	; (800b00c <USBD_LL_Init+0x94>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a1e      	ldr	r2, [pc, #120]	; (800b00c <USBD_LL_Init+0x94>)
 800af94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af98:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <USBD_LL_Init+0x94>)
 800af9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800afa0:	4b1a      	ldr	r3, [pc, #104]	; (800b00c <USBD_LL_Init+0x94>)
 800afa2:	2204      	movs	r2, #4
 800afa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800afa6:	4b19      	ldr	r3, [pc, #100]	; (800b00c <USBD_LL_Init+0x94>)
 800afa8:	2202      	movs	r2, #2
 800afaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afac:	4b17      	ldr	r3, [pc, #92]	; (800b00c <USBD_LL_Init+0x94>)
 800afae:	2200      	movs	r2, #0
 800afb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afb2:	4b16      	ldr	r3, [pc, #88]	; (800b00c <USBD_LL_Init+0x94>)
 800afb4:	2202      	movs	r2, #2
 800afb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800afb8:	4b14      	ldr	r3, [pc, #80]	; (800b00c <USBD_LL_Init+0x94>)
 800afba:	2200      	movs	r2, #0
 800afbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <USBD_LL_Init+0x94>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800afc4:	4b11      	ldr	r3, [pc, #68]	; (800b00c <USBD_LL_Init+0x94>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <USBD_LL_Init+0x94>)
 800afcc:	2200      	movs	r2, #0
 800afce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <USBD_LL_Init+0x94>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800afd6:	480d      	ldr	r0, [pc, #52]	; (800b00c <USBD_LL_Init+0x94>)
 800afd8:	f7f7 fb94 	bl	8002704 <HAL_PCD_Init>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800afe2:	f7f5 ffeb 	bl	8000fbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afe6:	2180      	movs	r1, #128	; 0x80
 800afe8:	4808      	ldr	r0, [pc, #32]	; (800b00c <USBD_LL_Init+0x94>)
 800afea:	f7f8 fcf2 	bl	80039d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afee:	2240      	movs	r2, #64	; 0x40
 800aff0:	2100      	movs	r1, #0
 800aff2:	4806      	ldr	r0, [pc, #24]	; (800b00c <USBD_LL_Init+0x94>)
 800aff4:	f7f8 fca6 	bl	8003944 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aff8:	2280      	movs	r2, #128	; 0x80
 800affa:	2101      	movs	r1, #1
 800affc:	4803      	ldr	r0, [pc, #12]	; (800b00c <USBD_LL_Init+0x94>)
 800affe:	f7f8 fca1 	bl	8003944 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200061f8 	.word	0x200061f8

0800b010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b026:	4618      	mov	r0, r3
 800b028:	f7f7 fc89 	bl	800293e <HAL_PCD_Start>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f92a 	bl	800b28c <USBD_Get_USB_Status>
 800b038:	4603      	mov	r3, r0
 800b03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	461a      	mov	r2, r3
 800b054:	4603      	mov	r3, r0
 800b056:	70fb      	strb	r3, [r7, #3]
 800b058:	460b      	mov	r3, r1
 800b05a:	70bb      	strb	r3, [r7, #2]
 800b05c:	4613      	mov	r3, r2
 800b05e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b06e:	78bb      	ldrb	r3, [r7, #2]
 800b070:	883a      	ldrh	r2, [r7, #0]
 800b072:	78f9      	ldrb	r1, [r7, #3]
 800b074:	f7f8 f86d 	bl	8003152 <HAL_PCD_EP_Open>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f904 	bl	800b28c <USBD_Get_USB_Status>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b088:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0ac:	78fa      	ldrb	r2, [r7, #3]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f8 f8b6 	bl	8003222 <HAL_PCD_EP_Close>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f8e5 	bl	800b28c <USBD_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f8 f98e 	bl	8003410 <HAL_PCD_EP_SetStall>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 f8c6 	bl	800b28c <USBD_Get_USB_Status>
 800b100:	4603      	mov	r3, r0
 800b102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b104:	7bbb      	ldrb	r3, [r7, #14]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	4611      	mov	r1, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f8 f9d3 	bl	80034d8 <HAL_PCD_EP_ClrStall>
 800b132:	4603      	mov	r3, r0
 800b134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 f8a7 	bl	800b28c <USBD_Get_USB_Status>
 800b13e:	4603      	mov	r3, r0
 800b140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b142:	7bbb      	ldrb	r3, [r7, #14]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b15e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	da0b      	bge.n	800b180 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	4613      	mov	r3, r2
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	333e      	adds	r3, #62	; 0x3e
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	e00b      	b.n	800b198 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	4613      	mov	r3, r2
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b196:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1be:	78fa      	ldrb	r2, [r7, #3]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7f7 ffa0 	bl	8003108 <HAL_PCD_SetAddress>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f85c 	bl	800b28c <USBD_Get_USB_Status>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b086      	sub	sp, #24
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	603b      	str	r3, [r7, #0]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b200:	7af9      	ldrb	r1, [r7, #11]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	f7f8 f8b9 	bl	800337c <HAL_PCD_EP_Transmit>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f83b 	bl	800b28c <USBD_Get_USB_Status>
 800b216:	4603      	mov	r3, r0
 800b218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	460b      	mov	r3, r1
 800b232:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b242:	7af9      	ldrb	r1, [r7, #11]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	f7f8 f835 	bl	80032b6 <HAL_PCD_EP_Receive>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	4618      	mov	r0, r3
 800b254:	f000 f81a 	bl	800b28c <USBD_Get_USB_Status>
 800b258:	4603      	mov	r3, r0
 800b25a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b25c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b278:	78fa      	ldrb	r2, [r7, #3]
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7f8 f865 	bl	800334c <HAL_PCD_EP_GetRxCount>
 800b282:	4603      	mov	r3, r0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	4603      	mov	r3, r0
 800b294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d817      	bhi.n	800b2d0 <USBD_Get_USB_Status+0x44>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <USBD_Get_USB_Status+0x1c>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2b9 	.word	0x0800b2b9
 800b2ac:	0800b2bf 	.word	0x0800b2bf
 800b2b0:	0800b2c5 	.word	0x0800b2c5
 800b2b4:	0800b2cb 	.word	0x0800b2cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b2bc:	e00b      	b.n	800b2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c2:	e008      	b.n	800b2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c8:	e005      	b.n	800b2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ce:	e002      	b.n	800b2d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d4:	bf00      	nop
  }
  return usb_status;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <__errno>:
 800b2e4:	4b01      	ldr	r3, [pc, #4]	; (800b2ec <__errno+0x8>)
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	20000188 	.word	0x20000188

0800b2f0 <__libc_init_array>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	4d0d      	ldr	r5, [pc, #52]	; (800b328 <__libc_init_array+0x38>)
 800b2f4:	4c0d      	ldr	r4, [pc, #52]	; (800b32c <__libc_init_array+0x3c>)
 800b2f6:	1b64      	subs	r4, r4, r5
 800b2f8:	10a4      	asrs	r4, r4, #2
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	d109      	bne.n	800b314 <__libc_init_array+0x24>
 800b300:	4d0b      	ldr	r5, [pc, #44]	; (800b330 <__libc_init_array+0x40>)
 800b302:	4c0c      	ldr	r4, [pc, #48]	; (800b334 <__libc_init_array+0x44>)
 800b304:	f001 f86c 	bl	800c3e0 <_init>
 800b308:	1b64      	subs	r4, r4, r5
 800b30a:	10a4      	asrs	r4, r4, #2
 800b30c:	2600      	movs	r6, #0
 800b30e:	42a6      	cmp	r6, r4
 800b310:	d105      	bne.n	800b31e <__libc_init_array+0x2e>
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	f855 3b04 	ldr.w	r3, [r5], #4
 800b318:	4798      	blx	r3
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7ee      	b.n	800b2fc <__libc_init_array+0xc>
 800b31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b322:	4798      	blx	r3
 800b324:	3601      	adds	r6, #1
 800b326:	e7f2      	b.n	800b30e <__libc_init_array+0x1e>
 800b328:	0800c938 	.word	0x0800c938
 800b32c:	0800c938 	.word	0x0800c938
 800b330:	0800c938 	.word	0x0800c938
 800b334:	0800c93c 	.word	0x0800c93c

0800b338 <malloc>:
 800b338:	4b02      	ldr	r3, [pc, #8]	; (800b344 <malloc+0xc>)
 800b33a:	4601      	mov	r1, r0
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	f000 b871 	b.w	800b424 <_malloc_r>
 800b342:	bf00      	nop
 800b344:	20000188 	.word	0x20000188

0800b348 <free>:
 800b348:	4b02      	ldr	r3, [pc, #8]	; (800b354 <free+0xc>)
 800b34a:	4601      	mov	r1, r0
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	f000 b819 	b.w	800b384 <_free_r>
 800b352:	bf00      	nop
 800b354:	20000188 	.word	0x20000188

0800b358 <memcpy>:
 800b358:	440a      	add	r2, r1
 800b35a:	4291      	cmp	r1, r2
 800b35c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b360:	d100      	bne.n	800b364 <memcpy+0xc>
 800b362:	4770      	bx	lr
 800b364:	b510      	push	{r4, lr}
 800b366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b36e:	4291      	cmp	r1, r2
 800b370:	d1f9      	bne.n	800b366 <memcpy+0xe>
 800b372:	bd10      	pop	{r4, pc}

0800b374 <memset>:
 800b374:	4402      	add	r2, r0
 800b376:	4603      	mov	r3, r0
 800b378:	4293      	cmp	r3, r2
 800b37a:	d100      	bne.n	800b37e <memset+0xa>
 800b37c:	4770      	bx	lr
 800b37e:	f803 1b01 	strb.w	r1, [r3], #1
 800b382:	e7f9      	b.n	800b378 <memset+0x4>

0800b384 <_free_r>:
 800b384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b386:	2900      	cmp	r1, #0
 800b388:	d048      	beq.n	800b41c <_free_r+0x98>
 800b38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38e:	9001      	str	r0, [sp, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f1a1 0404 	sub.w	r4, r1, #4
 800b396:	bfb8      	it	lt
 800b398:	18e4      	addlt	r4, r4, r3
 800b39a:	f000 fc31 	bl	800bc00 <__malloc_lock>
 800b39e:	4a20      	ldr	r2, [pc, #128]	; (800b420 <_free_r+0x9c>)
 800b3a0:	9801      	ldr	r0, [sp, #4]
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	b933      	cbnz	r3, 800b3b6 <_free_r+0x32>
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6014      	str	r4, [r2, #0]
 800b3ac:	b003      	add	sp, #12
 800b3ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3b2:	f000 bc2b 	b.w	800bc0c <__malloc_unlock>
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	d90b      	bls.n	800b3d2 <_free_r+0x4e>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	1862      	adds	r2, r4, r1
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	bf04      	itt	eq
 800b3c2:	681a      	ldreq	r2, [r3, #0]
 800b3c4:	685b      	ldreq	r3, [r3, #4]
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	bf04      	itt	eq
 800b3ca:	1852      	addeq	r2, r2, r1
 800b3cc:	6022      	streq	r2, [r4, #0]
 800b3ce:	602c      	str	r4, [r5, #0]
 800b3d0:	e7ec      	b.n	800b3ac <_free_r+0x28>
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	b10b      	cbz	r3, 800b3dc <_free_r+0x58>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d9fa      	bls.n	800b3d2 <_free_r+0x4e>
 800b3dc:	6811      	ldr	r1, [r2, #0]
 800b3de:	1855      	adds	r5, r2, r1
 800b3e0:	42a5      	cmp	r5, r4
 800b3e2:	d10b      	bne.n	800b3fc <_free_r+0x78>
 800b3e4:	6824      	ldr	r4, [r4, #0]
 800b3e6:	4421      	add	r1, r4
 800b3e8:	1854      	adds	r4, r2, r1
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	d1dd      	bne.n	800b3ac <_free_r+0x28>
 800b3f0:	681c      	ldr	r4, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	6053      	str	r3, [r2, #4]
 800b3f6:	4421      	add	r1, r4
 800b3f8:	6011      	str	r1, [r2, #0]
 800b3fa:	e7d7      	b.n	800b3ac <_free_r+0x28>
 800b3fc:	d902      	bls.n	800b404 <_free_r+0x80>
 800b3fe:	230c      	movs	r3, #12
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	e7d3      	b.n	800b3ac <_free_r+0x28>
 800b404:	6825      	ldr	r5, [r4, #0]
 800b406:	1961      	adds	r1, r4, r5
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf04      	itt	eq
 800b40c:	6819      	ldreq	r1, [r3, #0]
 800b40e:	685b      	ldreq	r3, [r3, #4]
 800b410:	6063      	str	r3, [r4, #4]
 800b412:	bf04      	itt	eq
 800b414:	1949      	addeq	r1, r1, r5
 800b416:	6021      	streq	r1, [r4, #0]
 800b418:	6054      	str	r4, [r2, #4]
 800b41a:	e7c7      	b.n	800b3ac <_free_r+0x28>
 800b41c:	b003      	add	sp, #12
 800b41e:	bd30      	pop	{r4, r5, pc}
 800b420:	20004b1c 	.word	0x20004b1c

0800b424 <_malloc_r>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	1ccd      	adds	r5, r1, #3
 800b428:	f025 0503 	bic.w	r5, r5, #3
 800b42c:	3508      	adds	r5, #8
 800b42e:	2d0c      	cmp	r5, #12
 800b430:	bf38      	it	cc
 800b432:	250c      	movcc	r5, #12
 800b434:	2d00      	cmp	r5, #0
 800b436:	4606      	mov	r6, r0
 800b438:	db01      	blt.n	800b43e <_malloc_r+0x1a>
 800b43a:	42a9      	cmp	r1, r5
 800b43c:	d903      	bls.n	800b446 <_malloc_r+0x22>
 800b43e:	230c      	movs	r3, #12
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	2000      	movs	r0, #0
 800b444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b446:	f000 fbdb 	bl	800bc00 <__malloc_lock>
 800b44a:	4921      	ldr	r1, [pc, #132]	; (800b4d0 <_malloc_r+0xac>)
 800b44c:	680a      	ldr	r2, [r1, #0]
 800b44e:	4614      	mov	r4, r2
 800b450:	b99c      	cbnz	r4, 800b47a <_malloc_r+0x56>
 800b452:	4f20      	ldr	r7, [pc, #128]	; (800b4d4 <_malloc_r+0xb0>)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	b923      	cbnz	r3, 800b462 <_malloc_r+0x3e>
 800b458:	4621      	mov	r1, r4
 800b45a:	4630      	mov	r0, r6
 800b45c:	f000 f8b2 	bl	800b5c4 <_sbrk_r>
 800b460:	6038      	str	r0, [r7, #0]
 800b462:	4629      	mov	r1, r5
 800b464:	4630      	mov	r0, r6
 800b466:	f000 f8ad 	bl	800b5c4 <_sbrk_r>
 800b46a:	1c43      	adds	r3, r0, #1
 800b46c:	d123      	bne.n	800b4b6 <_malloc_r+0x92>
 800b46e:	230c      	movs	r3, #12
 800b470:	6033      	str	r3, [r6, #0]
 800b472:	4630      	mov	r0, r6
 800b474:	f000 fbca 	bl	800bc0c <__malloc_unlock>
 800b478:	e7e3      	b.n	800b442 <_malloc_r+0x1e>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	1b5b      	subs	r3, r3, r5
 800b47e:	d417      	bmi.n	800b4b0 <_malloc_r+0x8c>
 800b480:	2b0b      	cmp	r3, #11
 800b482:	d903      	bls.n	800b48c <_malloc_r+0x68>
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	441c      	add	r4, r3
 800b488:	6025      	str	r5, [r4, #0]
 800b48a:	e004      	b.n	800b496 <_malloc_r+0x72>
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	42a2      	cmp	r2, r4
 800b490:	bf0c      	ite	eq
 800b492:	600b      	streq	r3, [r1, #0]
 800b494:	6053      	strne	r3, [r2, #4]
 800b496:	4630      	mov	r0, r6
 800b498:	f000 fbb8 	bl	800bc0c <__malloc_unlock>
 800b49c:	f104 000b 	add.w	r0, r4, #11
 800b4a0:	1d23      	adds	r3, r4, #4
 800b4a2:	f020 0007 	bic.w	r0, r0, #7
 800b4a6:	1ac2      	subs	r2, r0, r3
 800b4a8:	d0cc      	beq.n	800b444 <_malloc_r+0x20>
 800b4aa:	1a1b      	subs	r3, r3, r0
 800b4ac:	50a3      	str	r3, [r4, r2]
 800b4ae:	e7c9      	b.n	800b444 <_malloc_r+0x20>
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	6864      	ldr	r4, [r4, #4]
 800b4b4:	e7cc      	b.n	800b450 <_malloc_r+0x2c>
 800b4b6:	1cc4      	adds	r4, r0, #3
 800b4b8:	f024 0403 	bic.w	r4, r4, #3
 800b4bc:	42a0      	cmp	r0, r4
 800b4be:	d0e3      	beq.n	800b488 <_malloc_r+0x64>
 800b4c0:	1a21      	subs	r1, r4, r0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 f87e 	bl	800b5c4 <_sbrk_r>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d1dd      	bne.n	800b488 <_malloc_r+0x64>
 800b4cc:	e7cf      	b.n	800b46e <_malloc_r+0x4a>
 800b4ce:	bf00      	nop
 800b4d0:	20004b1c 	.word	0x20004b1c
 800b4d4:	20004b20 	.word	0x20004b20

0800b4d8 <_puts_r>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	460e      	mov	r6, r1
 800b4dc:	4605      	mov	r5, r0
 800b4de:	b118      	cbz	r0, 800b4e8 <_puts_r+0x10>
 800b4e0:	6983      	ldr	r3, [r0, #24]
 800b4e2:	b90b      	cbnz	r3, 800b4e8 <_puts_r+0x10>
 800b4e4:	f000 fa88 	bl	800b9f8 <__sinit>
 800b4e8:	69ab      	ldr	r3, [r5, #24]
 800b4ea:	68ac      	ldr	r4, [r5, #8]
 800b4ec:	b913      	cbnz	r3, 800b4f4 <_puts_r+0x1c>
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	f000 fa82 	bl	800b9f8 <__sinit>
 800b4f4:	4b2c      	ldr	r3, [pc, #176]	; (800b5a8 <_puts_r+0xd0>)
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d120      	bne.n	800b53c <_puts_r+0x64>
 800b4fa:	686c      	ldr	r4, [r5, #4]
 800b4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4fe:	07db      	lsls	r3, r3, #31
 800b500:	d405      	bmi.n	800b50e <_puts_r+0x36>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	0598      	lsls	r0, r3, #22
 800b506:	d402      	bmi.n	800b50e <_puts_r+0x36>
 800b508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50a:	f000 fb13 	bl	800bb34 <__retarget_lock_acquire_recursive>
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	0719      	lsls	r1, r3, #28
 800b512:	d51d      	bpl.n	800b550 <_puts_r+0x78>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	b1db      	cbz	r3, 800b550 <_puts_r+0x78>
 800b518:	3e01      	subs	r6, #1
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b520:	3b01      	subs	r3, #1
 800b522:	60a3      	str	r3, [r4, #8]
 800b524:	bb39      	cbnz	r1, 800b576 <_puts_r+0x9e>
 800b526:	2b00      	cmp	r3, #0
 800b528:	da38      	bge.n	800b59c <_puts_r+0xc4>
 800b52a:	4622      	mov	r2, r4
 800b52c:	210a      	movs	r1, #10
 800b52e:	4628      	mov	r0, r5
 800b530:	f000 f888 	bl	800b644 <__swbuf_r>
 800b534:	3001      	adds	r0, #1
 800b536:	d011      	beq.n	800b55c <_puts_r+0x84>
 800b538:	250a      	movs	r5, #10
 800b53a:	e011      	b.n	800b560 <_puts_r+0x88>
 800b53c:	4b1b      	ldr	r3, [pc, #108]	; (800b5ac <_puts_r+0xd4>)
 800b53e:	429c      	cmp	r4, r3
 800b540:	d101      	bne.n	800b546 <_puts_r+0x6e>
 800b542:	68ac      	ldr	r4, [r5, #8]
 800b544:	e7da      	b.n	800b4fc <_puts_r+0x24>
 800b546:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <_puts_r+0xd8>)
 800b548:	429c      	cmp	r4, r3
 800b54a:	bf08      	it	eq
 800b54c:	68ec      	ldreq	r4, [r5, #12]
 800b54e:	e7d5      	b.n	800b4fc <_puts_r+0x24>
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f000 f8c8 	bl	800b6e8 <__swsetup_r>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d0dd      	beq.n	800b518 <_puts_r+0x40>
 800b55c:	f04f 35ff 	mov.w	r5, #4294967295
 800b560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b562:	07da      	lsls	r2, r3, #31
 800b564:	d405      	bmi.n	800b572 <_puts_r+0x9a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	059b      	lsls	r3, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_puts_r+0x9a>
 800b56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b56e:	f000 fae2 	bl	800bb36 <__retarget_lock_release_recursive>
 800b572:	4628      	mov	r0, r5
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	2b00      	cmp	r3, #0
 800b578:	da04      	bge.n	800b584 <_puts_r+0xac>
 800b57a:	69a2      	ldr	r2, [r4, #24]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	dc06      	bgt.n	800b58e <_puts_r+0xb6>
 800b580:	290a      	cmp	r1, #10
 800b582:	d004      	beq.n	800b58e <_puts_r+0xb6>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	6022      	str	r2, [r4, #0]
 800b58a:	7019      	strb	r1, [r3, #0]
 800b58c:	e7c5      	b.n	800b51a <_puts_r+0x42>
 800b58e:	4622      	mov	r2, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f000 f857 	bl	800b644 <__swbuf_r>
 800b596:	3001      	adds	r0, #1
 800b598:	d1bf      	bne.n	800b51a <_puts_r+0x42>
 800b59a:	e7df      	b.n	800b55c <_puts_r+0x84>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	250a      	movs	r5, #10
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	701d      	strb	r5, [r3, #0]
 800b5a6:	e7db      	b.n	800b560 <_puts_r+0x88>
 800b5a8:	0800c8bc 	.word	0x0800c8bc
 800b5ac:	0800c8dc 	.word	0x0800c8dc
 800b5b0:	0800c89c 	.word	0x0800c89c

0800b5b4 <puts>:
 800b5b4:	4b02      	ldr	r3, [pc, #8]	; (800b5c0 <puts+0xc>)
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	f7ff bf8d 	b.w	800b4d8 <_puts_r>
 800b5be:	bf00      	nop
 800b5c0:	20000188 	.word	0x20000188

0800b5c4 <_sbrk_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d06      	ldr	r5, [pc, #24]	; (800b5e0 <_sbrk_r+0x1c>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	f7f5 ff58 	bl	8001484 <_sbrk>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_sbrk_r+0x1a>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_sbrk_r+0x1a>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	2000660c 	.word	0x2000660c

0800b5e4 <siprintf>:
 800b5e4:	b40e      	push	{r1, r2, r3}
 800b5e6:	b500      	push	{lr}
 800b5e8:	b09c      	sub	sp, #112	; 0x70
 800b5ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b5ec:	9002      	str	r0, [sp, #8]
 800b5ee:	9006      	str	r0, [sp, #24]
 800b5f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5f4:	4809      	ldr	r0, [pc, #36]	; (800b61c <siprintf+0x38>)
 800b5f6:	9107      	str	r1, [sp, #28]
 800b5f8:	9104      	str	r1, [sp, #16]
 800b5fa:	4909      	ldr	r1, [pc, #36]	; (800b620 <siprintf+0x3c>)
 800b5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b600:	9105      	str	r1, [sp, #20]
 800b602:	6800      	ldr	r0, [r0, #0]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	a902      	add	r1, sp, #8
 800b608:	f000 fb62 	bl	800bcd0 <_svfiprintf_r>
 800b60c:	9b02      	ldr	r3, [sp, #8]
 800b60e:	2200      	movs	r2, #0
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	b01c      	add	sp, #112	; 0x70
 800b614:	f85d eb04 	ldr.w	lr, [sp], #4
 800b618:	b003      	add	sp, #12
 800b61a:	4770      	bx	lr
 800b61c:	20000188 	.word	0x20000188
 800b620:	ffff0208 	.word	0xffff0208

0800b624 <strcat>:
 800b624:	b510      	push	{r4, lr}
 800b626:	4602      	mov	r2, r0
 800b628:	7814      	ldrb	r4, [r2, #0]
 800b62a:	4613      	mov	r3, r2
 800b62c:	3201      	adds	r2, #1
 800b62e:	2c00      	cmp	r4, #0
 800b630:	d1fa      	bne.n	800b628 <strcat+0x4>
 800b632:	3b01      	subs	r3, #1
 800b634:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b638:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	d1f9      	bne.n	800b634 <strcat+0x10>
 800b640:	bd10      	pop	{r4, pc}
	...

0800b644 <__swbuf_r>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	460e      	mov	r6, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	4605      	mov	r5, r0
 800b64c:	b118      	cbz	r0, 800b656 <__swbuf_r+0x12>
 800b64e:	6983      	ldr	r3, [r0, #24]
 800b650:	b90b      	cbnz	r3, 800b656 <__swbuf_r+0x12>
 800b652:	f000 f9d1 	bl	800b9f8 <__sinit>
 800b656:	4b21      	ldr	r3, [pc, #132]	; (800b6dc <__swbuf_r+0x98>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d12b      	bne.n	800b6b4 <__swbuf_r+0x70>
 800b65c:	686c      	ldr	r4, [r5, #4]
 800b65e:	69a3      	ldr	r3, [r4, #24]
 800b660:	60a3      	str	r3, [r4, #8]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	071a      	lsls	r2, r3, #28
 800b666:	d52f      	bpl.n	800b6c8 <__swbuf_r+0x84>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	b36b      	cbz	r3, 800b6c8 <__swbuf_r+0x84>
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	1ac0      	subs	r0, r0, r3
 800b672:	6963      	ldr	r3, [r4, #20]
 800b674:	b2f6      	uxtb	r6, r6
 800b676:	4283      	cmp	r3, r0
 800b678:	4637      	mov	r7, r6
 800b67a:	dc04      	bgt.n	800b686 <__swbuf_r+0x42>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 f926 	bl	800b8d0 <_fflush_r>
 800b684:	bb30      	cbnz	r0, 800b6d4 <__swbuf_r+0x90>
 800b686:	68a3      	ldr	r3, [r4, #8]
 800b688:	3b01      	subs	r3, #1
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	6022      	str	r2, [r4, #0]
 800b692:	701e      	strb	r6, [r3, #0]
 800b694:	6963      	ldr	r3, [r4, #20]
 800b696:	3001      	adds	r0, #1
 800b698:	4283      	cmp	r3, r0
 800b69a:	d004      	beq.n	800b6a6 <__swbuf_r+0x62>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	07db      	lsls	r3, r3, #31
 800b6a0:	d506      	bpl.n	800b6b0 <__swbuf_r+0x6c>
 800b6a2:	2e0a      	cmp	r6, #10
 800b6a4:	d104      	bne.n	800b6b0 <__swbuf_r+0x6c>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f911 	bl	800b8d0 <_fflush_r>
 800b6ae:	b988      	cbnz	r0, 800b6d4 <__swbuf_r+0x90>
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <__swbuf_r+0x9c>)
 800b6b6:	429c      	cmp	r4, r3
 800b6b8:	d101      	bne.n	800b6be <__swbuf_r+0x7a>
 800b6ba:	68ac      	ldr	r4, [r5, #8]
 800b6bc:	e7cf      	b.n	800b65e <__swbuf_r+0x1a>
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <__swbuf_r+0xa0>)
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	bf08      	it	eq
 800b6c4:	68ec      	ldreq	r4, [r5, #12]
 800b6c6:	e7ca      	b.n	800b65e <__swbuf_r+0x1a>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f000 f80c 	bl	800b6e8 <__swsetup_r>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0cb      	beq.n	800b66c <__swbuf_r+0x28>
 800b6d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d8:	e7ea      	b.n	800b6b0 <__swbuf_r+0x6c>
 800b6da:	bf00      	nop
 800b6dc:	0800c8bc 	.word	0x0800c8bc
 800b6e0:	0800c8dc 	.word	0x0800c8dc
 800b6e4:	0800c89c 	.word	0x0800c89c

0800b6e8 <__swsetup_r>:
 800b6e8:	4b32      	ldr	r3, [pc, #200]	; (800b7b4 <__swsetup_r+0xcc>)
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	681d      	ldr	r5, [r3, #0]
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	b125      	cbz	r5, 800b6fe <__swsetup_r+0x16>
 800b6f4:	69ab      	ldr	r3, [r5, #24]
 800b6f6:	b913      	cbnz	r3, 800b6fe <__swsetup_r+0x16>
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 f97d 	bl	800b9f8 <__sinit>
 800b6fe:	4b2e      	ldr	r3, [pc, #184]	; (800b7b8 <__swsetup_r+0xd0>)
 800b700:	429c      	cmp	r4, r3
 800b702:	d10f      	bne.n	800b724 <__swsetup_r+0x3c>
 800b704:	686c      	ldr	r4, [r5, #4]
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b70c:	0719      	lsls	r1, r3, #28
 800b70e:	d42c      	bmi.n	800b76a <__swsetup_r+0x82>
 800b710:	06dd      	lsls	r5, r3, #27
 800b712:	d411      	bmi.n	800b738 <__swsetup_r+0x50>
 800b714:	2309      	movs	r3, #9
 800b716:	6033      	str	r3, [r6, #0]
 800b718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295
 800b722:	e03e      	b.n	800b7a2 <__swsetup_r+0xba>
 800b724:	4b25      	ldr	r3, [pc, #148]	; (800b7bc <__swsetup_r+0xd4>)
 800b726:	429c      	cmp	r4, r3
 800b728:	d101      	bne.n	800b72e <__swsetup_r+0x46>
 800b72a:	68ac      	ldr	r4, [r5, #8]
 800b72c:	e7eb      	b.n	800b706 <__swsetup_r+0x1e>
 800b72e:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <__swsetup_r+0xd8>)
 800b730:	429c      	cmp	r4, r3
 800b732:	bf08      	it	eq
 800b734:	68ec      	ldreq	r4, [r5, #12]
 800b736:	e7e6      	b.n	800b706 <__swsetup_r+0x1e>
 800b738:	0758      	lsls	r0, r3, #29
 800b73a:	d512      	bpl.n	800b762 <__swsetup_r+0x7a>
 800b73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73e:	b141      	cbz	r1, 800b752 <__swsetup_r+0x6a>
 800b740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b744:	4299      	cmp	r1, r3
 800b746:	d002      	beq.n	800b74e <__swsetup_r+0x66>
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff fe1b 	bl	800b384 <_free_r>
 800b74e:	2300      	movs	r3, #0
 800b750:	6363      	str	r3, [r4, #52]	; 0x34
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b758:	81a3      	strh	r3, [r4, #12]
 800b75a:	2300      	movs	r3, #0
 800b75c:	6063      	str	r3, [r4, #4]
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	f043 0308 	orr.w	r3, r3, #8
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	b94b      	cbnz	r3, 800b782 <__swsetup_r+0x9a>
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b778:	d003      	beq.n	800b782 <__swsetup_r+0x9a>
 800b77a:	4621      	mov	r1, r4
 800b77c:	4630      	mov	r0, r6
 800b77e:	f000 f9ff 	bl	800bb80 <__smakebuf_r>
 800b782:	89a0      	ldrh	r0, [r4, #12]
 800b784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b788:	f010 0301 	ands.w	r3, r0, #1
 800b78c:	d00a      	beq.n	800b7a4 <__swsetup_r+0xbc>
 800b78e:	2300      	movs	r3, #0
 800b790:	60a3      	str	r3, [r4, #8]
 800b792:	6963      	ldr	r3, [r4, #20]
 800b794:	425b      	negs	r3, r3
 800b796:	61a3      	str	r3, [r4, #24]
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	b943      	cbnz	r3, 800b7ae <__swsetup_r+0xc6>
 800b79c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7a0:	d1ba      	bne.n	800b718 <__swsetup_r+0x30>
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	0781      	lsls	r1, r0, #30
 800b7a6:	bf58      	it	pl
 800b7a8:	6963      	ldrpl	r3, [r4, #20]
 800b7aa:	60a3      	str	r3, [r4, #8]
 800b7ac:	e7f4      	b.n	800b798 <__swsetup_r+0xb0>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	e7f7      	b.n	800b7a2 <__swsetup_r+0xba>
 800b7b2:	bf00      	nop
 800b7b4:	20000188 	.word	0x20000188
 800b7b8:	0800c8bc 	.word	0x0800c8bc
 800b7bc:	0800c8dc 	.word	0x0800c8dc
 800b7c0:	0800c89c 	.word	0x0800c89c

0800b7c4 <__sflush_r>:
 800b7c4:	898a      	ldrh	r2, [r1, #12]
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	0710      	lsls	r0, r2, #28
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	d458      	bmi.n	800b884 <__sflush_r+0xc0>
 800b7d2:	684b      	ldr	r3, [r1, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dc05      	bgt.n	800b7e4 <__sflush_r+0x20>
 800b7d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dc02      	bgt.n	800b7e4 <__sflush_r+0x20>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7e6:	2e00      	cmp	r6, #0
 800b7e8:	d0f9      	beq.n	800b7de <__sflush_r+0x1a>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7f0:	682f      	ldr	r7, [r5, #0]
 800b7f2:	602b      	str	r3, [r5, #0]
 800b7f4:	d032      	beq.n	800b85c <__sflush_r+0x98>
 800b7f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	075a      	lsls	r2, r3, #29
 800b7fc:	d505      	bpl.n	800b80a <__sflush_r+0x46>
 800b7fe:	6863      	ldr	r3, [r4, #4]
 800b800:	1ac0      	subs	r0, r0, r3
 800b802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b804:	b10b      	cbz	r3, 800b80a <__sflush_r+0x46>
 800b806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b808:	1ac0      	subs	r0, r0, r3
 800b80a:	2300      	movs	r3, #0
 800b80c:	4602      	mov	r2, r0
 800b80e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b810:	6a21      	ldr	r1, [r4, #32]
 800b812:	4628      	mov	r0, r5
 800b814:	47b0      	blx	r6
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	d106      	bne.n	800b82a <__sflush_r+0x66>
 800b81c:	6829      	ldr	r1, [r5, #0]
 800b81e:	291d      	cmp	r1, #29
 800b820:	d82c      	bhi.n	800b87c <__sflush_r+0xb8>
 800b822:	4a2a      	ldr	r2, [pc, #168]	; (800b8cc <__sflush_r+0x108>)
 800b824:	40ca      	lsrs	r2, r1
 800b826:	07d6      	lsls	r6, r2, #31
 800b828:	d528      	bpl.n	800b87c <__sflush_r+0xb8>
 800b82a:	2200      	movs	r2, #0
 800b82c:	6062      	str	r2, [r4, #4]
 800b82e:	04d9      	lsls	r1, r3, #19
 800b830:	6922      	ldr	r2, [r4, #16]
 800b832:	6022      	str	r2, [r4, #0]
 800b834:	d504      	bpl.n	800b840 <__sflush_r+0x7c>
 800b836:	1c42      	adds	r2, r0, #1
 800b838:	d101      	bne.n	800b83e <__sflush_r+0x7a>
 800b83a:	682b      	ldr	r3, [r5, #0]
 800b83c:	b903      	cbnz	r3, 800b840 <__sflush_r+0x7c>
 800b83e:	6560      	str	r0, [r4, #84]	; 0x54
 800b840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b842:	602f      	str	r7, [r5, #0]
 800b844:	2900      	cmp	r1, #0
 800b846:	d0ca      	beq.n	800b7de <__sflush_r+0x1a>
 800b848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b84c:	4299      	cmp	r1, r3
 800b84e:	d002      	beq.n	800b856 <__sflush_r+0x92>
 800b850:	4628      	mov	r0, r5
 800b852:	f7ff fd97 	bl	800b384 <_free_r>
 800b856:	2000      	movs	r0, #0
 800b858:	6360      	str	r0, [r4, #52]	; 0x34
 800b85a:	e7c1      	b.n	800b7e0 <__sflush_r+0x1c>
 800b85c:	6a21      	ldr	r1, [r4, #32]
 800b85e:	2301      	movs	r3, #1
 800b860:	4628      	mov	r0, r5
 800b862:	47b0      	blx	r6
 800b864:	1c41      	adds	r1, r0, #1
 800b866:	d1c7      	bne.n	800b7f8 <__sflush_r+0x34>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0c4      	beq.n	800b7f8 <__sflush_r+0x34>
 800b86e:	2b1d      	cmp	r3, #29
 800b870:	d001      	beq.n	800b876 <__sflush_r+0xb2>
 800b872:	2b16      	cmp	r3, #22
 800b874:	d101      	bne.n	800b87a <__sflush_r+0xb6>
 800b876:	602f      	str	r7, [r5, #0]
 800b878:	e7b1      	b.n	800b7de <__sflush_r+0x1a>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	e7ad      	b.n	800b7e0 <__sflush_r+0x1c>
 800b884:	690f      	ldr	r7, [r1, #16]
 800b886:	2f00      	cmp	r7, #0
 800b888:	d0a9      	beq.n	800b7de <__sflush_r+0x1a>
 800b88a:	0793      	lsls	r3, r2, #30
 800b88c:	680e      	ldr	r6, [r1, #0]
 800b88e:	bf08      	it	eq
 800b890:	694b      	ldreq	r3, [r1, #20]
 800b892:	600f      	str	r7, [r1, #0]
 800b894:	bf18      	it	ne
 800b896:	2300      	movne	r3, #0
 800b898:	eba6 0807 	sub.w	r8, r6, r7
 800b89c:	608b      	str	r3, [r1, #8]
 800b89e:	f1b8 0f00 	cmp.w	r8, #0
 800b8a2:	dd9c      	ble.n	800b7de <__sflush_r+0x1a>
 800b8a4:	6a21      	ldr	r1, [r4, #32]
 800b8a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8a8:	4643      	mov	r3, r8
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b0      	blx	r6
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	dc06      	bgt.n	800b8c2 <__sflush_r+0xfe>
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c0:	e78e      	b.n	800b7e0 <__sflush_r+0x1c>
 800b8c2:	4407      	add	r7, r0
 800b8c4:	eba8 0800 	sub.w	r8, r8, r0
 800b8c8:	e7e9      	b.n	800b89e <__sflush_r+0xda>
 800b8ca:	bf00      	nop
 800b8cc:	20400001 	.word	0x20400001

0800b8d0 <_fflush_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	690b      	ldr	r3, [r1, #16]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	b913      	cbnz	r3, 800b8e0 <_fflush_r+0x10>
 800b8da:	2500      	movs	r5, #0
 800b8dc:	4628      	mov	r0, r5
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	b118      	cbz	r0, 800b8ea <_fflush_r+0x1a>
 800b8e2:	6983      	ldr	r3, [r0, #24]
 800b8e4:	b90b      	cbnz	r3, 800b8ea <_fflush_r+0x1a>
 800b8e6:	f000 f887 	bl	800b9f8 <__sinit>
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <_fflush_r+0x6c>)
 800b8ec:	429c      	cmp	r4, r3
 800b8ee:	d11b      	bne.n	800b928 <_fflush_r+0x58>
 800b8f0:	686c      	ldr	r4, [r5, #4]
 800b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0ef      	beq.n	800b8da <_fflush_r+0xa>
 800b8fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8fc:	07d0      	lsls	r0, r2, #31
 800b8fe:	d404      	bmi.n	800b90a <_fflush_r+0x3a>
 800b900:	0599      	lsls	r1, r3, #22
 800b902:	d402      	bmi.n	800b90a <_fflush_r+0x3a>
 800b904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b906:	f000 f915 	bl	800bb34 <__retarget_lock_acquire_recursive>
 800b90a:	4628      	mov	r0, r5
 800b90c:	4621      	mov	r1, r4
 800b90e:	f7ff ff59 	bl	800b7c4 <__sflush_r>
 800b912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b914:	07da      	lsls	r2, r3, #31
 800b916:	4605      	mov	r5, r0
 800b918:	d4e0      	bmi.n	800b8dc <_fflush_r+0xc>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	059b      	lsls	r3, r3, #22
 800b91e:	d4dd      	bmi.n	800b8dc <_fflush_r+0xc>
 800b920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b922:	f000 f908 	bl	800bb36 <__retarget_lock_release_recursive>
 800b926:	e7d9      	b.n	800b8dc <_fflush_r+0xc>
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <_fflush_r+0x70>)
 800b92a:	429c      	cmp	r4, r3
 800b92c:	d101      	bne.n	800b932 <_fflush_r+0x62>
 800b92e:	68ac      	ldr	r4, [r5, #8]
 800b930:	e7df      	b.n	800b8f2 <_fflush_r+0x22>
 800b932:	4b04      	ldr	r3, [pc, #16]	; (800b944 <_fflush_r+0x74>)
 800b934:	429c      	cmp	r4, r3
 800b936:	bf08      	it	eq
 800b938:	68ec      	ldreq	r4, [r5, #12]
 800b93a:	e7da      	b.n	800b8f2 <_fflush_r+0x22>
 800b93c:	0800c8bc 	.word	0x0800c8bc
 800b940:	0800c8dc 	.word	0x0800c8dc
 800b944:	0800c89c 	.word	0x0800c89c

0800b948 <std>:
 800b948:	2300      	movs	r3, #0
 800b94a:	b510      	push	{r4, lr}
 800b94c:	4604      	mov	r4, r0
 800b94e:	e9c0 3300 	strd	r3, r3, [r0]
 800b952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b956:	6083      	str	r3, [r0, #8]
 800b958:	8181      	strh	r1, [r0, #12]
 800b95a:	6643      	str	r3, [r0, #100]	; 0x64
 800b95c:	81c2      	strh	r2, [r0, #14]
 800b95e:	6183      	str	r3, [r0, #24]
 800b960:	4619      	mov	r1, r3
 800b962:	2208      	movs	r2, #8
 800b964:	305c      	adds	r0, #92	; 0x5c
 800b966:	f7ff fd05 	bl	800b374 <memset>
 800b96a:	4b05      	ldr	r3, [pc, #20]	; (800b980 <std+0x38>)
 800b96c:	6263      	str	r3, [r4, #36]	; 0x24
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <std+0x3c>)
 800b970:	62a3      	str	r3, [r4, #40]	; 0x28
 800b972:	4b05      	ldr	r3, [pc, #20]	; (800b988 <std+0x40>)
 800b974:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <std+0x44>)
 800b978:	6224      	str	r4, [r4, #32]
 800b97a:	6323      	str	r3, [r4, #48]	; 0x30
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	bf00      	nop
 800b980:	0800c1f9 	.word	0x0800c1f9
 800b984:	0800c21b 	.word	0x0800c21b
 800b988:	0800c253 	.word	0x0800c253
 800b98c:	0800c277 	.word	0x0800c277

0800b990 <_cleanup_r>:
 800b990:	4901      	ldr	r1, [pc, #4]	; (800b998 <_cleanup_r+0x8>)
 800b992:	f000 b8af 	b.w	800baf4 <_fwalk_reent>
 800b996:	bf00      	nop
 800b998:	0800b8d1 	.word	0x0800b8d1

0800b99c <__sfmoreglue>:
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	1e4a      	subs	r2, r1, #1
 800b9a0:	2568      	movs	r5, #104	; 0x68
 800b9a2:	4355      	muls	r5, r2
 800b9a4:	460e      	mov	r6, r1
 800b9a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9aa:	f7ff fd3b 	bl	800b424 <_malloc_r>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	b140      	cbz	r0, 800b9c4 <__sfmoreglue+0x28>
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b9b8:	300c      	adds	r0, #12
 800b9ba:	60a0      	str	r0, [r4, #8]
 800b9bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9c0:	f7ff fcd8 	bl	800b374 <memset>
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}

0800b9c8 <__sfp_lock_acquire>:
 800b9c8:	4801      	ldr	r0, [pc, #4]	; (800b9d0 <__sfp_lock_acquire+0x8>)
 800b9ca:	f000 b8b3 	b.w	800bb34 <__retarget_lock_acquire_recursive>
 800b9ce:	bf00      	nop
 800b9d0:	20006608 	.word	0x20006608

0800b9d4 <__sfp_lock_release>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__sfp_lock_release+0x8>)
 800b9d6:	f000 b8ae 	b.w	800bb36 <__retarget_lock_release_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20006608 	.word	0x20006608

0800b9e0 <__sinit_lock_acquire>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	; (800b9e8 <__sinit_lock_acquire+0x8>)
 800b9e2:	f000 b8a7 	b.w	800bb34 <__retarget_lock_acquire_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20006603 	.word	0x20006603

0800b9ec <__sinit_lock_release>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	; (800b9f4 <__sinit_lock_release+0x8>)
 800b9ee:	f000 b8a2 	b.w	800bb36 <__retarget_lock_release_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20006603 	.word	0x20006603

0800b9f8 <__sinit>:
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	f7ff fff0 	bl	800b9e0 <__sinit_lock_acquire>
 800ba00:	69a3      	ldr	r3, [r4, #24]
 800ba02:	b11b      	cbz	r3, 800ba0c <__sinit+0x14>
 800ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba08:	f7ff bff0 	b.w	800b9ec <__sinit_lock_release>
 800ba0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba10:	6523      	str	r3, [r4, #80]	; 0x50
 800ba12:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <__sinit+0x68>)
 800ba14:	4a13      	ldr	r2, [pc, #76]	; (800ba64 <__sinit+0x6c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	bf04      	itt	eq
 800ba1e:	2301      	moveq	r3, #1
 800ba20:	61a3      	streq	r3, [r4, #24]
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f820 	bl	800ba68 <__sfp>
 800ba28:	6060      	str	r0, [r4, #4]
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 f81c 	bl	800ba68 <__sfp>
 800ba30:	60a0      	str	r0, [r4, #8]
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f818 	bl	800ba68 <__sfp>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	60e0      	str	r0, [r4, #12]
 800ba3c:	2104      	movs	r1, #4
 800ba3e:	6860      	ldr	r0, [r4, #4]
 800ba40:	f7ff ff82 	bl	800b948 <std>
 800ba44:	68a0      	ldr	r0, [r4, #8]
 800ba46:	2201      	movs	r2, #1
 800ba48:	2109      	movs	r1, #9
 800ba4a:	f7ff ff7d 	bl	800b948 <std>
 800ba4e:	68e0      	ldr	r0, [r4, #12]
 800ba50:	2202      	movs	r2, #2
 800ba52:	2112      	movs	r1, #18
 800ba54:	f7ff ff78 	bl	800b948 <std>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	61a3      	str	r3, [r4, #24]
 800ba5c:	e7d2      	b.n	800ba04 <__sinit+0xc>
 800ba5e:	bf00      	nop
 800ba60:	0800c898 	.word	0x0800c898
 800ba64:	0800b991 	.word	0x0800b991

0800ba68 <__sfp>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	f7ff ffac 	bl	800b9c8 <__sfp_lock_acquire>
 800ba70:	4b1e      	ldr	r3, [pc, #120]	; (800baec <__sfp+0x84>)
 800ba72:	681e      	ldr	r6, [r3, #0]
 800ba74:	69b3      	ldr	r3, [r6, #24]
 800ba76:	b913      	cbnz	r3, 800ba7e <__sfp+0x16>
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff ffbd 	bl	800b9f8 <__sinit>
 800ba7e:	3648      	adds	r6, #72	; 0x48
 800ba80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	d503      	bpl.n	800ba90 <__sfp+0x28>
 800ba88:	6833      	ldr	r3, [r6, #0]
 800ba8a:	b30b      	cbz	r3, 800bad0 <__sfp+0x68>
 800ba8c:	6836      	ldr	r6, [r6, #0]
 800ba8e:	e7f7      	b.n	800ba80 <__sfp+0x18>
 800ba90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba94:	b9d5      	cbnz	r5, 800bacc <__sfp+0x64>
 800ba96:	4b16      	ldr	r3, [pc, #88]	; (800baf0 <__sfp+0x88>)
 800ba98:	60e3      	str	r3, [r4, #12]
 800ba9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba9e:	6665      	str	r5, [r4, #100]	; 0x64
 800baa0:	f000 f847 	bl	800bb32 <__retarget_lock_init_recursive>
 800baa4:	f7ff ff96 	bl	800b9d4 <__sfp_lock_release>
 800baa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800baac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bab0:	6025      	str	r5, [r4, #0]
 800bab2:	61a5      	str	r5, [r4, #24]
 800bab4:	2208      	movs	r2, #8
 800bab6:	4629      	mov	r1, r5
 800bab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800babc:	f7ff fc5a 	bl	800b374 <memset>
 800bac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bac8:	4620      	mov	r0, r4
 800baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bacc:	3468      	adds	r4, #104	; 0x68
 800bace:	e7d9      	b.n	800ba84 <__sfp+0x1c>
 800bad0:	2104      	movs	r1, #4
 800bad2:	4638      	mov	r0, r7
 800bad4:	f7ff ff62 	bl	800b99c <__sfmoreglue>
 800bad8:	4604      	mov	r4, r0
 800bada:	6030      	str	r0, [r6, #0]
 800badc:	2800      	cmp	r0, #0
 800bade:	d1d5      	bne.n	800ba8c <__sfp+0x24>
 800bae0:	f7ff ff78 	bl	800b9d4 <__sfp_lock_release>
 800bae4:	230c      	movs	r3, #12
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	e7ee      	b.n	800bac8 <__sfp+0x60>
 800baea:	bf00      	nop
 800baec:	0800c898 	.word	0x0800c898
 800baf0:	ffff0001 	.word	0xffff0001

0800baf4 <_fwalk_reent>:
 800baf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf8:	4606      	mov	r6, r0
 800bafa:	4688      	mov	r8, r1
 800bafc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb00:	2700      	movs	r7, #0
 800bb02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb06:	f1b9 0901 	subs.w	r9, r9, #1
 800bb0a:	d505      	bpl.n	800bb18 <_fwalk_reent+0x24>
 800bb0c:	6824      	ldr	r4, [r4, #0]
 800bb0e:	2c00      	cmp	r4, #0
 800bb10:	d1f7      	bne.n	800bb02 <_fwalk_reent+0xe>
 800bb12:	4638      	mov	r0, r7
 800bb14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb18:	89ab      	ldrh	r3, [r5, #12]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d907      	bls.n	800bb2e <_fwalk_reent+0x3a>
 800bb1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb22:	3301      	adds	r3, #1
 800bb24:	d003      	beq.n	800bb2e <_fwalk_reent+0x3a>
 800bb26:	4629      	mov	r1, r5
 800bb28:	4630      	mov	r0, r6
 800bb2a:	47c0      	blx	r8
 800bb2c:	4307      	orrs	r7, r0
 800bb2e:	3568      	adds	r5, #104	; 0x68
 800bb30:	e7e9      	b.n	800bb06 <_fwalk_reent+0x12>

0800bb32 <__retarget_lock_init_recursive>:
 800bb32:	4770      	bx	lr

0800bb34 <__retarget_lock_acquire_recursive>:
 800bb34:	4770      	bx	lr

0800bb36 <__retarget_lock_release_recursive>:
 800bb36:	4770      	bx	lr

0800bb38 <__swhatbuf_r>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	460e      	mov	r6, r1
 800bb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	b096      	sub	sp, #88	; 0x58
 800bb44:	4614      	mov	r4, r2
 800bb46:	461d      	mov	r5, r3
 800bb48:	da07      	bge.n	800bb5a <__swhatbuf_r+0x22>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	89b3      	ldrh	r3, [r6, #12]
 800bb50:	061a      	lsls	r2, r3, #24
 800bb52:	d410      	bmi.n	800bb76 <__swhatbuf_r+0x3e>
 800bb54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb58:	e00e      	b.n	800bb78 <__swhatbuf_r+0x40>
 800bb5a:	466a      	mov	r2, sp
 800bb5c:	f000 fbb2 	bl	800c2c4 <_fstat_r>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dbf2      	blt.n	800bb4a <__swhatbuf_r+0x12>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb6e:	425a      	negs	r2, r3
 800bb70:	415a      	adcs	r2, r3
 800bb72:	602a      	str	r2, [r5, #0]
 800bb74:	e7ee      	b.n	800bb54 <__swhatbuf_r+0x1c>
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	2000      	movs	r0, #0
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	b016      	add	sp, #88	; 0x58
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}

0800bb80 <__smakebuf_r>:
 800bb80:	898b      	ldrh	r3, [r1, #12]
 800bb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb84:	079d      	lsls	r5, r3, #30
 800bb86:	4606      	mov	r6, r0
 800bb88:	460c      	mov	r4, r1
 800bb8a:	d507      	bpl.n	800bb9c <__smakebuf_r+0x1c>
 800bb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	2301      	movs	r3, #1
 800bb96:	6163      	str	r3, [r4, #20]
 800bb98:	b002      	add	sp, #8
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	ab01      	add	r3, sp, #4
 800bb9e:	466a      	mov	r2, sp
 800bba0:	f7ff ffca 	bl	800bb38 <__swhatbuf_r>
 800bba4:	9900      	ldr	r1, [sp, #0]
 800bba6:	4605      	mov	r5, r0
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fc3b 	bl	800b424 <_malloc_r>
 800bbae:	b948      	cbnz	r0, 800bbc4 <__smakebuf_r+0x44>
 800bbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb4:	059a      	lsls	r2, r3, #22
 800bbb6:	d4ef      	bmi.n	800bb98 <__smakebuf_r+0x18>
 800bbb8:	f023 0303 	bic.w	r3, r3, #3
 800bbbc:	f043 0302 	orr.w	r3, r3, #2
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	e7e3      	b.n	800bb8c <__smakebuf_r+0xc>
 800bbc4:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <__smakebuf_r+0x7c>)
 800bbc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	6020      	str	r0, [r4, #0]
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	9b00      	ldr	r3, [sp, #0]
 800bbd4:	6163      	str	r3, [r4, #20]
 800bbd6:	9b01      	ldr	r3, [sp, #4]
 800bbd8:	6120      	str	r0, [r4, #16]
 800bbda:	b15b      	cbz	r3, 800bbf4 <__smakebuf_r+0x74>
 800bbdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f000 fb81 	bl	800c2e8 <_isatty_r>
 800bbe6:	b128      	cbz	r0, 800bbf4 <__smakebuf_r+0x74>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	f043 0301 	orr.w	r3, r3, #1
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	89a0      	ldrh	r0, [r4, #12]
 800bbf6:	4305      	orrs	r5, r0
 800bbf8:	81a5      	strh	r5, [r4, #12]
 800bbfa:	e7cd      	b.n	800bb98 <__smakebuf_r+0x18>
 800bbfc:	0800b991 	.word	0x0800b991

0800bc00 <__malloc_lock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	; (800bc08 <__malloc_lock+0x8>)
 800bc02:	f7ff bf97 	b.w	800bb34 <__retarget_lock_acquire_recursive>
 800bc06:	bf00      	nop
 800bc08:	20006604 	.word	0x20006604

0800bc0c <__malloc_unlock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_unlock+0x8>)
 800bc0e:	f7ff bf92 	b.w	800bb36 <__retarget_lock_release_recursive>
 800bc12:	bf00      	nop
 800bc14:	20006604 	.word	0x20006604

0800bc18 <__ssputs_r>:
 800bc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1c:	688e      	ldr	r6, [r1, #8]
 800bc1e:	429e      	cmp	r6, r3
 800bc20:	4682      	mov	sl, r0
 800bc22:	460c      	mov	r4, r1
 800bc24:	4690      	mov	r8, r2
 800bc26:	461f      	mov	r7, r3
 800bc28:	d838      	bhi.n	800bc9c <__ssputs_r+0x84>
 800bc2a:	898a      	ldrh	r2, [r1, #12]
 800bc2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc30:	d032      	beq.n	800bc98 <__ssputs_r+0x80>
 800bc32:	6825      	ldr	r5, [r4, #0]
 800bc34:	6909      	ldr	r1, [r1, #16]
 800bc36:	eba5 0901 	sub.w	r9, r5, r1
 800bc3a:	6965      	ldr	r5, [r4, #20]
 800bc3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc44:	3301      	adds	r3, #1
 800bc46:	444b      	add	r3, r9
 800bc48:	106d      	asrs	r5, r5, #1
 800bc4a:	429d      	cmp	r5, r3
 800bc4c:	bf38      	it	cc
 800bc4e:	461d      	movcc	r5, r3
 800bc50:	0553      	lsls	r3, r2, #21
 800bc52:	d531      	bpl.n	800bcb8 <__ssputs_r+0xa0>
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7ff fbe5 	bl	800b424 <_malloc_r>
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	b950      	cbnz	r0, 800bc74 <__ssputs_r+0x5c>
 800bc5e:	230c      	movs	r3, #12
 800bc60:	f8ca 3000 	str.w	r3, [sl]
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc74:	6921      	ldr	r1, [r4, #16]
 800bc76:	464a      	mov	r2, r9
 800bc78:	f7ff fb6e 	bl	800b358 <memcpy>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc86:	81a3      	strh	r3, [r4, #12]
 800bc88:	6126      	str	r6, [r4, #16]
 800bc8a:	6165      	str	r5, [r4, #20]
 800bc8c:	444e      	add	r6, r9
 800bc8e:	eba5 0509 	sub.w	r5, r5, r9
 800bc92:	6026      	str	r6, [r4, #0]
 800bc94:	60a5      	str	r5, [r4, #8]
 800bc96:	463e      	mov	r6, r7
 800bc98:	42be      	cmp	r6, r7
 800bc9a:	d900      	bls.n	800bc9e <__ssputs_r+0x86>
 800bc9c:	463e      	mov	r6, r7
 800bc9e:	4632      	mov	r2, r6
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	4641      	mov	r1, r8
 800bca4:	f000 fb42 	bl	800c32c <memmove>
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	6822      	ldr	r2, [r4, #0]
 800bcac:	1b9b      	subs	r3, r3, r6
 800bcae:	4432      	add	r2, r6
 800bcb0:	60a3      	str	r3, [r4, #8]
 800bcb2:	6022      	str	r2, [r4, #0]
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7db      	b.n	800bc70 <__ssputs_r+0x58>
 800bcb8:	462a      	mov	r2, r5
 800bcba:	f000 fb51 	bl	800c360 <_realloc_r>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d1e1      	bne.n	800bc88 <__ssputs_r+0x70>
 800bcc4:	6921      	ldr	r1, [r4, #16]
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7ff fb5c 	bl	800b384 <_free_r>
 800bccc:	e7c7      	b.n	800bc5e <__ssputs_r+0x46>
	...

0800bcd0 <_svfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	4698      	mov	r8, r3
 800bcd6:	898b      	ldrh	r3, [r1, #12]
 800bcd8:	061b      	lsls	r3, r3, #24
 800bcda:	b09d      	sub	sp, #116	; 0x74
 800bcdc:	4607      	mov	r7, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	d50e      	bpl.n	800bd02 <_svfiprintf_r+0x32>
 800bce4:	690b      	ldr	r3, [r1, #16]
 800bce6:	b963      	cbnz	r3, 800bd02 <_svfiprintf_r+0x32>
 800bce8:	2140      	movs	r1, #64	; 0x40
 800bcea:	f7ff fb9b 	bl	800b424 <_malloc_r>
 800bcee:	6028      	str	r0, [r5, #0]
 800bcf0:	6128      	str	r0, [r5, #16]
 800bcf2:	b920      	cbnz	r0, 800bcfe <_svfiprintf_r+0x2e>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	e0d1      	b.n	800bea2 <_svfiprintf_r+0x1d2>
 800bcfe:	2340      	movs	r3, #64	; 0x40
 800bd00:	616b      	str	r3, [r5, #20]
 800bd02:	2300      	movs	r3, #0
 800bd04:	9309      	str	r3, [sp, #36]	; 0x24
 800bd06:	2320      	movs	r3, #32
 800bd08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd10:	2330      	movs	r3, #48	; 0x30
 800bd12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bebc <_svfiprintf_r+0x1ec>
 800bd16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd1a:	f04f 0901 	mov.w	r9, #1
 800bd1e:	4623      	mov	r3, r4
 800bd20:	469a      	mov	sl, r3
 800bd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd26:	b10a      	cbz	r2, 800bd2c <_svfiprintf_r+0x5c>
 800bd28:	2a25      	cmp	r2, #37	; 0x25
 800bd2a:	d1f9      	bne.n	800bd20 <_svfiprintf_r+0x50>
 800bd2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd30:	d00b      	beq.n	800bd4a <_svfiprintf_r+0x7a>
 800bd32:	465b      	mov	r3, fp
 800bd34:	4622      	mov	r2, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ff6d 	bl	800bc18 <__ssputs_r>
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f000 80aa 	beq.w	800be98 <_svfiprintf_r+0x1c8>
 800bd44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd46:	445a      	add	r2, fp
 800bd48:	9209      	str	r2, [sp, #36]	; 0x24
 800bd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80a2 	beq.w	800be98 <_svfiprintf_r+0x1c8>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd5e:	f10a 0a01 	add.w	sl, sl, #1
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd6c:	4654      	mov	r4, sl
 800bd6e:	2205      	movs	r2, #5
 800bd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd74:	4851      	ldr	r0, [pc, #324]	; (800bebc <_svfiprintf_r+0x1ec>)
 800bd76:	f7f4 fa3b 	bl	80001f0 <memchr>
 800bd7a:	9a04      	ldr	r2, [sp, #16]
 800bd7c:	b9d8      	cbnz	r0, 800bdb6 <_svfiprintf_r+0xe6>
 800bd7e:	06d0      	lsls	r0, r2, #27
 800bd80:	bf44      	itt	mi
 800bd82:	2320      	movmi	r3, #32
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd88:	0711      	lsls	r1, r2, #28
 800bd8a:	bf44      	itt	mi
 800bd8c:	232b      	movmi	r3, #43	; 0x2b
 800bd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd92:	f89a 3000 	ldrb.w	r3, [sl]
 800bd96:	2b2a      	cmp	r3, #42	; 0x2a
 800bd98:	d015      	beq.n	800bdc6 <_svfiprintf_r+0xf6>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f04f 0c0a 	mov.w	ip, #10
 800bda4:	4621      	mov	r1, r4
 800bda6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdaa:	3b30      	subs	r3, #48	; 0x30
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d94e      	bls.n	800be4e <_svfiprintf_r+0x17e>
 800bdb0:	b1b0      	cbz	r0, 800bde0 <_svfiprintf_r+0x110>
 800bdb2:	9207      	str	r2, [sp, #28]
 800bdb4:	e014      	b.n	800bde0 <_svfiprintf_r+0x110>
 800bdb6:	eba0 0308 	sub.w	r3, r0, r8
 800bdba:	fa09 f303 	lsl.w	r3, r9, r3
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	46a2      	mov	sl, r4
 800bdc4:	e7d2      	b.n	800bd6c <_svfiprintf_r+0x9c>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	1d19      	adds	r1, r3, #4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	9103      	str	r1, [sp, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfbb      	ittet	lt
 800bdd2:	425b      	neglt	r3, r3
 800bdd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd8:	9307      	strge	r3, [sp, #28]
 800bdda:	9307      	strlt	r3, [sp, #28]
 800bddc:	bfb8      	it	lt
 800bdde:	9204      	strlt	r2, [sp, #16]
 800bde0:	7823      	ldrb	r3, [r4, #0]
 800bde2:	2b2e      	cmp	r3, #46	; 0x2e
 800bde4:	d10c      	bne.n	800be00 <_svfiprintf_r+0x130>
 800bde6:	7863      	ldrb	r3, [r4, #1]
 800bde8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdea:	d135      	bne.n	800be58 <_svfiprintf_r+0x188>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	1d1a      	adds	r2, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9203      	str	r2, [sp, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdfc:	3402      	adds	r4, #2
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800becc <_svfiprintf_r+0x1fc>
 800be04:	7821      	ldrb	r1, [r4, #0]
 800be06:	2203      	movs	r2, #3
 800be08:	4650      	mov	r0, sl
 800be0a:	f7f4 f9f1 	bl	80001f0 <memchr>
 800be0e:	b140      	cbz	r0, 800be22 <_svfiprintf_r+0x152>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	eba0 000a 	sub.w	r0, r0, sl
 800be16:	fa03 f000 	lsl.w	r0, r3, r0
 800be1a:	9b04      	ldr	r3, [sp, #16]
 800be1c:	4303      	orrs	r3, r0
 800be1e:	3401      	adds	r4, #1
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be26:	4826      	ldr	r0, [pc, #152]	; (800bec0 <_svfiprintf_r+0x1f0>)
 800be28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be2c:	2206      	movs	r2, #6
 800be2e:	f7f4 f9df 	bl	80001f0 <memchr>
 800be32:	2800      	cmp	r0, #0
 800be34:	d038      	beq.n	800bea8 <_svfiprintf_r+0x1d8>
 800be36:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <_svfiprintf_r+0x1f4>)
 800be38:	bb1b      	cbnz	r3, 800be82 <_svfiprintf_r+0x1b2>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	3307      	adds	r3, #7
 800be3e:	f023 0307 	bic.w	r3, r3, #7
 800be42:	3308      	adds	r3, #8
 800be44:	9303      	str	r3, [sp, #12]
 800be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be48:	4433      	add	r3, r6
 800be4a:	9309      	str	r3, [sp, #36]	; 0x24
 800be4c:	e767      	b.n	800bd1e <_svfiprintf_r+0x4e>
 800be4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be52:	460c      	mov	r4, r1
 800be54:	2001      	movs	r0, #1
 800be56:	e7a5      	b.n	800bda4 <_svfiprintf_r+0xd4>
 800be58:	2300      	movs	r3, #0
 800be5a:	3401      	adds	r4, #1
 800be5c:	9305      	str	r3, [sp, #20]
 800be5e:	4619      	mov	r1, r3
 800be60:	f04f 0c0a 	mov.w	ip, #10
 800be64:	4620      	mov	r0, r4
 800be66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be6a:	3a30      	subs	r2, #48	; 0x30
 800be6c:	2a09      	cmp	r2, #9
 800be6e:	d903      	bls.n	800be78 <_svfiprintf_r+0x1a8>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0c5      	beq.n	800be00 <_svfiprintf_r+0x130>
 800be74:	9105      	str	r1, [sp, #20]
 800be76:	e7c3      	b.n	800be00 <_svfiprintf_r+0x130>
 800be78:	fb0c 2101 	mla	r1, ip, r1, r2
 800be7c:	4604      	mov	r4, r0
 800be7e:	2301      	movs	r3, #1
 800be80:	e7f0      	b.n	800be64 <_svfiprintf_r+0x194>
 800be82:	ab03      	add	r3, sp, #12
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	462a      	mov	r2, r5
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <_svfiprintf_r+0x1f8>)
 800be8a:	a904      	add	r1, sp, #16
 800be8c:	4638      	mov	r0, r7
 800be8e:	f3af 8000 	nop.w
 800be92:	1c42      	adds	r2, r0, #1
 800be94:	4606      	mov	r6, r0
 800be96:	d1d6      	bne.n	800be46 <_svfiprintf_r+0x176>
 800be98:	89ab      	ldrh	r3, [r5, #12]
 800be9a:	065b      	lsls	r3, r3, #25
 800be9c:	f53f af2c 	bmi.w	800bcf8 <_svfiprintf_r+0x28>
 800bea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bea2:	b01d      	add	sp, #116	; 0x74
 800bea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea8:	ab03      	add	r3, sp, #12
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	462a      	mov	r2, r5
 800beae:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <_svfiprintf_r+0x1f8>)
 800beb0:	a904      	add	r1, sp, #16
 800beb2:	4638      	mov	r0, r7
 800beb4:	f000 f87a 	bl	800bfac <_printf_i>
 800beb8:	e7eb      	b.n	800be92 <_svfiprintf_r+0x1c2>
 800beba:	bf00      	nop
 800bebc:	0800c8fc 	.word	0x0800c8fc
 800bec0:	0800c906 	.word	0x0800c906
 800bec4:	00000000 	.word	0x00000000
 800bec8:	0800bc19 	.word	0x0800bc19
 800becc:	0800c902 	.word	0x0800c902

0800bed0 <_printf_common>:
 800bed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed4:	4616      	mov	r6, r2
 800bed6:	4699      	mov	r9, r3
 800bed8:	688a      	ldr	r2, [r1, #8]
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	bfb8      	it	lt
 800bee4:	4613      	movlt	r3, r2
 800bee6:	6033      	str	r3, [r6, #0]
 800bee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beec:	4607      	mov	r7, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	b10a      	cbz	r2, 800bef6 <_printf_common+0x26>
 800bef2:	3301      	adds	r3, #1
 800bef4:	6033      	str	r3, [r6, #0]
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	0699      	lsls	r1, r3, #26
 800befa:	bf42      	ittt	mi
 800befc:	6833      	ldrmi	r3, [r6, #0]
 800befe:	3302      	addmi	r3, #2
 800bf00:	6033      	strmi	r3, [r6, #0]
 800bf02:	6825      	ldr	r5, [r4, #0]
 800bf04:	f015 0506 	ands.w	r5, r5, #6
 800bf08:	d106      	bne.n	800bf18 <_printf_common+0x48>
 800bf0a:	f104 0a19 	add.w	sl, r4, #25
 800bf0e:	68e3      	ldr	r3, [r4, #12]
 800bf10:	6832      	ldr	r2, [r6, #0]
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	42ab      	cmp	r3, r5
 800bf16:	dc26      	bgt.n	800bf66 <_printf_common+0x96>
 800bf18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf1c:	1e13      	subs	r3, r2, #0
 800bf1e:	6822      	ldr	r2, [r4, #0]
 800bf20:	bf18      	it	ne
 800bf22:	2301      	movne	r3, #1
 800bf24:	0692      	lsls	r2, r2, #26
 800bf26:	d42b      	bmi.n	800bf80 <_printf_common+0xb0>
 800bf28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4638      	mov	r0, r7
 800bf30:	47c0      	blx	r8
 800bf32:	3001      	adds	r0, #1
 800bf34:	d01e      	beq.n	800bf74 <_printf_common+0xa4>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	68e5      	ldr	r5, [r4, #12]
 800bf3a:	6832      	ldr	r2, [r6, #0]
 800bf3c:	f003 0306 	and.w	r3, r3, #6
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	bf08      	it	eq
 800bf44:	1aad      	subeq	r5, r5, r2
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	6922      	ldr	r2, [r4, #16]
 800bf4a:	bf0c      	ite	eq
 800bf4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf50:	2500      	movne	r5, #0
 800bf52:	4293      	cmp	r3, r2
 800bf54:	bfc4      	itt	gt
 800bf56:	1a9b      	subgt	r3, r3, r2
 800bf58:	18ed      	addgt	r5, r5, r3
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	341a      	adds	r4, #26
 800bf5e:	42b5      	cmp	r5, r6
 800bf60:	d11a      	bne.n	800bf98 <_printf_common+0xc8>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e008      	b.n	800bf78 <_printf_common+0xa8>
 800bf66:	2301      	movs	r3, #1
 800bf68:	4652      	mov	r2, sl
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	47c0      	blx	r8
 800bf70:	3001      	adds	r0, #1
 800bf72:	d103      	bne.n	800bf7c <_printf_common+0xac>
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7c:	3501      	adds	r5, #1
 800bf7e:	e7c6      	b.n	800bf0e <_printf_common+0x3e>
 800bf80:	18e1      	adds	r1, r4, r3
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	2030      	movs	r0, #48	; 0x30
 800bf86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf8a:	4422      	add	r2, r4
 800bf8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf94:	3302      	adds	r3, #2
 800bf96:	e7c7      	b.n	800bf28 <_printf_common+0x58>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	47c0      	blx	r8
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	d0e6      	beq.n	800bf74 <_printf_common+0xa4>
 800bfa6:	3601      	adds	r6, #1
 800bfa8:	e7d9      	b.n	800bf5e <_printf_common+0x8e>
	...

0800bfac <_printf_i>:
 800bfac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	4691      	mov	r9, r2
 800bfb4:	7e27      	ldrb	r7, [r4, #24]
 800bfb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfb8:	2f78      	cmp	r7, #120	; 0x78
 800bfba:	4680      	mov	r8, r0
 800bfbc:	469a      	mov	sl, r3
 800bfbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfc2:	d807      	bhi.n	800bfd4 <_printf_i+0x28>
 800bfc4:	2f62      	cmp	r7, #98	; 0x62
 800bfc6:	d80a      	bhi.n	800bfde <_printf_i+0x32>
 800bfc8:	2f00      	cmp	r7, #0
 800bfca:	f000 80d8 	beq.w	800c17e <_printf_i+0x1d2>
 800bfce:	2f58      	cmp	r7, #88	; 0x58
 800bfd0:	f000 80a3 	beq.w	800c11a <_printf_i+0x16e>
 800bfd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfdc:	e03a      	b.n	800c054 <_printf_i+0xa8>
 800bfde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfe2:	2b15      	cmp	r3, #21
 800bfe4:	d8f6      	bhi.n	800bfd4 <_printf_i+0x28>
 800bfe6:	a001      	add	r0, pc, #4	; (adr r0, 800bfec <_printf_i+0x40>)
 800bfe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfec:	0800c045 	.word	0x0800c045
 800bff0:	0800c059 	.word	0x0800c059
 800bff4:	0800bfd5 	.word	0x0800bfd5
 800bff8:	0800bfd5 	.word	0x0800bfd5
 800bffc:	0800bfd5 	.word	0x0800bfd5
 800c000:	0800bfd5 	.word	0x0800bfd5
 800c004:	0800c059 	.word	0x0800c059
 800c008:	0800bfd5 	.word	0x0800bfd5
 800c00c:	0800bfd5 	.word	0x0800bfd5
 800c010:	0800bfd5 	.word	0x0800bfd5
 800c014:	0800bfd5 	.word	0x0800bfd5
 800c018:	0800c165 	.word	0x0800c165
 800c01c:	0800c089 	.word	0x0800c089
 800c020:	0800c147 	.word	0x0800c147
 800c024:	0800bfd5 	.word	0x0800bfd5
 800c028:	0800bfd5 	.word	0x0800bfd5
 800c02c:	0800c187 	.word	0x0800c187
 800c030:	0800bfd5 	.word	0x0800bfd5
 800c034:	0800c089 	.word	0x0800c089
 800c038:	0800bfd5 	.word	0x0800bfd5
 800c03c:	0800bfd5 	.word	0x0800bfd5
 800c040:	0800c14f 	.word	0x0800c14f
 800c044:	680b      	ldr	r3, [r1, #0]
 800c046:	1d1a      	adds	r2, r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	600a      	str	r2, [r1, #0]
 800c04c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c054:	2301      	movs	r3, #1
 800c056:	e0a3      	b.n	800c1a0 <_printf_i+0x1f4>
 800c058:	6825      	ldr	r5, [r4, #0]
 800c05a:	6808      	ldr	r0, [r1, #0]
 800c05c:	062e      	lsls	r6, r5, #24
 800c05e:	f100 0304 	add.w	r3, r0, #4
 800c062:	d50a      	bpl.n	800c07a <_printf_i+0xce>
 800c064:	6805      	ldr	r5, [r0, #0]
 800c066:	600b      	str	r3, [r1, #0]
 800c068:	2d00      	cmp	r5, #0
 800c06a:	da03      	bge.n	800c074 <_printf_i+0xc8>
 800c06c:	232d      	movs	r3, #45	; 0x2d
 800c06e:	426d      	negs	r5, r5
 800c070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c074:	485e      	ldr	r0, [pc, #376]	; (800c1f0 <_printf_i+0x244>)
 800c076:	230a      	movs	r3, #10
 800c078:	e019      	b.n	800c0ae <_printf_i+0x102>
 800c07a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c07e:	6805      	ldr	r5, [r0, #0]
 800c080:	600b      	str	r3, [r1, #0]
 800c082:	bf18      	it	ne
 800c084:	b22d      	sxthne	r5, r5
 800c086:	e7ef      	b.n	800c068 <_printf_i+0xbc>
 800c088:	680b      	ldr	r3, [r1, #0]
 800c08a:	6825      	ldr	r5, [r4, #0]
 800c08c:	1d18      	adds	r0, r3, #4
 800c08e:	6008      	str	r0, [r1, #0]
 800c090:	0628      	lsls	r0, r5, #24
 800c092:	d501      	bpl.n	800c098 <_printf_i+0xec>
 800c094:	681d      	ldr	r5, [r3, #0]
 800c096:	e002      	b.n	800c09e <_printf_i+0xf2>
 800c098:	0669      	lsls	r1, r5, #25
 800c09a:	d5fb      	bpl.n	800c094 <_printf_i+0xe8>
 800c09c:	881d      	ldrh	r5, [r3, #0]
 800c09e:	4854      	ldr	r0, [pc, #336]	; (800c1f0 <_printf_i+0x244>)
 800c0a0:	2f6f      	cmp	r7, #111	; 0x6f
 800c0a2:	bf0c      	ite	eq
 800c0a4:	2308      	moveq	r3, #8
 800c0a6:	230a      	movne	r3, #10
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ae:	6866      	ldr	r6, [r4, #4]
 800c0b0:	60a6      	str	r6, [r4, #8]
 800c0b2:	2e00      	cmp	r6, #0
 800c0b4:	bfa2      	ittt	ge
 800c0b6:	6821      	ldrge	r1, [r4, #0]
 800c0b8:	f021 0104 	bicge.w	r1, r1, #4
 800c0bc:	6021      	strge	r1, [r4, #0]
 800c0be:	b90d      	cbnz	r5, 800c0c4 <_printf_i+0x118>
 800c0c0:	2e00      	cmp	r6, #0
 800c0c2:	d04d      	beq.n	800c160 <_printf_i+0x1b4>
 800c0c4:	4616      	mov	r6, r2
 800c0c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0ca:	fb03 5711 	mls	r7, r3, r1, r5
 800c0ce:	5dc7      	ldrb	r7, [r0, r7]
 800c0d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0d4:	462f      	mov	r7, r5
 800c0d6:	42bb      	cmp	r3, r7
 800c0d8:	460d      	mov	r5, r1
 800c0da:	d9f4      	bls.n	800c0c6 <_printf_i+0x11a>
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d10b      	bne.n	800c0f8 <_printf_i+0x14c>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	07df      	lsls	r7, r3, #31
 800c0e4:	d508      	bpl.n	800c0f8 <_printf_i+0x14c>
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	6861      	ldr	r1, [r4, #4]
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	bfde      	ittt	le
 800c0ee:	2330      	movle	r3, #48	; 0x30
 800c0f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0f8:	1b92      	subs	r2, r2, r6
 800c0fa:	6122      	str	r2, [r4, #16]
 800c0fc:	f8cd a000 	str.w	sl, [sp]
 800c100:	464b      	mov	r3, r9
 800c102:	aa03      	add	r2, sp, #12
 800c104:	4621      	mov	r1, r4
 800c106:	4640      	mov	r0, r8
 800c108:	f7ff fee2 	bl	800bed0 <_printf_common>
 800c10c:	3001      	adds	r0, #1
 800c10e:	d14c      	bne.n	800c1aa <_printf_i+0x1fe>
 800c110:	f04f 30ff 	mov.w	r0, #4294967295
 800c114:	b004      	add	sp, #16
 800c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11a:	4835      	ldr	r0, [pc, #212]	; (800c1f0 <_printf_i+0x244>)
 800c11c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	680e      	ldr	r6, [r1, #0]
 800c124:	061f      	lsls	r7, r3, #24
 800c126:	f856 5b04 	ldr.w	r5, [r6], #4
 800c12a:	600e      	str	r6, [r1, #0]
 800c12c:	d514      	bpl.n	800c158 <_printf_i+0x1ac>
 800c12e:	07d9      	lsls	r1, r3, #31
 800c130:	bf44      	itt	mi
 800c132:	f043 0320 	orrmi.w	r3, r3, #32
 800c136:	6023      	strmi	r3, [r4, #0]
 800c138:	b91d      	cbnz	r5, 800c142 <_printf_i+0x196>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	f023 0320 	bic.w	r3, r3, #32
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	2310      	movs	r3, #16
 800c144:	e7b0      	b.n	800c0a8 <_printf_i+0xfc>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	f043 0320 	orr.w	r3, r3, #32
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	2378      	movs	r3, #120	; 0x78
 800c150:	4828      	ldr	r0, [pc, #160]	; (800c1f4 <_printf_i+0x248>)
 800c152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c156:	e7e3      	b.n	800c120 <_printf_i+0x174>
 800c158:	065e      	lsls	r6, r3, #25
 800c15a:	bf48      	it	mi
 800c15c:	b2ad      	uxthmi	r5, r5
 800c15e:	e7e6      	b.n	800c12e <_printf_i+0x182>
 800c160:	4616      	mov	r6, r2
 800c162:	e7bb      	b.n	800c0dc <_printf_i+0x130>
 800c164:	680b      	ldr	r3, [r1, #0]
 800c166:	6826      	ldr	r6, [r4, #0]
 800c168:	6960      	ldr	r0, [r4, #20]
 800c16a:	1d1d      	adds	r5, r3, #4
 800c16c:	600d      	str	r5, [r1, #0]
 800c16e:	0635      	lsls	r5, r6, #24
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	d501      	bpl.n	800c178 <_printf_i+0x1cc>
 800c174:	6018      	str	r0, [r3, #0]
 800c176:	e002      	b.n	800c17e <_printf_i+0x1d2>
 800c178:	0671      	lsls	r1, r6, #25
 800c17a:	d5fb      	bpl.n	800c174 <_printf_i+0x1c8>
 800c17c:	8018      	strh	r0, [r3, #0]
 800c17e:	2300      	movs	r3, #0
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	4616      	mov	r6, r2
 800c184:	e7ba      	b.n	800c0fc <_printf_i+0x150>
 800c186:	680b      	ldr	r3, [r1, #0]
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	600a      	str	r2, [r1, #0]
 800c18c:	681e      	ldr	r6, [r3, #0]
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	2100      	movs	r1, #0
 800c192:	4630      	mov	r0, r6
 800c194:	f7f4 f82c 	bl	80001f0 <memchr>
 800c198:	b108      	cbz	r0, 800c19e <_printf_i+0x1f2>
 800c19a:	1b80      	subs	r0, r0, r6
 800c19c:	6060      	str	r0, [r4, #4]
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1a8:	e7a8      	b.n	800c0fc <_printf_i+0x150>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	47d0      	blx	sl
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d0ab      	beq.n	800c110 <_printf_i+0x164>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	079b      	lsls	r3, r3, #30
 800c1bc:	d413      	bmi.n	800c1e6 <_printf_i+0x23a>
 800c1be:	68e0      	ldr	r0, [r4, #12]
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	4298      	cmp	r0, r3
 800c1c4:	bfb8      	it	lt
 800c1c6:	4618      	movlt	r0, r3
 800c1c8:	e7a4      	b.n	800c114 <_printf_i+0x168>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	47d0      	blx	sl
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d09b      	beq.n	800c110 <_printf_i+0x164>
 800c1d8:	3501      	adds	r5, #1
 800c1da:	68e3      	ldr	r3, [r4, #12]
 800c1dc:	9903      	ldr	r1, [sp, #12]
 800c1de:	1a5b      	subs	r3, r3, r1
 800c1e0:	42ab      	cmp	r3, r5
 800c1e2:	dcf2      	bgt.n	800c1ca <_printf_i+0x21e>
 800c1e4:	e7eb      	b.n	800c1be <_printf_i+0x212>
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	f104 0619 	add.w	r6, r4, #25
 800c1ec:	e7f5      	b.n	800c1da <_printf_i+0x22e>
 800c1ee:	bf00      	nop
 800c1f0:	0800c90d 	.word	0x0800c90d
 800c1f4:	0800c91e 	.word	0x0800c91e

0800c1f8 <__sread>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	f000 f8d4 	bl	800c3ac <_read_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	bfab      	itete	ge
 800c208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c20a:	89a3      	ldrhlt	r3, [r4, #12]
 800c20c:	181b      	addge	r3, r3, r0
 800c20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c212:	bfac      	ite	ge
 800c214:	6563      	strge	r3, [r4, #84]	; 0x54
 800c216:	81a3      	strhlt	r3, [r4, #12]
 800c218:	bd10      	pop	{r4, pc}

0800c21a <__swrite>:
 800c21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	461f      	mov	r7, r3
 800c220:	898b      	ldrh	r3, [r1, #12]
 800c222:	05db      	lsls	r3, r3, #23
 800c224:	4605      	mov	r5, r0
 800c226:	460c      	mov	r4, r1
 800c228:	4616      	mov	r6, r2
 800c22a:	d505      	bpl.n	800c238 <__swrite+0x1e>
 800c22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c230:	2302      	movs	r3, #2
 800c232:	2200      	movs	r2, #0
 800c234:	f000 f868 	bl	800c308 <_lseek_r>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c23e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	4632      	mov	r2, r6
 800c246:	463b      	mov	r3, r7
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	f000 b817 	b.w	800c280 <_write_r>

0800c252 <__sseek>:
 800c252:	b510      	push	{r4, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25a:	f000 f855 	bl	800c308 <_lseek_r>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	bf15      	itete	ne
 800c264:	6560      	strne	r0, [r4, #84]	; 0x54
 800c266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c26e:	81a3      	strheq	r3, [r4, #12]
 800c270:	bf18      	it	ne
 800c272:	81a3      	strhne	r3, [r4, #12]
 800c274:	bd10      	pop	{r4, pc}

0800c276 <__sclose>:
 800c276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27a:	f000 b813 	b.w	800c2a4 <_close_r>
	...

0800c280 <_write_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_write_r+0x20>)
 800c284:	4604      	mov	r4, r0
 800c286:	4608      	mov	r0, r1
 800c288:	4611      	mov	r1, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f7f4 f9a1 	bl	80005d6 <_write>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_write_r+0x1e>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_write_r+0x1e>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	2000660c 	.word	0x2000660c

0800c2a4 <_close_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d06      	ldr	r5, [pc, #24]	; (800c2c0 <_close_r+0x1c>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	602b      	str	r3, [r5, #0]
 800c2b0:	f7f5 f8b3 	bl	800141a <_close>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_close_r+0x1a>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_close_r+0x1a>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	2000660c 	.word	0x2000660c

0800c2c4 <_fstat_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	; (800c2e4 <_fstat_r+0x20>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	f7f5 f8ae 	bl	8001432 <_fstat>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d102      	bne.n	800c2e0 <_fstat_r+0x1c>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	b103      	cbz	r3, 800c2e0 <_fstat_r+0x1c>
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
 800c2e2:	bf00      	nop
 800c2e4:	2000660c 	.word	0x2000660c

0800c2e8 <_isatty_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_isatty_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f5 f8ad 	bl	8001452 <_isatty>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_isatty_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_isatty_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	2000660c 	.word	0x2000660c

0800c308 <_lseek_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4d07      	ldr	r5, [pc, #28]	; (800c328 <_lseek_r+0x20>)
 800c30c:	4604      	mov	r4, r0
 800c30e:	4608      	mov	r0, r1
 800c310:	4611      	mov	r1, r2
 800c312:	2200      	movs	r2, #0
 800c314:	602a      	str	r2, [r5, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	f7f5 f8a6 	bl	8001468 <_lseek>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_lseek_r+0x1e>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_lseek_r+0x1e>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	2000660c 	.word	0x2000660c

0800c32c <memmove>:
 800c32c:	4288      	cmp	r0, r1
 800c32e:	b510      	push	{r4, lr}
 800c330:	eb01 0402 	add.w	r4, r1, r2
 800c334:	d902      	bls.n	800c33c <memmove+0x10>
 800c336:	4284      	cmp	r4, r0
 800c338:	4623      	mov	r3, r4
 800c33a:	d807      	bhi.n	800c34c <memmove+0x20>
 800c33c:	1e43      	subs	r3, r0, #1
 800c33e:	42a1      	cmp	r1, r4
 800c340:	d008      	beq.n	800c354 <memmove+0x28>
 800c342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c34a:	e7f8      	b.n	800c33e <memmove+0x12>
 800c34c:	4402      	add	r2, r0
 800c34e:	4601      	mov	r1, r0
 800c350:	428a      	cmp	r2, r1
 800c352:	d100      	bne.n	800c356 <memmove+0x2a>
 800c354:	bd10      	pop	{r4, pc}
 800c356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c35e:	e7f7      	b.n	800c350 <memmove+0x24>

0800c360 <_realloc_r>:
 800c360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c362:	4607      	mov	r7, r0
 800c364:	4614      	mov	r4, r2
 800c366:	460e      	mov	r6, r1
 800c368:	b921      	cbnz	r1, 800c374 <_realloc_r+0x14>
 800c36a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c36e:	4611      	mov	r1, r2
 800c370:	f7ff b858 	b.w	800b424 <_malloc_r>
 800c374:	b922      	cbnz	r2, 800c380 <_realloc_r+0x20>
 800c376:	f7ff f805 	bl	800b384 <_free_r>
 800c37a:	4625      	mov	r5, r4
 800c37c:	4628      	mov	r0, r5
 800c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c380:	f000 f826 	bl	800c3d0 <_malloc_usable_size_r>
 800c384:	42a0      	cmp	r0, r4
 800c386:	d20f      	bcs.n	800c3a8 <_realloc_r+0x48>
 800c388:	4621      	mov	r1, r4
 800c38a:	4638      	mov	r0, r7
 800c38c:	f7ff f84a 	bl	800b424 <_malloc_r>
 800c390:	4605      	mov	r5, r0
 800c392:	2800      	cmp	r0, #0
 800c394:	d0f2      	beq.n	800c37c <_realloc_r+0x1c>
 800c396:	4631      	mov	r1, r6
 800c398:	4622      	mov	r2, r4
 800c39a:	f7fe ffdd 	bl	800b358 <memcpy>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f7fe ffef 	bl	800b384 <_free_r>
 800c3a6:	e7e9      	b.n	800c37c <_realloc_r+0x1c>
 800c3a8:	4635      	mov	r5, r6
 800c3aa:	e7e7      	b.n	800c37c <_realloc_r+0x1c>

0800c3ac <_read_r>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	4d07      	ldr	r5, [pc, #28]	; (800c3cc <_read_r+0x20>)
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	602a      	str	r2, [r5, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	f7f5 f810 	bl	80013e0 <_read>
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	d102      	bne.n	800c3ca <_read_r+0x1e>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	b103      	cbz	r3, 800c3ca <_read_r+0x1e>
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	bd38      	pop	{r3, r4, r5, pc}
 800c3cc:	2000660c 	.word	0x2000660c

0800c3d0 <_malloc_usable_size_r>:
 800c3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d4:	1f18      	subs	r0, r3, #4
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	bfbc      	itt	lt
 800c3da:	580b      	ldrlt	r3, [r1, r0]
 800c3dc:	18c0      	addlt	r0, r0, r3
 800c3de:	4770      	bx	lr

0800c3e0 <_init>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	bf00      	nop
 800c3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3e6:	bc08      	pop	{r3}
 800c3e8:	469e      	mov	lr, r3
 800c3ea:	4770      	bx	lr

0800c3ec <_fini>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	bf00      	nop
 800c3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f2:	bc08      	pop	{r3}
 800c3f4:	469e      	mov	lr, r3
 800c3f6:	4770      	bx	lr
